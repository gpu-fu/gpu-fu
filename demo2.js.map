{"version":3,"file":"demo2.js","mappings":"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","sources":["webpack://beta/webpack/universalModuleDefinition","webpack://beta/webpack/bootstrap","webpack://beta/webpack/runtime/make namespace object","webpack://beta/../gpu-fu/src/Context.ts","webpack://beta/../gpu-fu/src/hooks.ts","webpack://beta/../gpu-fu/src/Unit.ts","webpack://beta/../incubator/src/OutputCanvas.ts","webpack://beta/../incubator/src/VertexSourceRect.ts","webpack://beta/../incubator/src/RenderTextureRect.ts","webpack://beta/../incubator/src/RenderUV.ts","webpack://beta/../incubator/src/RenderUV.wgsl","webpack://beta/../incubator/src/TextureSourceBitmapFromURL.ts","webpack://beta/../incubator/src/TextureSourceBitmap.ts","webpack://beta/./src/runDemo.ts","webpack://beta/./src/demo2.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"beta\"] = factory();\n\telse\n\t\troot[\"beta\"] = factory();\n})(typeof self !== 'undefined' ? self : this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/// <reference types=\"@webgpu/types\" />\n\nimport { Unit } from \"./Unit\"\nimport { Property } from \"./Property\"\n\nexport type MaybeDestroyableGPUResource =\n  | undefined\n  | 0\n  | false\n  | null\n  | (GPUObjectBase & { destroy?: () => void })\nexport type StoreItemGPUResource<T extends MaybeDestroyableGPUResource> = [\n  T,\n  unknown[],\n]\n\nexport type StoreItemGPUAction = [\n  (ctx: ContextForGPUAction) => void,\n  unknown[],\n  boolean,\n]\n\nexport type StoreItemEffect = [(() => void) | undefined, unknown[]]\n\nexport class ContextImplementation<U> {\n  private _unitFn: (ctx: Context) => U\n\n  device: GPUDevice\n  commandEncoder?: GPUCommandEncoder\n\n  constructor(unitFn: (ctx: Context) => U, device: GPUDevice) {\n    this._unitFn = unitFn\n    this.device = device\n  }\n\n  ///\n  // This next section relates to private storage of state and effects.\n\n  private _store: unknown[] = []\n  private _storeIndex = 0\n  private _storeUnits: Property<Unit<unknown> | undefined>[] = []\n  private _storeUnitsIndex = 0\n  private _storeGPUActions: StoreItemGPUAction[] = []\n  private _storeGPUActionsIndex = 0\n  private _needsUnitReRun = true\n\n  private _nextStoreIndex() {\n    const storeIndex = this._storeIndex\n    this._storeIndex = storeIndex + 1\n    return storeIndex\n  }\n\n  private _nextStoreUnitsIndex() {\n    const storeUnitsIndex = this._storeUnitsIndex\n    this._storeUnitsIndex = storeUnitsIndex + 1\n    return storeUnitsIndex\n  }\n\n  private _nextStoreGPUActionsIndex() {\n    const storeGPUActionsIndex = this._storeGPUActionsIndex\n    this._storeGPUActionsIndex = storeGPUActionsIndex + 1\n    return storeGPUActionsIndex\n  }\n\n  ///\n  // This next section has public methods related to running the unit.\n\n  runUnitIfNeeded(currentUnit: U) {\n    var otherUnitsRan = false\n    this._storeUnits.forEach((unitProp) => {\n      const unit = unitProp()\n      const otherUnitRan = unit?._ctx.runUnitIfNeeded(unit)\n      if (otherUnitRan) otherUnitsRan = true\n    })\n\n    if (this._needsUnitReRun || otherUnitsRan) {\n      this._storeIndex = 0\n      this._storeUnitsIndex = 0\n      this._storeGPUActionsIndex = 0\n      this._needsUnitReRun = false\n      Object.assign(currentUnit, this._unitFn(this))\n      return true\n    } else {\n      return false\n    }\n  }\n\n  runGPUActionsIfNeeded(commandEncoder: GPUCommandEncoder) {\n    this._storeUnits.forEach((unitProp) => {\n      const unit = unitProp()\n      unit?._ctx.runGPUActionsIfNeeded(commandEncoder)\n    })\n\n    this.commandEncoder = commandEncoder\n    this._storeGPUActions.forEach(([action, deps, needsRun], index) => {\n      if (needsRun) {\n        action(this as ContextForGPUAction)\n        this._storeGPUActions[index][2] = false\n      }\n    })\n    this.commandEncoder = undefined\n  }\n\n  ///\n  // This next section has public methods\n\n  _useProp<T>(initialValue: (() => T) | T): Property<T> {\n    const storeIndex = this._nextStoreIndex()\n    const existing = this._store[storeIndex] as Property<T>\n\n    // If there is an existing property pair, return it now.\n    if (existing) return existing\n\n    // Otherwise create, store, and return a new prop/setProp pair,\n    // using the provided initial state value or function.\n    const ctx = this\n\n    var value: T =\n      typeof initialValue === \"function\"\n        ? (initialValue as () => T)()\n        : initialValue\n\n    // TODO: Subscription tracking\n    const prop: Property<T> = (() => value) as Property<T>\n    prop.set = (newValue: T) => {\n      if (value !== newValue) {\n        value = newValue\n        ctx._needsUnitReRun = true\n      }\n    }\n    prop.change = (fn: (currentValue: T) => T) => {\n      const newValue = fn(value)\n      if (value !== newValue) {\n        value = newValue\n        ctx._needsUnitReRun = true\n      }\n    }\n    prop.mutate = (fn: (currentValue: T) => void) => {\n      fn(value)\n      ctx._needsUnitReRun = true // assume mutation always happens\n    }\n\n    this._store[storeIndex] = prop\n    return prop\n  }\n\n  _useUnitProp<T extends Unit<unknown> | undefined>(\n    initialValue: (() => T) | T,\n  ): Property<T> {\n    const storeIndex = this._nextStoreUnitsIndex()\n    const existing = this._storeUnits[storeIndex] as Property<T>\n\n    // If there is an existing prop/setProp pair, return it now.\n    if (existing) return existing\n\n    // Otherwise create, store, and return a new prop/setProp pair,\n    // using the provided initial state value or function.\n    const ctx = this\n\n    var value: T =\n      typeof initialValue === \"function\"\n        ? (initialValue as () => T)()\n        : initialValue\n\n    // TODO: Subscription tracking\n    const prop: Property<T> = (() => value) as Property<T>\n    prop.set = (newValue: T) => {\n      if (value !== newValue) {\n        value = newValue\n        ctx._needsUnitReRun = true\n      }\n    }\n    prop.change = (fn: (currentValue: T) => T) => {\n      const newValue = fn(value)\n      if (value !== newValue) {\n        value = newValue\n        ctx._needsUnitReRun = true\n      }\n    }\n    prop.mutate = (fn: (currentValue: T) => void) => {\n      fn(value)\n      ctx._needsUnitReRun = true // assume mutation always happens\n    }\n\n    this._storeUnits[storeIndex] = prop\n    return prop\n  }\n\n  _useGPUResource<T extends MaybeDestroyableGPUResource>(\n    create: (ctx: ContextForGPUResource) => T,\n    deps: Array<unknown>,\n  ): T {\n    const storeIndex = this._nextStoreIndex()\n    const existing = this._store[storeIndex] as StoreItemGPUResource<T>\n\n    // If the resource has never been created, create it now.\n    if (!existing) {\n      const newResource = create(this)\n      this._store[storeIndex] = [newResource, deps]\n      return newResource\n    }\n\n    // If the resource exists, and all new dependencies have the same identity\n    // as the corresponding old dependencies, return the existing resource.\n    if (deps.every((dep, index) => dep === existing[1][index]))\n      return existing[0]\n\n    // Create the new resource and store it along with its dependencies.\n    const newResource = create(this)\n    const oldResource = existing[0]\n    existing[0] = newResource\n    existing[1] = deps\n\n    // Destroy the old resource if applicable.\n    if (oldResource && typeof oldResource.destroy === \"function\")\n      oldResource.destroy()\n\n    // Return the new resource\n    return newResource\n  }\n\n  _useGPUAction(\n    action: (ctx: ContextForGPUAction) => void,\n    deps: Array<unknown>,\n  ): void {\n    const storeIndex = this._nextStoreGPUActionsIndex()\n    const existing = this._storeGPUActions[storeIndex] as StoreItemGPUAction\n\n    // If the action has never been stored, store it now and return early.\n    if (!existing) {\n      this._storeGPUActions[storeIndex] = [action, deps, true]\n      return\n    }\n\n    // If the action is known, and all new dependencies have the same identity\n    // as the corresponding old dependencies, return without doing anything.\n    if (deps.every((dep, index) => dep === existing[1][index])) return\n\n    // Update the action function along with its dependencies,\n    // and mark it as being \"dirty\" (i.e. in need of being executed again).\n    existing[0] = action\n    existing[1] = deps\n    existing[2] = true\n    return\n  }\n\n  _useEffect(\n    effect: (ctx: ContextEmpty) => (() => void) | undefined,\n    deps: Array<unknown>,\n  ) {\n    const storeIndex = this._nextStoreIndex()\n    const existing = this._store[storeIndex] as StoreItemEffect\n\n    // If the effect has never been stored, store it now after executing.\n    if (!existing) {\n      const cancelFn = effect({})\n      this._store[storeIndex] = [cancelFn, deps]\n      return\n    }\n\n    // If the effect is known, and all new dependencies have the same identity\n    // as the corresponding old dependencies, return without doing anything.\n    if (deps.every((dep, index) => dep === existing[1][index])) return\n\n    // Call the existing cancel function if there is one.\n    if (existing[0]) existing[0]()\n\n    // Execute the effect function to get the new cancel function, then\n    // store it along with the new dependency identities.\n    existing[0] = effect({})\n    existing[1] = deps\n    return\n  }\n}\n\nexport type Context = Pick<\n  ContextImplementation<unknown>,\n  // In the main function context, hooks are available.\n  | \"device\"\n  | \"_useProp\"\n  | \"_useUnitProp\"\n  | \"_useGPUResource\"\n  | \"_useGPUAction\"\n  | \"_useEffect\"\n>\n\nexport type ContextForGPUResource = Pick<\n  ContextImplementation<unknown>,\n  // No hooks are available.\n  \"device\"\n>\n\nexport type ContextForGPUAction = Pick<\n  ContextImplementation<unknown>,\n  // No hooks are available, but a command encoder is available.\n  \"device\"\n> & { commandEncoder: GPUCommandEncoder }\n\nexport type ContextEmpty = {}\n","import {\n  Context,\n  ContextForGPUResource,\n  ContextForGPUAction,\n  MaybeDestroyableGPUResource,\n  ContextEmpty,\n} from \"./Context\"\nimport { Unit, UnitFn, NotAUnit, unit } from \"./Unit\"\nimport { Property } from \"./Property\"\n\nexport function useProp<T>(ctx: Context): Property<NotAUnit<T | undefined>> {\n  return ctx._useProp<T | undefined>(undefined) as Property<\n    NotAUnit<T | undefined>\n  >\n}\n\nexport function useInitializedProp<T>(\n  ctx: Context,\n  initialValue: (() => NotAUnit<T>) | NotAUnit<T>,\n): Property<NotAUnit<T>> {\n  return ctx._useProp<NotAUnit<T>>(initialValue)\n}\n\nexport function useUnitProp<U>(ctx: Context): Property<Unit<U> | undefined> {\n  return ctx._useUnitProp<Unit<U> | undefined>(undefined)\n}\n\nexport function useUnit<U>(ctx: Context, unitFn: UnitFn<U>): Unit<U> {\n  return ctx._useUnitProp<Unit<U>>(() => unit(ctx.device, unitFn))()\n}\n\nexport function useGPUResource<T extends MaybeDestroyableGPUResource>(\n  ctx: Context,\n  create: (ctx: ContextForGPUResource) => T,\n  deps: Array<unknown>,\n): T {\n  return ctx._useGPUResource<T>(create, deps)\n}\n\nexport function useGPUAction(\n  ctx: Context,\n  action: (ctx: ContextForGPUAction) => void,\n  deps: Array<unknown>,\n): void {\n  ctx._useGPUAction(action, deps)\n}\n\nexport function useEffect<T>(\n  ctx: Context,\n  effect: (ctx: ContextEmpty) => (() => void) | undefined,\n  deps: Array<unknown>,\n) {\n  return ctx._useEffect(effect, deps)\n}\n\nexport function useAsyncPropSetter<T>(\n  ctx: Context,\n  setPropFn: (newValue: T) => unknown,\n  effect: (ctx: ContextEmpty) => Promise<T>,\n  deps: Array<unknown>,\n) {\n  return ctx._useEffect((ctx) => {\n    var cancelled = false\n    effect(ctx)\n      .then((value) => cancelled || setPropFn(value))\n      .catch((error) => {\n        console.error(error)\n        cancelled = true\n      })\n    return () => {\n      cancelled = true\n    }\n  }, deps)\n}\n","import { Context, ContextImplementation } from \"./Context\"\n\nexport type UnitAny = {\n  _ctx: Context\n}\n\nexport type Unit<U> = U & {\n  _ctx: ContextImplementation<U>\n}\n\nexport type UnitRoot<U> = U & {\n  _ctx: ContextImplementation<U>\n  runFrame: (commandEncoder: GPUCommandEncoder) => void\n}\n\nexport type UnitFn<U> = (ctx: Context) => U\n\nexport type NotAUnit<T> = T extends UnitAny ? never : T\n\nexport function unit<U>(\n  device: GPUDevice,\n  unitFn: (ctx: Context) => U,\n): Unit<U> {\n  const ctx = new ContextImplementation<U>(unitFn, device)\n  return { ...unitFn(ctx), _ctx: ctx }\n}\n\nfunction unitFrame<U>(unit: Unit<U>, commandEncoder: GPUCommandEncoder) {\n  const ctx = unit._ctx\n  ctx.runUnitIfNeeded(unit)\n  ctx.runGPUActionsIfNeeded(commandEncoder)\n}\n\nexport function createUnitRoot<U>(\n  device: GPUDevice,\n  unitFn: (ctx: Context) => U,\n): UnitRoot<U> {\n  const ctx = new ContextImplementation<U>(unitFn, device)\n  const unitRoot = { ...unitFn(ctx), _ctx: ctx } as UnitRoot<U>\n  unitRoot.runFrame = (commandEncoder: GPUCommandEncoder) =>\n    unitFrame(unitRoot, commandEncoder)\n  return unitRoot\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { Render, UnitRoot } from \"@gpu-fu/gpu-fu\"\n\nexport default class OutputCanvas {\n  _canvasContext: GPUCanvasContext\n  _renders: UnitRoot<Render>[] = []\n\n  constructor(canvasContext: GPUCanvasContext) {\n    this._canvasContext = canvasContext\n  }\n\n  addRender(render: UnitRoot<Render>) {\n    if (this._renders.includes(render)) return\n    this._renders.push(render)\n  }\n\n  outputFrame(commandEncoder: GPUCommandEncoder) {\n    const target = this._canvasContext.getCurrentTexture()\n    this._renders.forEach((render) => {\n      render.renderTarget.set(target)\n      render.runFrame(commandEncoder)\n    })\n  }\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { Context, useProp, useGPUAction, useGPUResource } from \"@gpu-fu/gpu-fu\"\n\nconst vertexSourceCount = 6\nconst vertexSourceTotalBytes = 6 * 6 * 4\nconst vertexSourceStrideBytes = 6 * 4\nconst vertexSourceXYZWOffsetBytes = 0\nconst vertexSourceUVOffsetBytes = 4 * 4\n\nexport default function VertexSourceRect(ctx: Context) {\n  const aspectFillRatio = useProp<number>(ctx)\n\n  const buffer = useGPUResource(\n    ctx,\n    (ctx) =>\n      ctx.device.createBuffer({\n        size: vertexSourceTotalBytes,\n        usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\n      }),\n    [],\n  )\n\n  useGPUAction(\n    ctx,\n    (ctx) => {\n      const currentAspectFillRatio = aspectFillRatio()\n      if (!buffer) return\n\n      var uMin = 0\n      var uMax = 1\n      var vMin = 0\n      var vMax = 1\n\n      if (currentAspectFillRatio) {\n        if (currentAspectFillRatio < 1) {\n          vMin = 0.5 - 0.5 * currentAspectFillRatio\n          vMax = 1 - vMin\n        } else {\n          uMin = 0.5 - 0.5 / currentAspectFillRatio\n          uMax = 1 - uMin\n        }\n      }\n\n      // prettier-ignore\n      const data = new Float32Array([\n      // (x, y, z, w),  (u, v)\n          1, 1, 0, 1, uMax, vMin,\n         -1,-1, 0, 1, uMin, vMax,\n         -1, 1, 0, 1, uMin, vMin,\n          1, 1, 0, 1, uMax, vMin,\n          1,-1, 0, 1, uMax, vMax,\n         -1,-1, 0, 1, uMin, vMax,\n      ])\n\n      ctx.device.queue.writeBuffer(buffer, 0, data, 0, data.length)\n    },\n    [buffer, aspectFillRatio()],\n  )\n\n  return {\n    aspectFillRatio,\n    vertexSourceCount,\n    vertexSourceTotalBytes,\n    vertexSourceStrideBytes,\n    vertexSourceXYZWOffsetBytes,\n    vertexSourceUVOffsetBytes,\n    vertexSourceAsGPUBuffer: buffer,\n  }\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { Context, useUnit } from \"@gpu-fu/gpu-fu\"\nimport RenderUV from \"./RenderUV\"\nimport VertexSourceRect from \"./VertexSourceRect\"\n\nexport default function RenderTextureRect(ctx: Context) {\n  const { textureSource, vertexSource, renderTarget } = RenderUV(ctx)\n\n  const rect = useUnit(ctx, VertexSourceRect)\n  vertexSource.set(rect)\n\n  // TODO: Use the source texture and target texture aspect ratios\n  // instead of hard-coding a number here.\n  // This doesn't yet work on the latest version of chromium, because\n  // those chromium builds don't yet expose texture width and height.\n  rect.aspectFillRatio.set(850 / 1275)\n\n  return { textureSource, renderTarget }\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport {\n  Context,\n  MatrixSource,\n  VertexSource,\n  TextureSource,\n  autoLayout,\n  useProp,\n  useUnitProp,\n  useGPUResource,\n  useGPUAction,\n} from \"@gpu-fu/gpu-fu\"\n\nimport shaderModuleCode from \"./RenderUV.wgsl\"\n\nexport default function RenderUV(ctx: Context) {\n  const cameraSource = useUnitProp<MatrixSource>(ctx)\n  const vertexSource = useUnitProp<VertexSource>(ctx)\n  const textureSource = useUnitProp<TextureSource>(ctx)\n  const renderTarget = useProp<GPUTexture>(ctx)\n\n  const cameraSourceAsGPUBuffer = cameraSource()?.cameraSourceAsGPUBuffer\n  const textureSourceAsGPUTexture = textureSource()?.textureSourceAsGPUTexture\n\n  const shaderModule = useGPUResource(\n    ctx,\n    (ctx) =>\n      ctx.device.createShaderModule({\n        code: shaderModuleCode,\n      }),\n    [],\n  )\n\n  const renderPipeline = useGPUResource(\n    ctx,\n    (ctx) => {\n      const currentVertexSource = vertexSource()\n      if (!currentVertexSource) return\n\n      return ctx.device.createRenderPipeline({\n        vertex: {\n          module: shaderModule,\n          entryPoint: cameraSourceAsGPUBuffer\n            ? \"vertexRenderUVWithMatrix\"\n            : \"vertexRenderUV\",\n          buffers: [\n            {\n              arrayStride: currentVertexSource.vertexSourceStrideBytes,\n              attributes: [\n                {\n                  shaderLocation: 0,\n                  offset: currentVertexSource.vertexSourceXYZWOffsetBytes,\n                  format: \"float32x4\" as GPUVertexFormat,\n                },\n                {\n                  shaderLocation: 1,\n                  offset: currentVertexSource.vertexSourceUVOffsetBytes,\n                  format: \"float32x2\" as GPUVertexFormat,\n                },\n              ],\n            },\n          ],\n        },\n        fragment: {\n          module: shaderModule,\n          entryPoint: \"fragmentRenderUV\",\n          targets: [\n            {\n              // TODO: Remove this hard-coded value - get the real one somehow.\n              format: \"rgba8unorm\" as GPUTextureFormat,\n            },\n          ],\n        },\n        primitive: {\n          topology: \"triangle-list\",\n          // TODO: Configurable `cullMode`\n        },\n        depthStencil: {\n          depthWriteEnabled: true,\n          depthCompare: \"less\",\n          format: \"depth24plus\",\n        },\n        layout: autoLayout(),\n      })\n    },\n    [shaderModule, vertexSource()],\n  )\n\n  const sampler = useGPUResource(\n    ctx,\n    (ctx) =>\n      ctx.device.createSampler({\n        magFilter: \"linear\",\n        minFilter: \"linear\",\n      }),\n    [],\n  )\n\n  const bindGroup = useGPUResource(\n    ctx,\n    (ctx) => {\n      if (!renderPipeline) return\n      if (!textureSourceAsGPUTexture) return\n\n      const entries: GPUBindGroupEntry[] = [\n        {\n          binding: 1,\n          resource: sampler,\n        },\n        {\n          binding: 2,\n          resource: textureSourceAsGPUTexture.createView(),\n        },\n      ]\n      if (cameraSourceAsGPUBuffer)\n        entries.unshift({\n          binding: 0,\n          resource: { buffer: cameraSourceAsGPUBuffer },\n        })\n\n      return ctx.device.createBindGroup({\n        layout: renderPipeline.getBindGroupLayout(0),\n        entries,\n      })\n    },\n\n    [\n      renderPipeline,\n      cameraSourceAsGPUBuffer,\n      textureSourceAsGPUTexture,\n      sampler,\n    ],\n  )\n\n  const depthTexture = useGPUResource(\n    ctx,\n    (ctx) =>\n      ctx.device.createTexture({\n        size: [300, 300], // TODO: somehow get from canvas client size\n        format: \"depth24plus\",\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      }),\n    [],\n  )\n\n  useGPUAction(\n    ctx,\n    (ctx) => {\n      const currentVertexSource = vertexSource()\n      const currentRenderTarget = renderTarget()\n      if (!currentVertexSource) return\n      if (!currentRenderTarget) return\n      if (!renderPipeline) return\n      if (!bindGroup) return\n\n      const passEncoder = ctx.commandEncoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: currentRenderTarget.createView(),\n            clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n            loadOp: \"clear\" as GPULoadOp,\n            storeOp: \"store\" as GPUStoreOp,\n          },\n        ],\n        depthStencilAttachment: {\n          view: depthTexture.createView(),\n          depthClearValue: 1.0,\n          depthLoadOp: \"clear\" as GPULoadOp,\n          depthStoreOp: \"store\" as GPUStoreOp,\n        },\n      })\n      passEncoder.setPipeline(renderPipeline)\n      passEncoder.setVertexBuffer(\n        0,\n        currentVertexSource.vertexSourceAsGPUBuffer,\n      )\n      passEncoder.setBindGroup(0, bindGroup)\n      passEncoder.draw(currentVertexSource.vertexSourceCount, 1, 0, 0)\n      passEncoder.end()\n    },\n    [vertexSource(), renderTarget(), renderPipeline, bindGroup],\n  )\n\n  return {\n    cameraSource,\n    textureSource,\n    vertexSource,\n    renderTarget,\n  }\n}\n","export default \"@group(0) @binding(0) var<uniform> use_matrix: mat4x4<f32>;\\n@group(0) @binding(1) var use_sampler: sampler;\\n@group(0) @binding(2) var use_texture: texture_2d<f32>;\\n\\nstruct VertexOutput {\\n  @builtin(position) pos: vec4<f32>;\\n  @location(0) uv: vec2<f32>;\\n}\\n\\n@stage(vertex)\\nfn vertexRenderUV(\\n  @location(0) pos_in: vec4<f32>,\\n  @location(1) uv_in: vec2<f32>,\\n) ->\\n  VertexOutput\\n{\\n  var out: VertexOutput;\\n  out.pos = pos_in;\\n  out.uv = uv_in;\\n  return out;\\n}\\n\\n@stage(vertex)\\nfn vertexRenderUVWithMatrix(\\n  @location(0) pos_in: vec4<f32>,\\n  @location(1) uv_in: vec2<f32>,\\n) ->\\n  VertexOutput\\n{\\n  var out: VertexOutput;\\n  out.pos = use_matrix * pos_in;\\n  out.uv = uv_in;\\n  return out;\\n}\\n\\n@stage(fragment)\\nfn fragmentRenderUV(\\n  @location(0) uv_in : vec2<f32>\\n) ->\\n  @location(0) vec4<f32>\\n{\\n  return textureSample(use_texture, use_sampler, uv_in.xy);\\n}\\n\";","import { Context, useAsyncPropSetter, useProp } from \"@gpu-fu/gpu-fu\"\nimport TextureSourceBitmap from \"./TextureSourceBitmap\"\n\nexport default function TextureSourceBitmapFromURL(ctx: Context) {\n  const { imageBitmap, label, textureSourceAsGPUTexture } =\n    TextureSourceBitmap(ctx)\n\n  // Use the existing label property for a dual-purpose.\n  // We use it as the URL to fetch from (though this implies\n  // the assumption that the label will always be equal to the URL).\n  const url = label\n\n  useAsyncPropSetter(\n    ctx,\n    imageBitmap.set,\n    async (ctx) => {\n      const currentURL = url()\n      if (!currentURL) return\n      const img = document.createElement(\"img\")\n      img.src = currentURL\n      await img.decode()\n      const imageBitmap = await createImageBitmap(img)\n      return imageBitmap\n    },\n    [url()],\n  )\n\n  return {\n    url,\n    textureSourceAsGPUTexture,\n  }\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { Context, useProp, useGPUResource, useGPUAction } from \"@gpu-fu/gpu-fu\"\n\nexport default function TextureSourceBitmap(ctx: Context) {\n  const imageBitmap = useProp<ImageBitmap>(ctx)\n  const label = useProp<string>(ctx)\n\n  const textureWidth = imageBitmap()?.width ?? 16 // TODO: remove fallback values\n  const textureHeight = imageBitmap()?.height ?? 16 // TODO: remove fallback values\n\n  const texture = useGPUResource(\n    ctx,\n    (ctx) =>\n      ctx.device.createTexture({\n        label: label(),\n        size: [textureWidth, textureHeight, 1],\n        format: \"rgba8unorm\",\n        usage:\n          GPUTextureUsage.TEXTURE_BINDING |\n          GPUTextureUsage.COPY_DST |\n          GPUTextureUsage.RENDER_ATTACHMENT,\n      }),\n    [textureWidth, textureHeight, label()],\n  )\n\n  useGPUAction(\n    ctx,\n    (ctx) => {\n      const currentImageBitmap = imageBitmap()\n      if (!currentImageBitmap) return\n      if (!texture) return\n\n      ctx.device.queue.copyExternalImageToTexture(\n        { source: currentImageBitmap },\n        { texture: texture },\n        [currentImageBitmap.width, currentImageBitmap.height],\n      )\n    },\n    [imageBitmap(), texture],\n  )\n\n  return {\n    imageBitmap,\n    label,\n    textureSourceAsGPUTexture: texture,\n  }\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { UnitFn, createUnitRoot, Render } from \"@gpu-fu/gpu-fu\"\nimport { OutputCanvas } from \"@gpu-fu/incubator\"\n\ntype FrameFn = (commandEncoder: GPUCommandEncoder) => void\ntype SetupFn = (device: GPUDevice, canvasContext: GPUCanvasContext) => FrameFn\n\nexport default function runDemo(renderFn: UnitFn<Render>) {\n  runDemoInner((device, canvasContext) => {\n    const render = createUnitRoot(device, renderFn)\n\n    const output = new OutputCanvas(canvasContext)\n    output.addRender(render)\n\n    return function frame(commandEncoder) {\n      output.outputFrame(commandEncoder)\n    }\n  })\n}\n\nfunction runDemoInner(setupFn: SetupFn) {\n  ;(async () => {\n    const device = await getDevice()\n    const canvasContext = await getCanvasContext(getDemoCanvas(), device)\n\n    const frameFn = setupFn(device, canvasContext)\n\n    function repeatFrameWithContext() {\n      runFrameWithContext(device, frameFn)\n      requestAnimationFrame(repeatFrameWithContext)\n    }\n    requestAnimationFrame(repeatFrameWithContext)\n  })().catch((error) => {\n    document.querySelector(\"body\")!.innerHTML = error\n    console.error(error)\n  })\n}\n\nasync function getDevice(\n  powerPreference: GPUPowerPreference = \"high-performance\",\n): Promise<GPUDevice> {\n  if (!navigator.gpu)\n    throw new Error(\"Your browser doesn't have WebGPU enabled!\")\n\n  const gpu = await navigator.gpu.requestAdapter({ powerPreference })\n  if (!gpu) throw new Error(\"Failed to get the GPU adapter!\")\n\n  return gpu.requestDevice()\n}\n\nexport function getDemoCanvas(): HTMLCanvasElement {\n  const canvas = document.querySelector(\n    \"canvas.main\",\n  ) as HTMLCanvasElement | null\n  if (!canvas) throw new Error(\"The main canvas wasn't found in the HTML!\")\n\n  return canvas\n}\n\nasync function getCanvasContext(\n  canvas: HTMLCanvasElement,\n  device: GPUDevice,\n): Promise<GPUCanvasContext> {\n  const canvasContext = canvas.getContext(\"webgpu\") as GPUCanvasContext | null\n  if (!canvasContext) throw new Error(\"Failed to get a WebGPU canvas context!\")\n\n  canvasContext.configure({\n    device,\n    format: getPreferredCanvasFormat(),\n    alphaMode: \"opaque\",\n  })\n\n  return canvasContext\n}\n\nfunction getPreferredCanvasFormat() {\n  // Some browsers throw an \"Illegal invocation\" error if we don't bind.\n  const getPreferredCanvasFormat =\n    navigator.gpu?.getPreferredCanvasFormat?.bind(navigator.gpu)\n  if (getPreferredCanvasFormat) return getPreferredCanvasFormat()\n\n  // Hard-coded default for browsers that don't implement this function yet.\n  return \"rgba8unorm\"\n}\n\nfunction runFrameWithContext(device: GPUDevice, frameFn: FrameFn) {\n  const commandEncoder = device.createCommandEncoder()\n  frameFn(commandEncoder)\n  device.queue.submit([commandEncoder.finish()])\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { useUnit } from \"@gpu-fu/gpu-fu\"\nimport {\n  RenderTextureRect,\n  TextureSourceBitmapFromURL,\n} from \"@gpu-fu/incubator\"\n\nimport runDemo from \"./runDemo\"\nrunDemo((ctx) => {\n  const textureSource = useUnit(ctx, TextureSourceBitmapFromURL)\n  textureSource.url.set(\"./assets/fireweed.jpg\")\n\n  const { renderTarget, ...render } = useUnit(ctx, RenderTextureRect)\n  render.textureSource.set(textureSource)\n\n  return { renderTarget }\n})\n"],"names":["root","factory","exports","module","define","amd","self","this","Symbol","toStringTag","Object","defineProperty","value","unitFn","device","_store","_storeIndex","_storeUnits","_storeUnitsIndex","_storeGPUActions","_storeGPUActionsIndex","_needsUnitReRun","_unitFn","_nextStoreIndex","storeIndex","_nextStoreUnitsIndex","storeUnitsIndex","_nextStoreGPUActionsIndex","storeGPUActionsIndex","runUnitIfNeeded","currentUnit","otherUnitsRan","forEach","unitProp","unit","_ctx","assign","runGPUActionsIfNeeded","commandEncoder","index","action","undefined","_useProp","initialValue","existing","ctx","prop","set","newValue","change","fn","mutate","_useUnitProp","_useGPUResource","create","deps","every","dep","newResource","oldResource","destroy","_useGPUAction","_useEffect","effect","cancelFn","useUnit","ContextImplementation","canvasContext","_renders","_canvasContext","addRender","render","includes","push","outputFrame","target","getCurrentTexture","renderTarget","runFrame","VertexSourceRect","aspectFillRatio","buffer","createBuffer","size","usage","GPUBufferUsage","VERTEX","COPY_DST","currentAspectFillRatio","uMin","uMax","vMin","vMax","data","Float32Array","queue","writeBuffer","length","vertexSourceCount","vertexSourceTotalBytes","vertexSourceStrideBytes","vertexSourceXYZWOffsetBytes","vertexSourceUVOffsetBytes","vertexSourceAsGPUBuffer","RenderTextureRect","cameraSource","vertexSource","textureSource","cameraSourceAsGPUBuffer","textureSourceAsGPUTexture","shaderModule","createShaderModule","code","renderPipeline","currentVertexSource","createRenderPipeline","vertex","entryPoint","buffers","arrayStride","attributes","shaderLocation","offset","format","fragment","targets","primitive","topology","depthStencil","depthWriteEnabled","depthCompare","layout","sampler","createSampler","magFilter","minFilter","bindGroup","entries","binding","resource","createView","unshift","createBindGroup","getBindGroupLayout","depthTexture","createTexture","GPUTextureUsage","RENDER_ATTACHMENT","currentRenderTarget","passEncoder","beginRenderPass","colorAttachments","view","clearValue","r","g","b","a","loadOp","storeOp","depthStencilAttachment","depthClearValue","depthLoadOp","depthStoreOp","setPipeline","setVertexBuffer","setBindGroup","draw","end","rect","TextureSourceBitmapFromURL","imageBitmap","label","textureWidth","width","textureHeight","height","texture","TEXTURE_BINDING","currentImageBitmap","copyExternalImageToTexture","source","TextureSourceBitmap","url","setPropFn","cancelled","currentURL","img","document","createElement","src","decode","createImageBitmap","then","error","console","useAsyncPropSetter","getDevice","powerPreference","navigator","gpu","Error","requestAdapter","requestDevice","getDemoCanvas","canvas","querySelector","getCanvasContext","getContext","configure","getPreferredCanvasFormat","alphaMode","bind","renderFn","setupFn","repeatFrameWithContext","frameFn","createCommandEncoder","submit","finish","runFrameWithContext","requestAnimationFrame","unitRoot","unitFrame","createUnitRoot","output","innerHTML","runDemoInner"],"sourceRoot":""}