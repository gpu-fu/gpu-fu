{"version":3,"file":"demo2.js","mappings":"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","sources":["webpack://beta/webpack/universalModuleDefinition","webpack://beta/webpack/bootstrap","webpack://beta/../gpu-fu/src/hooks.ts","webpack://beta/webpack/runtime/make namespace object","webpack://beta/../incubator/src/OutputCanvas.ts","webpack://beta/../incubator/src/VertexSourceRect.ts","webpack://beta/../incubator/src/RenderTextureRect.ts","webpack://beta/../incubator/src/RenderUV.ts","webpack://beta/../incubator/src/RenderUV.wgsl","webpack://beta/../incubator/src/TextureSourceBitmapFromURL.ts","webpack://beta/../incubator/src/TextureSourceBitmap.ts","webpack://beta/../gpu-fu/src/Property.ts","webpack://beta/../gpu-fu/src/Derived.ts","webpack://beta/../gpu-fu/src/Operation.ts","webpack://beta/../gpu-fu/src/Effect.ts","webpack://beta/../gpu-fu/src/Context.ts","webpack://beta/./src/runDemo.ts","webpack://beta/./src/demo2.ts","webpack://beta/../gpu-fu/src/Unit.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"beta\"] = factory();\n\telse\n\t\troot[\"beta\"] = factory();\n})(typeof self !== 'undefined' ? self : this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","import {\n  Context,\n  ContextForGPUResource,\n  ContextForGPUAction,\n  MaybeDestroyableGPUResource,\n  ContextEmpty,\n  ContextImplementation,\n} from \"./Context\"\nimport { Unit, UnitFn } from \"./Unit\"\nimport { Property, PropertyImplementation, PropertyReadOnly } from \"./Property\"\n\nexport function useProp<T>(ctx: Context): Property<T | undefined> {\n  return ctx._useProp<T | undefined>(undefined) as Property<T | undefined>\n}\n\nexport function useInitializedProp<T>(\n  ctx: Context,\n  initialValue: (() => T) | T,\n): Property<T> {\n  return ctx._useProp<T>(initialValue)\n}\n\nexport function useUnit<U>(ctx: Context, unitFn: UnitFn<U>): Unit<U> {\n  const unitProp = ctx._useProp<Unit<U>>(() => ({\n    ...unitFn(ctx),\n    _ctx: ctx as ContextImplementation,\n  }))\n\n  return (unitProp as PropertyImplementation<Unit<U>>)._current\n}\n\nexport function useGPUResource<T extends MaybeDestroyableGPUResource>(\n  ctx: Context,\n  create: (ctx: ContextForGPUResource) => T,\n): PropertyReadOnly<T> {\n  return ctx._useGPUResource<T>(create)\n}\n\nexport function useGPUUpdate(\n  producedProps: PropertyReadOnly<unknown>[],\n  ctx: Context,\n  action: (ctx: ContextForGPUAction) => void,\n): void {\n  ctx._useGPUUpdate(producedProps, action)\n}\n\nexport function useEffect(\n  ctx: Context,\n  effect: (ctx: ContextEmpty) => (() => void) | undefined,\n) {\n  return ctx._useEffect(effect)\n}\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/// <reference types=\"@webgpu/types\" />\n\nimport { Render, UnitRoot } from \"@gpu-fu/gpu-fu\"\n\nexport default class OutputCanvas {\n  _canvasContext: GPUCanvasContext\n  _renders: UnitRoot<Render>[] = []\n\n  constructor(canvasContext: GPUCanvasContext) {\n    this._canvasContext = canvasContext\n  }\n\n  addRender(render: UnitRoot<Render>) {\n    if (this._renders.includes(render)) return\n    this._renders.push(render)\n  }\n\n  outputFrame(commandEncoder: GPUCommandEncoder) {\n    const target = this._canvasContext.getCurrentTexture()\n    this._renders.forEach((render) => {\n      render.renderTarget.setAndNotify(target)\n      render.runFrame(commandEncoder, [render.renderTarget])\n    })\n  }\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { Context, useProp, useGPUUpdate, useGPUResource } from \"@gpu-fu/gpu-fu\"\n\nconst vertexSourceCount = 6\nconst vertexSourceTotalBytes = 6 * 6 * 4\nconst vertexSourceStrideBytes = 6 * 4\nconst vertexSourceXYZWOffsetBytes = 0\nconst vertexSourceUVOffsetBytes = 4 * 4\n\nexport default function VertexSourceRect(ctx: Context) {\n  const aspectFillRatio = useProp<number>(ctx)\n\n  const buffer = useGPUResource(ctx, (ctx) =>\n    ctx.device.createBuffer({\n      size: vertexSourceTotalBytes,\n      usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\n    }),\n  )\n\n  useGPUUpdate([buffer], ctx, (ctx) => {\n    if (!buffer.current) return\n\n    var uMin = 0\n    var uMax = 1\n    var vMin = 0\n    var vMax = 1\n\n    if (aspectFillRatio.current) {\n      if (aspectFillRatio.current < 1) {\n        vMin = 0.5 - 0.5 * aspectFillRatio.current\n        vMax = 1 - vMin\n      } else {\n        uMin = 0.5 - 0.5 / aspectFillRatio.current\n        uMax = 1 - uMin\n      }\n    }\n\n    // prettier-ignore\n    const data = new Float32Array([\n      // (x, y, z, w),  (u, v)\n          1, 1, 0, 1, uMax, vMin,\n         -1,-1, 0, 1, uMin, vMax,\n         -1, 1, 0, 1, uMin, vMin,\n          1, 1, 0, 1, uMax, vMin,\n          1,-1, 0, 1, uMax, vMax,\n         -1,-1, 0, 1, uMin, vMax,\n      ])\n\n    ctx.device.queue.writeBuffer(buffer.current, 0, data, 0, data.length)\n  })\n\n  return {\n    aspectFillRatio,\n    vertexSourceCount,\n    vertexSourceTotalBytes,\n    vertexSourceStrideBytes,\n    vertexSourceXYZWOffsetBytes,\n    vertexSourceUVOffsetBytes,\n    vertexSourceAsGPUBuffer: buffer,\n  }\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { Context, useUnit } from \"@gpu-fu/gpu-fu\"\nimport RenderUV from \"./RenderUV\"\nimport VertexSourceRect from \"./VertexSourceRect\"\n\nexport default function RenderTextureRect(ctx: Context) {\n  const { textureSource, vertexSource, renderTarget } = RenderUV(ctx)\n\n  const rect = useUnit(ctx, VertexSourceRect)\n  vertexSource.set(rect)\n\n  // TODO: Use the source texture and target texture aspect ratios\n  // instead of hard-coding a number here.\n  // This doesn't yet work on the latest version of chromium, because\n  // those chromium builds don't yet expose texture width and height.\n  rect.aspectFillRatio.set(850 / 1275)\n\n  return { textureSource, renderTarget }\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport {\n  Context,\n  Unit,\n  MatrixSource,\n  VertexSource,\n  TextureSource,\n  useProp,\n  useGPUResource,\n  useGPUUpdate,\n} from \"@gpu-fu/gpu-fu\"\n\nimport shaderModuleCode from \"./RenderUV.wgsl\"\n\nexport default function RenderUV(ctx: Context) {\n  const cameraSource = useProp<Unit<MatrixSource>>(ctx)\n  const vertexSource = useProp<Unit<VertexSource>>(ctx)\n  const textureSource = useProp<Unit<TextureSource>>(ctx)\n  const renderTarget = useProp<GPUTexture>(ctx)\n\n  const shaderModule = useGPUResource(ctx, (ctx) =>\n    ctx.device.createShaderModule({\n      code: shaderModuleCode,\n    }),\n  )\n\n  const renderPipeline = useGPUResource(ctx, (ctx) => {\n    if (!vertexSource.current) return\n\n    return ctx.device.createRenderPipeline({\n      layout: \"auto\",\n      primitive: {\n        topology: \"triangle-list\",\n        // TODO: Configurable `cullMode`\n      },\n      vertex: {\n        module: shaderModule.current,\n        entryPoint: cameraSource.current?.cameraSourceAsGPUBuffer\n          ? \"vertexRenderUVWithMatrix\"\n          : \"vertexRenderUV\",\n        buffers: [\n          {\n            arrayStride: vertexSource.current.vertexSourceStrideBytes,\n            attributes: [\n              {\n                shaderLocation: 0,\n                offset: vertexSource.current.vertexSourceXYZWOffsetBytes,\n                format: \"float32x4\" as GPUVertexFormat,\n              },\n              {\n                shaderLocation: 1,\n                offset: vertexSource.current.vertexSourceUVOffsetBytes,\n                format: \"float32x2\" as GPUVertexFormat,\n              },\n            ],\n          },\n        ],\n      },\n      fragment: {\n        module: shaderModule.current,\n        entryPoint: \"fragmentRenderUV\",\n        targets: [\n          {\n            // TODO: Remove this hard-coded value - get the real one somehow.\n            format: \"rgba8unorm\" as GPUTextureFormat,\n          },\n        ],\n      },\n      depthStencil: {\n        depthWriteEnabled: true,\n        depthCompare: \"less\",\n        format: \"depth24plus\",\n      },\n    })\n  })\n\n  const sampler = useGPUResource(ctx, (ctx) =>\n    ctx.device.createSampler({\n      magFilter: \"linear\",\n      minFilter: \"linear\",\n    }),\n  )\n\n  const bindGroup = useGPUResource(ctx, (ctx) => {\n    if (!renderPipeline.current) return\n    if (!textureSource.current?.textureSourceAsGPUTexture.current) return\n\n    const entries: GPUBindGroupEntry[] = [\n      {\n        binding: 1,\n        resource: sampler.current,\n      },\n      {\n        binding: 2,\n        resource:\n          textureSource.current?.textureSourceAsGPUTexture.current.createView(),\n      },\n    ]\n    if (cameraSource.current?.cameraSourceAsGPUBuffer)\n      entries.unshift({\n        binding: 0,\n        resource: {\n          buffer: cameraSource.current?.cameraSourceAsGPUBuffer.current,\n        },\n      })\n\n    return ctx.device.createBindGroup({\n      layout: renderPipeline.current.getBindGroupLayout(0),\n      entries,\n    })\n  })\n\n  const depthTexture = useGPUResource(ctx, (ctx) =>\n    ctx.device.createTexture({\n      size: [300, 300], // TODO: somehow get from canvas client size\n      format: \"depth24plus\",\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n    }),\n  )\n\n  useGPUUpdate([renderTarget], ctx, (ctx) => {\n    // TODO: Remove the need for the following lines here:\n    cameraSource.current?.cameraSourceAsGPUBuffer.current\n    textureSource.current?.textureSourceAsGPUTexture.current\n\n    if (!vertexSource.current) return\n    if (!renderTarget.current) return\n    if (!renderPipeline.current) return\n    if (!bindGroup.current) return\n\n    const passEncoder = ctx.commandEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTarget.current.createView(),\n          clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n          loadOp: \"clear\" as GPULoadOp,\n          storeOp: \"store\" as GPUStoreOp,\n        },\n      ],\n      depthStencilAttachment: {\n        view: depthTexture.current.createView(),\n        depthClearValue: 1.0,\n        depthLoadOp: \"clear\" as GPULoadOp,\n        depthStoreOp: \"store\" as GPUStoreOp,\n      },\n    })\n    passEncoder.setPipeline(renderPipeline.current)\n    passEncoder.setVertexBuffer(\n      0,\n      vertexSource.current.vertexSourceAsGPUBuffer.current,\n    )\n    passEncoder.setBindGroup(0, bindGroup.current)\n    passEncoder.draw(vertexSource.current.vertexSourceCount, 1, 0, 0)\n    passEncoder.end()\n  })\n\n  return {\n    cameraSource,\n    textureSource,\n    vertexSource,\n    renderTarget,\n  }\n}\n","export default \"@group(0) @binding(0) var<uniform> use_matrix: mat4x4<f32>;\\n@group(0) @binding(1) var use_sampler: sampler;\\n@group(0) @binding(2) var use_texture: texture_2d<f32>;\\n\\nstruct VertexOutput {\\n  @builtin(position) pos: vec4<f32>,\\n  @location(0) uv: vec2<f32>,\\n}\\n\\n@stage(vertex)\\nfn vertexRenderUV(\\n  @location(0) pos_in: vec4<f32>,\\n  @location(1) uv_in: vec2<f32>,\\n) ->\\n  VertexOutput\\n{\\n  var out: VertexOutput;\\n  out.pos = pos_in;\\n  out.uv = uv_in;\\n  return out;\\n}\\n\\n@stage(vertex)\\nfn vertexRenderUVWithMatrix(\\n  @location(0) pos_in: vec4<f32>,\\n  @location(1) uv_in: vec2<f32>,\\n) ->\\n  VertexOutput\\n{\\n  var out: VertexOutput;\\n  out.pos = use_matrix * pos_in;\\n  out.uv = uv_in;\\n  return out;\\n}\\n\\n@stage(fragment)\\nfn fragmentRenderUV(\\n  @location(0) uv_in : vec2<f32>\\n) ->\\n  @location(0) vec4<f32>\\n{\\n  return textureSample(use_texture, use_sampler, uv_in.xy);\\n}\\n\";","import { Context, useEffect } from \"@gpu-fu/gpu-fu\"\nimport TextureSourceBitmap from \"./TextureSourceBitmap\"\n\nexport default function TextureSourceBitmapFromURL(ctx: Context) {\n  const { imageBitmap, label, textureSourceAsGPUTexture } =\n    TextureSourceBitmap(ctx)\n\n  // Use the existing label property for a dual-purpose.\n  // We use it as the URL to fetch from (though this implies\n  // the assumption that the label will always be equal to the URL).\n  const url = label\n\n  useEffect(ctx, (ctx) => {\n    const currentURL = url.current\n    console.log({ currentURL })\n    if (!currentURL) return () => {}\n\n    var cancelled = false\n\n    const img = document.createElement(\"img\")\n    img.src = currentURL\n\n    img\n      .decode()\n      .then(() => (cancelled ? undefined : createImageBitmap(img)))\n      .then((newImageBitmap) => {\n        if (!cancelled && newImageBitmap) imageBitmap.set(newImageBitmap)\n      })\n      .catch(console.error)\n\n    return () => {\n      cancelled = true\n    }\n  })\n\n  return {\n    url,\n    textureSourceAsGPUTexture,\n  }\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { Context, useProp, useGPUResource, useGPUUpdate } from \"@gpu-fu/gpu-fu\"\n\nexport default function TextureSourceBitmap(ctx: Context) {\n  const imageBitmap = useProp<ImageBitmap>(ctx)\n  const label = useProp<string>(ctx)\n\n  const texture = useGPUResource(ctx, (ctx) => {\n    if (!imageBitmap.current) return\n\n    return ctx.device.createTexture({\n      label: label.current,\n      size: [imageBitmap.current.width, imageBitmap.current.height, 1],\n      format: \"rgba8unorm\",\n      usage:\n        GPUTextureUsage.TEXTURE_BINDING |\n        GPUTextureUsage.COPY_DST |\n        GPUTextureUsage.RENDER_ATTACHMENT,\n    })\n  })\n\n  useGPUUpdate([texture], ctx, (ctx) => {\n    if (!imageBitmap.current) return\n    if (!texture.current) return\n\n    ctx.device.queue.copyExternalImageToTexture(\n      { source: imageBitmap.current },\n      { texture: texture.current },\n      [imageBitmap.current.width, imageBitmap.current.height],\n    )\n  })\n\n  return {\n    imageBitmap,\n    label,\n    textureSourceAsGPUTexture: texture,\n  }\n}\n","import { ContextImplementation } from \"./Context\"\nimport { Operation } from \"./Operation\"\n\nexport type Property<T> = Pick<\n  PropertyImplementation<T>,\n  | \"current\"\n  | \"getNonReactively\"\n  | \"readOnly\"\n  | \"set\"\n  | \"setAndNotify\"\n  | \"change\"\n  | \"mutate\"\n  | \"_runIfNeededAt\"\n  | \"_produceIfNeededAt\"\n  | \"_attachProducerOperation\"\n>\n\nexport type PropertyReadOnly<T> = Pick<\n  PropertyImplementation<T>,\n  | \"current\"\n  | \"getNonReactively\"\n  | \"_runIfNeededAt\"\n  | \"_produceIfNeededAt\"\n  | \"_attachProducerOperation\"\n>\n\nexport class PropertyImplementation<T> implements Property<T> {\n  private _ctx: ContextImplementation\n  _current: T // TODO: private\n  private _next: T\n  private _changeAtNextTick = false\n  private _changedClockNumber = 0\n  private _producedClockNumber = 0\n  private _producerOperations: Operation[] = []\n\n  constructor(initialValue: T, ctx: ContextImplementation) {\n    this._current = initialValue\n    this._next = initialValue\n    this._ctx = ctx\n  }\n\n  _attachProducerOperation(op: Operation): void {\n    this._producerOperations.push(op)\n  }\n\n  _runIfNeededAt(clockNumber: number): boolean {\n    if (!this._changeAtNextTick) return this._changedClockNumber >= clockNumber\n\n    this._current = this._next\n    this._changeAtNextTick = false\n    this._changedClockNumber = clockNumber\n\n    return true\n  }\n\n  _produceIfNeededAt(clockNumber: number) {\n    if (this._producedClockNumber >= clockNumber) return\n\n    this._producerOperations.forEach((op) => op._produceIfNeededAt(clockNumber))\n    this._producedClockNumber = clockNumber\n  }\n\n  // Get the current value of the property.\n  //\n  // This can only be accessed from within a reactive context,\n  // since it implies that you want to track the property as a dependency\n  // dependency that will cause the reactive context to be called again.\n  // To get the current value non-reactively, call `getNonReactively` instead.\n  get current(): T {\n    const currentAction = this._ctx._currentAction\n    if (!currentAction)\n      throw new Error(\n        \"It's only possible to read properties from within a reactive context\",\n      )\n    currentAction._attachDependency(this)\n\n    return this._current\n  }\n\n  // Get the current value of the property without dependency tracking.\n  // Unlike the `current` getter, this can be called anywhere,\n  // both in contexts which are reactive and non-reactive.\n  // But if called in a reactive context, there is no dependency link created.\n  getNonReactively(): T {\n    return this._current\n  }\n\n  // Get a version of this property accessor that can only read (in TypeScript).\n  get readOnly(): PropertyReadOnly<T> {\n    return this\n  }\n\n  // Assign a new value to the property, notifying any reactive effects if\n  // (and only if) the new value is not referentially identical to the old one.\n  //\n  // Use `setAndNotify` instead if you want to unconditionally notify all\n  // downstream reactive effects even if the new value is the same.\n  set(newValue: T) {\n    if (this._current !== newValue) this.setAndNotify(newValue)\n  }\n\n  // Assign a new value to the property, notifying all reactive effects,\n  // regardless of whether the new value is referentially identical to the old.\n  //\n  // Usually you want to use `set` instead, which checks referential identity.\n  setAndNotify(newValue: T) {\n    this._next = newValue\n    this.notify()\n  }\n\n  // Use a function to change the value of the property based on the current\n  // value (which will be passed as the argument to the function).\n  //\n  // All reactive effects will be notified if (and only if) the new value\n  // produced by the function is not referentially identical to the old value.\n  //\n  // Use `mutate` instead if the value is an object type that you want to mutate\n  // to change it and trigger reactive effects without actually having to\n  // produce a new referentially new object for the new value.\n  change(fn: (currentValue: T) => T) {\n    this.set(fn(this._current))\n  }\n\n  // Use a function to mutate the current value of the property,\n  // without changing its referential identity.\n  //\n  // All reactive effects will be notified regardless of what the function does.\n  mutate(fn: (currentValue: T) => unknown) {\n    fn(this._current)\n    this.notify() // assume mutation always happens\n  }\n\n  private notify() {\n    this._changeAtNextTick = true\n  }\n}\n","import { ContextImplementation } from \"./Context\"\nimport { Operation } from \"./Operation\"\nimport { PropertyReadOnly } from \"./Property\"\n\nexport type Derived<T> = PropertyReadOnly<T>\n\nexport class DerivedImplementation<T> implements Derived<T> {\n  _ctx: ContextImplementation\n  _fn: (ctx: unknown) => T\n  _deps = new Set<PropertyReadOnly<unknown>>()\n  _cachedResult?: T\n  _cachedClockNumber: number = 0\n  _producedClockNumber = 0\n  _producerOperations: Operation[] = []\n\n  constructor(ctx: ContextImplementation, fn: (ctx: unknown) => T) {\n    this._ctx = ctx\n    this._fn = fn\n  }\n\n  _attachDependency(dep: PropertyReadOnly<unknown>): void {\n    this._deps.add(dep)\n  }\n\n  _attachProducerOperation(op: Operation): void {\n    this._producerOperations.push(op)\n  }\n\n  _runIfNeededAt(clockNumber: number): boolean {\n    if (this._cachedClockNumber >= clockNumber) return true\n\n    var depsChanged = false\n    this._deps.forEach((dep) => {\n      if (dep._runIfNeededAt(clockNumber)) depsChanged = true\n    })\n    if (!depsChanged && this._cachedClockNumber > 0) return false\n\n    const outerAction = this._ctx._currentAction\n    this._ctx._currentAction = this\n\n    // Run the destroy method of the previous result to clean up if applicable.\n    const previousResult = this._cachedResult\n    if (\n      typeof previousResult === \"object\" &&\n      \"destroy\" in previousResult &&\n      typeof (previousResult as any).destroy === \"function\"\n    ) {\n      ;(previousResult as any).destroy()\n    }\n\n    this._cachedResult = this._fn(this._ctx)\n    this._cachedClockNumber = clockNumber\n\n    this._ctx._currentAction = outerAction\n\n    return true\n  }\n\n  _produceIfNeededAt(clockNumber: number) {\n    if (this._producedClockNumber >= clockNumber) return\n\n    this._producerOperations.forEach((op) => op._produceIfNeededAt(clockNumber))\n    this._producedClockNumber = clockNumber\n  }\n\n  get current(): T {\n    const currentDerived = this._ctx._currentAction\n    if (!currentDerived)\n      throw new Error(\n        \"It's only possible to read properties from within a reactive context\",\n      )\n    currentDerived._attachDependency(this)\n\n    this._runIfNeededAt(this._ctx._currentClockNumber)\n\n    return this._cachedResult as T\n  }\n\n  getNonReactively(): T {\n    return this._cachedResult as T\n  }\n}\n","import { ContextImplementation } from \"./Context\"\nimport { PropertyReadOnly } from \"./Property\"\n\nexport type Operation = Pick<\n  OperationImplementation,\n  \"_produceIfNeededAt\" | \"_attachDependency\"\n>\n\nexport class OperationImplementation implements Operation {\n  _ctx: ContextImplementation\n  _fn: (ctx: unknown) => void\n  _deps = new Set<PropertyReadOnly<unknown>>()\n  _producedClockNumber: number = 0\n\n  constructor(ctx: ContextImplementation, fn: (ctx: unknown) => void) {\n    this._ctx = ctx\n    this._fn = fn\n  }\n\n  _attachDependency(dep: PropertyReadOnly<unknown>): void {\n    this._deps.add(dep)\n  }\n\n  _produceIfNeededAt(clockNumber: number) {\n    if (this._producedClockNumber >= clockNumber) return\n    this._producedClockNumber = clockNumber\n\n    this._deps.forEach((op) => op._runIfNeededAt(clockNumber))\n    this._deps.forEach((op) => op._produceIfNeededAt(clockNumber))\n\n    const outerAction = this._ctx._currentAction\n    this._ctx._currentAction = this\n\n    this._fn(this._ctx)\n\n    this._ctx._currentAction = outerAction\n  }\n}\n","import { ContextImplementation } from \"./Context\"\nimport { PropertyReadOnly } from \"./Property\"\n\nexport type Effect = Pick<\n  EffectImplementation,\n  \"_attachDependency\" | \"_runIfNeededAt\"\n>\n\nexport class EffectImplementation implements Effect {\n  _ctx: ContextImplementation\n  _fn: (ctx: unknown) => (() => {}) | undefined\n  _deps = new Set<PropertyReadOnly<unknown>>()\n  _lastCancelFn?: () => {}\n  _lastClockNumber = 0\n\n  constructor(\n    ctx: ContextImplementation,\n    fn: (ctx: unknown) => (() => {}) | undefined,\n  ) {\n    this._ctx = ctx\n    this._fn = fn\n  }\n\n  _attachDependency(dep: PropertyReadOnly<unknown>): void {\n    this._deps.add(dep)\n  }\n\n  _runIfNeededAt(clockNumber: number) {\n    if (this._lastClockNumber >= clockNumber) return true\n\n    var depsChanged = false\n    this._deps.forEach((dep) => {\n      if (dep._runIfNeededAt(clockNumber)) depsChanged = true\n    })\n    if (!depsChanged && this._lastClockNumber > 0) return false\n\n    const lastCancelFn = this._lastCancelFn\n    if (lastCancelFn) lastCancelFn()\n\n    const outerAction = this._ctx._currentAction\n    this._ctx._currentAction = this\n\n    this._lastCancelFn = this._fn(this._ctx)\n\n    this._ctx._currentAction = outerAction\n    this._lastClockNumber = clockNumber\n  }\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { Unit } from \"./Unit\"\nimport { Property, PropertyImplementation, PropertyReadOnly } from \"./Property\"\nimport { Derived, DerivedImplementation } from \"./Derived\"\nimport { OperationImplementation } from \"./Operation\"\nimport { EffectImplementation } from \"./Effect\"\nimport { Effect } from \"./Effect\"\n\nexport type MaybeDestroyableGPUResource =\n  | undefined\n  | 0\n  | false\n  | null\n  | (GPUObjectBase & { destroy?: () => void })\n\ntype AttachDependency = Pick<\n  DerivedImplementation<unknown>,\n  \"_attachDependency\"\n>\n\nexport class ContextImplementation {\n  _currentAction?: AttachDependency\n  _currentClockNumber: number = 1\n\n  _effects: Effect[] = []\n\n  _device: GPUDevice\n  _commandEncoder?: GPUCommandEncoder\n\n  constructor(device: GPUDevice) {\n    this._device = device\n  }\n\n  get commandEncoder(): GPUCommandEncoder | undefined {\n    return this._commandEncoder\n  }\n\n  get device(): GPUDevice {\n    return this._device\n  }\n\n  _useProp<T>(initialValue: (() => T) | T): Property<T> {\n    return new PropertyImplementation<T>(\n      typeof initialValue === \"function\"\n        ? (initialValue as () => T)()\n        : initialValue,\n      this,\n    )\n  }\n\n  _useGPUResource<T extends MaybeDestroyableGPUResource>(\n    fn: (ctx: ContextForGPUResource) => T,\n  ): Derived<T> {\n    return new DerivedImplementation<T>(this, fn as any)\n  }\n\n  _useGPUUpdate(\n    producedProps: PropertyReadOnly<unknown>[],\n    fn: (ctx: ContextForGPUAction) => void,\n  ) {\n    const op = new OperationImplementation(this, fn as any)\n\n    producedProps.forEach((prop) => prop._attachProducerOperation(op))\n  }\n\n  _useEffect(fn: (ctx: ContextEmpty) => (() => void) | undefined) {\n    this._effects.push(new EffectImplementation(this, fn as any))\n  }\n}\n\nexport type Context = Pick<\n  ContextImplementation,\n  // In the main function context, hooks are available.\n  \"device\" | \"_useProp\" | \"_useGPUResource\" | \"_useGPUUpdate\" | \"_useEffect\"\n>\n\nexport type ContextForGPUResource = Pick<\n  ContextImplementation,\n  // No hooks are available.\n  \"device\"\n>\n\nexport type ContextForGPUAction = Pick<\n  ContextImplementation,\n  // No hooks are available, but a command encoder is available.\n  \"device\"\n> & { commandEncoder: GPUCommandEncoder }\n\nexport type ContextEmpty = {}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { UnitFn, createUnitRoot, Render } from \"@gpu-fu/gpu-fu\"\nimport { OutputCanvas } from \"@gpu-fu/incubator\"\n\ntype FrameFn = (commandEncoder: GPUCommandEncoder) => void\ntype SetupFn = (device: GPUDevice, canvasContext: GPUCanvasContext) => FrameFn\n\nexport default function runDemo(renderFn: UnitFn<Render>) {\n  runDemoInner((device, canvasContext) => {\n    const render = createUnitRoot(device, renderFn)\n\n    const output = new OutputCanvas(canvasContext)\n    output.addRender(render)\n\n    return function frame(commandEncoder) {\n      output.outputFrame(commandEncoder)\n    }\n  })\n}\n\nfunction runDemoInner(setupFn: SetupFn) {\n  ;(async () => {\n    const device = await getDevice()\n    const canvasContext = await getCanvasContext(getDemoCanvas(), device)\n\n    const frameFn = setupFn(device, canvasContext)\n\n    function repeatFrameWithContext() {\n      runFrameWithContext(device, frameFn)\n      requestAnimationFrame(repeatFrameWithContext)\n    }\n    requestAnimationFrame(repeatFrameWithContext)\n  })().catch((error) => {\n    document.querySelector(\"body\")!.innerHTML = error\n    console.error(error)\n  })\n}\n\nasync function getDevice(\n  powerPreference: GPUPowerPreference = \"high-performance\",\n): Promise<GPUDevice> {\n  if (!navigator.gpu)\n    throw new Error(\"Your browser doesn't have WebGPU enabled!\")\n\n  const gpu = await navigator.gpu.requestAdapter({ powerPreference })\n  if (!gpu) throw new Error(\"Failed to get the GPU adapter!\")\n\n  return gpu.requestDevice()\n}\n\nexport function getDemoCanvas(): HTMLCanvasElement {\n  const canvas = document.querySelector(\n    \"canvas.main\",\n  ) as HTMLCanvasElement | null\n  if (!canvas) throw new Error(\"The main canvas wasn't found in the HTML!\")\n\n  return canvas\n}\n\nasync function getCanvasContext(\n  canvas: HTMLCanvasElement,\n  device: GPUDevice,\n): Promise<GPUCanvasContext> {\n  const canvasContext = canvas.getContext(\"webgpu\") as GPUCanvasContext | null\n  if (!canvasContext) throw new Error(\"Failed to get a WebGPU canvas context!\")\n\n  canvasContext.configure({\n    device,\n    format: getPreferredCanvasFormat(),\n    alphaMode: \"opaque\",\n    compositingAlphaMode: \"opaque\",\n  })\n\n  return canvasContext\n}\n\nfunction getPreferredCanvasFormat() {\n  // Some browsers throw an \"Illegal invocation\" error if we don't bind.\n  const getPreferredCanvasFormat =\n    navigator.gpu?.getPreferredCanvasFormat?.bind(navigator.gpu)\n  if (getPreferredCanvasFormat) return getPreferredCanvasFormat()\n\n  // Hard-coded default for browsers that don't implement this function yet.\n  return \"rgba8unorm\"\n}\n\nfunction runFrameWithContext(device: GPUDevice, frameFn: FrameFn) {\n  const commandEncoder = device.createCommandEncoder()\n  frameFn(commandEncoder)\n  device.queue.submit([commandEncoder.finish()])\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { useUnit } from \"@gpu-fu/gpu-fu\"\nimport {\n  RenderTextureRect,\n  TextureSourceBitmapFromURL,\n} from \"@gpu-fu/incubator\"\n\nimport runDemo from \"./runDemo\"\nrunDemo((ctx) => {\n  const textureSource = useUnit(ctx, TextureSourceBitmapFromURL)\n  textureSource.url.set(\"./assets/fireweed.jpg\")\n\n  const { renderTarget, ...render } = useUnit(ctx, RenderTextureRect)\n  render.textureSource.set(textureSource)\n\n  return { renderTarget }\n})\n","import { Context, ContextImplementation } from \"./Context\"\nimport { PropertyReadOnly } from \"./Property\"\n\nexport type Unit<U> = U & {\n  _ctx: ContextImplementation\n}\n\nexport type UnitRoot<U> = U & {\n  _ctx: ContextImplementation\n  runFrame: (\n    commandEncoder: GPUCommandEncoder,\n    outputs: PropertyReadOnly<unknown>[],\n  ) => void\n}\n\nexport type UnitFn<U> = (ctx: Context) => U\n\nexport function createUnitRoot<U>(\n  device: GPUDevice,\n  unitFn: UnitFn<U>,\n): UnitRoot<U> {\n  const ctx = new ContextImplementation(device)\n  const unitRoot = { ...unitFn(ctx), _ctx: ctx } as UnitRoot<U>\n  unitRoot.runFrame = (\n    commandEncoder: GPUCommandEncoder,\n    outputs: PropertyReadOnly<unknown>[],\n  ) => {\n    ctx._currentClockNumber += 1\n    ctx._commandEncoder = commandEncoder\n\n    const clockNumber = ctx._currentClockNumber\n    outputs.forEach((output) => output._produceIfNeededAt(clockNumber))\n\n    ctx._effects.forEach((effect) => effect._runIfNeededAt(clockNumber))\n\n    ctx._commandEncoder = undefined\n  }\n  return unitRoot\n}\n"],"names":["root","factory","exports","module","define","amd","self","this","ctx","_useProp","undefined","useUnit","unitFn","_ctx","_current","create","_useGPUResource","producedProps","action","_useGPUUpdate","Symbol","toStringTag","Object","defineProperty","value","OutputCanvas","constructor","canvasContext","_renders","_canvasContext","addRender","render","includes","push","outputFrame","commandEncoder","target","getCurrentTexture","forEach","renderTarget","setAndNotify","runFrame","VertexSourceRect","aspectFillRatio","buffer","device","createBuffer","size","usage","GPUBufferUsage","VERTEX","COPY_DST","current","uMin","uMax","vMin","vMax","data","Float32Array","queue","writeBuffer","length","vertexSourceCount","vertexSourceTotalBytes","vertexSourceStrideBytes","vertexSourceXYZWOffsetBytes","vertexSourceUVOffsetBytes","vertexSourceAsGPUBuffer","RenderTextureRect","textureSource","vertexSource","cameraSource","shaderModule","createShaderModule","code","renderPipeline","createRenderPipeline","layout","primitive","topology","vertex","entryPoint","cameraSourceAsGPUBuffer","buffers","arrayStride","attributes","shaderLocation","offset","format","fragment","targets","depthStencil","depthWriteEnabled","depthCompare","sampler","createSampler","magFilter","minFilter","bindGroup","textureSourceAsGPUTexture","entries","binding","resource","createView","unshift","createBindGroup","getBindGroupLayout","depthTexture","createTexture","GPUTextureUsage","RENDER_ATTACHMENT","passEncoder","beginRenderPass","colorAttachments","view","clearValue","r","g","b","a","loadOp","storeOp","depthStencilAttachment","depthClearValue","depthLoadOp","depthStoreOp","setPipeline","setVertexBuffer","setBindGroup","draw","end","rect","set","TextureSourceBitmapFromURL","imageBitmap","label","texture","width","height","TEXTURE_BINDING","copyExternalImageToTexture","source","TextureSourceBitmap","url","effect","_useEffect","currentURL","console","log","cancelled","img","document","createElement","src","decode","then","createImageBitmap","newImageBitmap","catch","error","PropertyImplementation","initialValue","_changeAtNextTick","_changedClockNumber","_producedClockNumber","_producerOperations","_next","_attachProducerOperation","op","_runIfNeededAt","clockNumber","_produceIfNeededAt","currentAction","_currentAction","Error","_attachDependency","getNonReactively","readOnly","newValue","notify","change","fn","mutate","DerivedImplementation","_deps","Set","_cachedClockNumber","_fn","dep","add","depsChanged","outerAction","previousResult","_cachedResult","destroy","currentDerived","_currentClockNumber","OperationImplementation","EffectImplementation","_lastClockNumber","lastCancelFn","_lastCancelFn","ContextImplementation","_effects","_device","_commandEncoder","prop","getPreferredCanvasFormat","navigator","gpu","bind","renderFn","setupFn","powerPreference","requestAdapter","requestDevice","getDevice","canvas","getContext","configure","alphaMode","compositingAlphaMode","getCanvasContext","querySelector","getDemoCanvas","frameFn","unitRoot","outputs","output","createUnitRoot","requestAnimationFrame","repeatFrameWithContext","createCommandEncoder","submit","finish","runFrameWithContext","innerHTML","runDemoInner"],"sourceRoot":""}