{"version":3,"file":"demo4.js","mappings":"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","sources":["webpack://beta/webpack/universalModuleDefinition","webpack://beta/webpack/bootstrap","webpack://beta/../gpu-fu/src/hooks.ts","webpack://beta/webpack/runtime/make namespace object","webpack://beta/../node_modules/gl-matrix/esm/common.js","webpack://beta/../node_modules/gl-matrix/esm/vec3.js","webpack://beta/../node_modules/gl-matrix/esm/mat4.js","webpack://beta/../incubator/src/MatrixSourceOrbitalCamera.ts","webpack://beta/../incubator/src/MatrixSourceOrbitalCameraWithControls.ts","webpack://beta/../incubator/src/OutputCanvas.ts","webpack://beta/../incubator/src/RenderUV.ts","webpack://beta/../incubator/src/RenderUV.wgsl","webpack://beta/../incubator/src/TextureSourceBitmapFromURL.ts","webpack://beta/../incubator/src/TextureSourceBitmap.ts","webpack://beta/../incubator/src/VertexSourceIcosahedron.ts","webpack://beta/../gpu-fu/src/Property.ts","webpack://beta/../gpu-fu/src/Derived.ts","webpack://beta/../gpu-fu/src/Operation.ts","webpack://beta/../gpu-fu/src/Effect.ts","webpack://beta/../gpu-fu/src/Context.ts","webpack://beta/./src/runDemo.ts","webpack://beta/./src/demo4.ts","webpack://beta/../gpu-fu/src/Unit.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"beta\"] = factory();\n\telse\n\t\troot[\"beta\"] = factory();\n})(typeof self !== 'undefined' ? self : this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","import {\n  Context,\n  ContextForGPUResource,\n  ContextForGPUAction,\n  MaybeDestroyableGPUResource,\n  ContextEmpty,\n  ContextImplementation,\n} from \"./Context\"\nimport { Unit, UnitFn } from \"./Unit\"\nimport { Property, PropertyImplementation, PropertyReadOnly } from \"./Property\"\n\nexport function useProp<T>(ctx: Context): Property<T | undefined> {\n  return ctx._useProp<T | undefined>(undefined) as Property<T | undefined>\n}\n\nexport function useInitializedProp<T>(\n  ctx: Context,\n  initialValue: (() => T) | T,\n): Property<T> {\n  return ctx._useProp<T>(initialValue)\n}\n\nexport function useUnit<U>(ctx: Context, unitFn: UnitFn<U>): Unit<U> {\n  const unitProp = ctx._useProp<Unit<U>>(() => ({\n    ...unitFn(ctx),\n    _ctx: ctx as ContextImplementation,\n  }))\n\n  return (unitProp as PropertyImplementation<Unit<U>>)._current\n}\n\nexport function useGPUResource<T extends MaybeDestroyableGPUResource>(\n  ctx: Context,\n  create: (ctx: ContextForGPUResource) => T,\n): PropertyReadOnly<T> {\n  return ctx._useGPUResource<T>(create)\n}\n\nexport function useGPUUpdate(\n  producedProps: PropertyReadOnly<unknown>[],\n  ctx: Context,\n  action: (ctx: ContextForGPUAction) => void,\n): void {\n  ctx._useGPUUpdate(producedProps, action)\n}\n\nexport function useEffect(\n  ctx: Context,\n  effect: (ctx: ContextEmpty) => (() => void) | undefined,\n) {\n  return ctx._useEffect(effect)\n}\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import {\n  Context,\n  useGPUResource,\n  useGPUUpdate,\n  useInitializedProp,\n} from \"@gpu-fu/gpu-fu\"\nimport { mat4, vec3 } from \"gl-matrix\"\n\nconst matrixRowCount = 4\nconst matrixColCount = 4\nconst matrixTotalBytes = matrixRowCount * matrixColCount * 4\n\nexport default function MatrixSourceCamera(ctx: Context) {\n  const targetPosition = useInitializedProp(\n    ctx,\n    vec3.fromValues(0, 0, 0) as Float32Array,\n  )\n  const cameraPosition = useInitializedProp(ctx, {\n    distance: 5,\n    latitudeRadians: 0,\n    longitudeRadians: 0,\n  })\n\n  const buffer = useGPUResource(ctx, (ctx) =>\n    ctx.device.createBuffer({\n      size: matrixTotalBytes,\n      usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n    }),\n  )\n\n  useGPUUpdate([buffer], ctx, (ctx) => {\n    const aspectRatio = 1 // TODO: adapt to canvas client size somehow?\n    const fieldOfViewRadiansY = degreesToRadians(60) // TODO: configurable?\n    const zNear = 1 // TODO: configurable?\n    const zFar = 2000 // TODO: configurable?\n    const projectionMatrix = mat4.create()\n    mat4.perspective(\n      projectionMatrix,\n      fieldOfViewRadiansY,\n      aspectRatio,\n      zNear,\n      zFar,\n    )\n\n    const cameraMatrix = mat4.create()\n    mat4.translate(cameraMatrix, cameraMatrix, targetPosition.current)\n    mat4.rotateY(\n      cameraMatrix,\n      cameraMatrix,\n      cameraPosition.current.longitudeRadians,\n    )\n    mat4.rotateX(\n      cameraMatrix,\n      cameraMatrix,\n      cameraPosition.current.latitudeRadians,\n    )\n    mat4.translate(\n      cameraMatrix,\n      cameraMatrix,\n      vec3.fromValues(0, 0, cameraPosition.current.distance),\n    )\n\n    const cameraPos = vec3.create()\n    mat4.getTranslation(cameraPos, cameraMatrix)\n\n    const upward = vec3.fromValues(0, 1, 0)\n\n    const viewMatrix = mat4.create() as Float32Array\n    mat4.lookAt(viewMatrix, cameraPos, targetPosition.current, upward)\n\n    const projectionViewMatrix = mat4.create()\n    mat4.multiply(projectionViewMatrix, projectionMatrix, viewMatrix)\n\n    const data = projectionViewMatrix as Float32Array\n\n    ctx.device.queue.writeBuffer(buffer.current, 0, data, 0, data.length)\n  })\n\n  return {\n    targetPosition,\n    cameraPosition,\n    cameraSourceAsGPUBuffer: buffer,\n  }\n}\n\nfunction degreesToRadians(degrees: number) {\n  return (degrees * Math.PI) / 180\n}\n","import { Context, useProp, useEffect } from \"@gpu-fu/gpu-fu\"\nimport MatrixSourceOrbitalCamera from \"./MatrixSourceOrbitalCamera\"\n\nexport default function MatrixSourceOrbitalCameraWithControls(ctx: Context) {\n  const cameraSource = MatrixSourceOrbitalCamera(ctx)\n  const canvas = useProp<HTMLCanvasElement>(ctx)\n\n  useEffect(ctx, (ctx) => {\n    const currentCanvas = canvas.current\n    if (!currentCanvas) return () => {}\n\n    const maxLatitudeRadians = Math.PI / 2 - 0.05\n    var lastClientX = 0\n    var lastClientY = 0\n\n    const onPointerMove = (event: PointerEvent) => {\n      const deltaX = event.clientX - lastClientX\n      const deltaY = event.clientY - lastClientY\n      lastClientX = event.clientX\n      lastClientY = event.clientY\n\n      if (event.altKey) {\n        const { longitudeRadians, latitudeRadians } =\n          cameraSource.cameraPosition.getNonReactively()\n\n        // The 2D X axis is always perpendicular to the 3D Y axis, so changes\n        // along the 2D X axis never affect the 3D Y axis.\n        // However, changes along the 2D Y axis can affect all three axes.\n        const scale = 0.02 // TODO: compute based on current cameraDistance, canvas size, field of view, etc.\n        const deltaY3D = scale * deltaY * Math.cos(latitudeRadians)\n        const deltaX3D =\n          scale *\n          (deltaX * -Math.cos(longitudeRadians) +\n            deltaY * Math.sin(latitudeRadians) * Math.sin(longitudeRadians))\n        const deltaZ3D =\n          scale *\n          (deltaX * Math.sin(longitudeRadians) +\n            deltaY * Math.sin(latitudeRadians) * Math.cos(longitudeRadians))\n\n        cameraSource.targetPosition.mutate((vector) => {\n          vector[0] += deltaX3D\n          vector[1] += deltaY3D\n          vector[2] += deltaZ3D\n        })\n      } else {\n        cameraSource.cameraPosition.mutate((data) => {\n          data.longitudeRadians -= deltaX * 0.01\n          data.latitudeRadians = Math.min(\n            maxLatitudeRadians,\n            Math.max(-maxLatitudeRadians, data.latitudeRadians - deltaY * 0.01),\n          )\n        })\n      }\n    }\n\n    const onPointerDown = (event: PointerEvent) => {\n      currentCanvas.style.cursor = \"grabbing\"\n\n      lastClientX = event.clientX\n      lastClientY = event.clientY\n\n      currentCanvas.addEventListener(\"pointermove\", onPointerMove)\n      currentCanvas.setPointerCapture(event.pointerId)\n    }\n\n    const onPointerUp = (event: PointerEvent) => {\n      currentCanvas.style.cursor = \"grab\"\n\n      currentCanvas.removeEventListener(\"pointermove\", onPointerMove)\n    }\n\n    currentCanvas.style.cursor = \"grab\"\n\n    currentCanvas.addEventListener(\"pointerdown\", onPointerDown)\n    currentCanvas.addEventListener(\"pointerup\", onPointerUp)\n\n    return () => {\n      currentCanvas.style.cursor = \"auto\"\n\n      currentCanvas.removeEventListener(\"pointerdown\", onPointerDown)\n      currentCanvas.removeEventListener(\"pointerup\", onPointerUp)\n      currentCanvas.removeEventListener(\"pointermove\", onPointerMove)\n    }\n  })\n\n  return Object.assign(cameraSource, { canvas })\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { Render, UnitRoot } from \"@gpu-fu/gpu-fu\"\n\nexport default class OutputCanvas {\n  _canvasContext: GPUCanvasContext\n  _renders: UnitRoot<Render>[] = []\n\n  constructor(canvasContext: GPUCanvasContext) {\n    this._canvasContext = canvasContext\n  }\n\n  addRender(render: UnitRoot<Render>) {\n    if (this._renders.includes(render)) return\n    this._renders.push(render)\n  }\n\n  outputFrame(commandEncoder: GPUCommandEncoder) {\n    const target = this._canvasContext.getCurrentTexture()\n    this._renders.forEach((render) => {\n      render.renderTarget.setAndNotify(target)\n      render.runFrame(commandEncoder, [render.renderTarget])\n    })\n  }\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport {\n  Context,\n  Unit,\n  MatrixSource,\n  VertexSource,\n  TextureSource,\n  autoLayout,\n  useProp,\n  useGPUResource,\n  useGPUUpdate,\n} from \"@gpu-fu/gpu-fu\"\n\nimport shaderModuleCode from \"./RenderUV.wgsl\"\n\nexport default function RenderUV(ctx: Context) {\n  const cameraSource = useProp<Unit<MatrixSource>>(ctx)\n  const vertexSource = useProp<Unit<VertexSource>>(ctx)\n  const textureSource = useProp<Unit<TextureSource>>(ctx)\n  const renderTarget = useProp<GPUTexture>(ctx)\n\n  const shaderModule = useGPUResource(ctx, (ctx) =>\n    ctx.device.createShaderModule({\n      code: shaderModuleCode,\n    }),\n  )\n\n  const renderPipeline = useGPUResource(ctx, (ctx) => {\n    if (!vertexSource.current) return\n\n    return ctx.device.createRenderPipeline({\n      vertex: {\n        module: shaderModule.current,\n        entryPoint: cameraSource.current?.cameraSourceAsGPUBuffer\n          ? \"vertexRenderUVWithMatrix\"\n          : \"vertexRenderUV\",\n        buffers: [\n          {\n            arrayStride: vertexSource.current.vertexSourceStrideBytes,\n            attributes: [\n              {\n                shaderLocation: 0,\n                offset: vertexSource.current.vertexSourceXYZWOffsetBytes,\n                format: \"float32x4\" as GPUVertexFormat,\n              },\n              {\n                shaderLocation: 1,\n                offset: vertexSource.current.vertexSourceUVOffsetBytes,\n                format: \"float32x2\" as GPUVertexFormat,\n              },\n            ],\n          },\n        ],\n      },\n      fragment: {\n        module: shaderModule.current,\n        entryPoint: \"fragmentRenderUV\",\n        targets: [\n          {\n            // TODO: Remove this hard-coded value - get the real one somehow.\n            format: \"rgba8unorm\" as GPUTextureFormat,\n          },\n        ],\n      },\n      primitive: {\n        topology: \"triangle-list\",\n        // TODO: Configurable `cullMode`\n      },\n      depthStencil: {\n        depthWriteEnabled: true,\n        depthCompare: \"less\",\n        format: \"depth24plus\",\n      },\n      layout: autoLayout(),\n    })\n  })\n\n  const sampler = useGPUResource(ctx, (ctx) =>\n    ctx.device.createSampler({\n      magFilter: \"linear\",\n      minFilter: \"linear\",\n    }),\n  )\n\n  const bindGroup = useGPUResource(ctx, (ctx) => {\n    if (!renderPipeline.current) return\n    if (!textureSource.current?.textureSourceAsGPUTexture.current) return\n\n    const entries: GPUBindGroupEntry[] = [\n      {\n        binding: 1,\n        resource: sampler.current,\n      },\n      {\n        binding: 2,\n        resource:\n          textureSource.current?.textureSourceAsGPUTexture.current.createView(),\n      },\n    ]\n    if (cameraSource.current?.cameraSourceAsGPUBuffer)\n      entries.unshift({\n        binding: 0,\n        resource: {\n          buffer: cameraSource.current?.cameraSourceAsGPUBuffer.current,\n        },\n      })\n\n    return ctx.device.createBindGroup({\n      layout: renderPipeline.current.getBindGroupLayout(0),\n      entries,\n    })\n  })\n\n  const depthTexture = useGPUResource(ctx, (ctx) =>\n    ctx.device.createTexture({\n      size: [300, 300], // TODO: somehow get from canvas client size\n      format: \"depth24plus\",\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n    }),\n  )\n\n  useGPUUpdate([renderTarget], ctx, (ctx) => {\n    // TODO: Remove the need for the following lines here:\n    cameraSource.current?.cameraSourceAsGPUBuffer.current\n    textureSource.current?.textureSourceAsGPUTexture.current\n\n    if (!vertexSource.current) return\n    if (!renderTarget.current) return\n    if (!renderPipeline.current) return\n    if (!bindGroup.current) return\n\n    const passEncoder = ctx.commandEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTarget.current.createView(),\n          clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n          loadOp: \"clear\" as GPULoadOp,\n          storeOp: \"store\" as GPUStoreOp,\n        },\n      ],\n      depthStencilAttachment: {\n        view: depthTexture.current.createView(),\n        depthClearValue: 1.0,\n        depthLoadOp: \"clear\" as GPULoadOp,\n        depthStoreOp: \"store\" as GPUStoreOp,\n      },\n    })\n    passEncoder.setPipeline(renderPipeline.current)\n    passEncoder.setVertexBuffer(\n      0,\n      vertexSource.current.vertexSourceAsGPUBuffer.current,\n    )\n    passEncoder.setBindGroup(0, bindGroup.current)\n    passEncoder.draw(vertexSource.current.vertexSourceCount, 1, 0, 0)\n    passEncoder.end()\n  })\n\n  return {\n    cameraSource,\n    textureSource,\n    vertexSource,\n    renderTarget,\n  }\n}\n","export default \"@group(0) @binding(0) var<uniform> use_matrix: mat4x4<f32>;\\n@group(0) @binding(1) var use_sampler: sampler;\\n@group(0) @binding(2) var use_texture: texture_2d<f32>;\\n\\nstruct VertexOutput {\\n  @builtin(position) pos: vec4<f32>;\\n  @location(0) uv: vec2<f32>;\\n}\\n\\n@stage(vertex)\\nfn vertexRenderUV(\\n  @location(0) pos_in: vec4<f32>,\\n  @location(1) uv_in: vec2<f32>,\\n) ->\\n  VertexOutput\\n{\\n  var out: VertexOutput;\\n  out.pos = pos_in;\\n  out.uv = uv_in;\\n  return out;\\n}\\n\\n@stage(vertex)\\nfn vertexRenderUVWithMatrix(\\n  @location(0) pos_in: vec4<f32>,\\n  @location(1) uv_in: vec2<f32>,\\n) ->\\n  VertexOutput\\n{\\n  var out: VertexOutput;\\n  out.pos = use_matrix * pos_in;\\n  out.uv = uv_in;\\n  return out;\\n}\\n\\n@stage(fragment)\\nfn fragmentRenderUV(\\n  @location(0) uv_in : vec2<f32>\\n) ->\\n  @location(0) vec4<f32>\\n{\\n  return textureSample(use_texture, use_sampler, uv_in.xy);\\n}\\n\";","import { Context, useEffect } from \"@gpu-fu/gpu-fu\"\nimport TextureSourceBitmap from \"./TextureSourceBitmap\"\n\nexport default function TextureSourceBitmapFromURL(ctx: Context) {\n  const { imageBitmap, label, textureSourceAsGPUTexture } =\n    TextureSourceBitmap(ctx)\n\n  // Use the existing label property for a dual-purpose.\n  // We use it as the URL to fetch from (though this implies\n  // the assumption that the label will always be equal to the URL).\n  const url = label\n\n  useEffect(ctx, (ctx) => {\n    const currentURL = url.current\n    console.log({ currentURL })\n    if (!currentURL) return () => {}\n\n    var cancelled = false\n\n    const img = document.createElement(\"img\")\n    img.src = currentURL\n\n    img\n      .decode()\n      .then(() => (cancelled ? undefined : createImageBitmap(img)))\n      .then((newImageBitmap) => {\n        if (!cancelled && newImageBitmap) imageBitmap.set(newImageBitmap)\n      })\n      .catch(console.error)\n\n    return () => {\n      cancelled = true\n    }\n  })\n\n  return {\n    url,\n    textureSourceAsGPUTexture,\n  }\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { Context, useProp, useGPUResource, useGPUUpdate } from \"@gpu-fu/gpu-fu\"\n\nexport default function TextureSourceBitmap(ctx: Context) {\n  const imageBitmap = useProp<ImageBitmap>(ctx)\n  const label = useProp<string>(ctx)\n\n  const texture = useGPUResource(ctx, (ctx) => {\n    if (!imageBitmap.current) return\n\n    return ctx.device.createTexture({\n      label: label.current,\n      size: [imageBitmap.current.width, imageBitmap.current.height, 1],\n      format: \"rgba8unorm\",\n      usage:\n        GPUTextureUsage.TEXTURE_BINDING |\n        GPUTextureUsage.COPY_DST |\n        GPUTextureUsage.RENDER_ATTACHMENT,\n    })\n  })\n\n  useGPUUpdate([texture], ctx, (ctx) => {\n    if (!imageBitmap.current) return\n    if (!texture.current) return\n\n    ctx.device.queue.copyExternalImageToTexture(\n      { source: imageBitmap.current },\n      { texture: texture.current },\n      [imageBitmap.current.width, imageBitmap.current.height],\n    )\n  })\n\n  return {\n    imageBitmap,\n    label,\n    textureSourceAsGPUTexture: texture,\n  }\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { Context, useGPUResource, useGPUUpdate } from \"@gpu-fu/gpu-fu\"\n\nconst vertexSourceCount = 60\nconst vertexSourceXYZWOffsetBytes = 0\nconst vertexSourceUVOffsetBytes = 4 * 4\nconst vertexSourceStrideBytes = 6 * 4\nconst vertexSourceTotalBytes = vertexSourceCount * vertexSourceStrideBytes\n\nexport default function VertexSourceIcosahedron(ctx: Context) {\n  const buffer = useGPUResource(ctx, (ctx) =>\n    ctx.device.createBuffer({\n      size: vertexSourceTotalBytes,\n      usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\n    }),\n  )\n\n  useGPUUpdate([buffer], ctx, (ctx) => {\n    if (!buffer.current) return\n\n    var uMin = 0\n    var uMax = 1\n    var vMin = 0\n    var vMax = 1\n\n    const t = (1 + Math.sqrt(5)) / 2\n\n    // prettier-ignore\n    const data = new Float32Array([\n      // (x, y, z, w),  (u, v)\n          t, 1, 0, 1, uMax, vMin, // v0\n          0, t, 1, 1, uMax, vMax, // v8\n          1, 0, t, 1, uMin, vMax, // v4\n\n          t, 1, 0, 1, uMax, vMin, // v0\n          1, 0, t, 1, uMax, vMax, // v4\n          t,-1, 0, 1, uMin, vMax, // v2\n\n          t, 1, 0, 1, uMax, vMin, // v0\n          t,-1, 0, 1, uMax, vMax, // v2\n          1, 0,-t, 1, uMin, vMax, // v5\n\n          t, 1, 0, 1, uMax, vMin, // v0\n          1, 0,-t, 1, uMax, vMax, // v5\n          0, t,-1, 1, uMin, vMax, // v10\n\n          t, 1, 0, 1, uMax, vMin, // v0\n          0, t,-1, 1, uMax, vMax, // v10\n          0, t, 1, 1, uMin, vMax, // v8\n\n         -1, 0, t, 1, uMax, vMin, // v1\n          1, 0, t, 1, uMax, vMax, // v4\n          0, t, 1, 1, uMin, vMax, // v8\n\n          0,-t, 1, 1, uMax, vMin, // v6\n          t,-1, 0, 1, uMax, vMax, // v2\n          1, 0, t, 1, uMin, vMax, // v4\n\n          0,-t,-1, 1, uMax, vMin, // v9\n          1, 0,-t, 1, uMax, vMax, // v5\n          t,-1, 0, 1, uMin, vMax, // v2\n\n         -1, 0,-t, 1, uMax, vMin, // v11\n          0, t,-1, 1, uMax, vMax, // v10\n          1, 0,-t, 1, uMin, vMax, // v5\n\n         -t, 1, 0, 1, uMax, vMin, // v7\n          0, t, 1, 1, uMax, vMax, // v8\n          0, t,-1, 1, uMin, vMax, // v10\n\n          1, 0, t, 1, uMax, vMin, // v4\n         -1, 0, t, 1, uMax, vMax, // v1\n          0,-t, 1, 1, uMin, vMax, // v6\n\n          t,-1, 0, 1, uMax, vMin, // v2\n          0,-t, 1, 1, uMax, vMax, // v6\n          0,-t,-1, 1, uMin, vMax, // v9\n\n          1, 0,-t, 1, uMax, vMin, // v5\n          0,-t,-1, 1, uMax, vMax, // v9\n         -1, 0,-t, 1, uMin, vMax, // v11\n\n          0, t,-1, 1, uMax, vMin, // v10\n         -1, 0,-t, 1, uMax, vMax, // v11\n         -t, 1, 0, 1, uMin, vMax, // v7\n\n          0, t, 1, 1, uMax, vMin, // v8\n         -t, 1, 0, 1, uMax, vMax, // v7\n         -1, 0, t, 1, uMin, vMax, // v1\n\n         -t,-1, 0, 1, uMax, vMin, // v3\n          0,-t, 1, 1, uMax, vMax, // v6\n         -1, 0, t, 1, uMin, vMax, // v1\n\n         -t,-1, 0, 1, uMax, vMin, // v3\n          0,-t,-1, 1, uMax, vMax, // v9\n          0,-t, 1, 1, uMin, vMax, // v6\n\n         -t,-1, 0, 1, uMax, vMin, // v3\n         -1, 0,-t, 1, uMax, vMax, // v11\n          0,-t,-1, 1, uMin, vMax, // v9\n\n         -t,-1, 0, 1, uMax, vMin, // v3\n         -t, 1, 0, 1, uMax, vMax, // v7\n         -1, 0,-t, 1, uMin, vMax, // v11\n\n         -t,-1, 0, 1, uMax, vMin, // v3\n         -1, 0, t, 1, uMax, vMax, // v1\n         -t, 1, 0, 1, uMin, vMax, // v7\n      ])\n\n    ctx.device.queue.writeBuffer(buffer.current, 0, data, 0, data.length)\n  })\n\n  return {\n    vertexSourceCount,\n    vertexSourceTotalBytes,\n    vertexSourceStrideBytes,\n    vertexSourceXYZWOffsetBytes,\n    vertexSourceUVOffsetBytes,\n    vertexSourceAsGPUBuffer: buffer,\n  }\n}\n","import { ContextImplementation } from \"./Context\"\nimport { Operation } from \"./Operation\"\n\nexport type Property<T> = Pick<\n  PropertyImplementation<T>,\n  | \"current\"\n  | \"getNonReactively\"\n  | \"readOnly\"\n  | \"set\"\n  | \"setAndNotify\"\n  | \"change\"\n  | \"mutate\"\n  | \"_runIfNeededAt\"\n  | \"_produceIfNeededAt\"\n  | \"_attachProducerOperation\"\n>\n\nexport type PropertyReadOnly<T> = Pick<\n  PropertyImplementation<T>,\n  | \"current\"\n  | \"getNonReactively\"\n  | \"_runIfNeededAt\"\n  | \"_produceIfNeededAt\"\n  | \"_attachProducerOperation\"\n>\n\nexport class PropertyImplementation<T> implements Property<T> {\n  private _ctx: ContextImplementation\n  _current: T // TODO: private\n  private _next: T\n  private _changeAtNextTick = false\n  private _changedClockNumber = 0\n  private _producedClockNumber = 0\n  private _producerOperations: Operation[] = []\n\n  constructor(initialValue: T, ctx: ContextImplementation) {\n    this._current = initialValue\n    this._next = initialValue\n    this._ctx = ctx\n  }\n\n  _attachProducerOperation(op: Operation): void {\n    this._producerOperations.push(op)\n  }\n\n  _runIfNeededAt(clockNumber: number): boolean {\n    if (!this._changeAtNextTick) return this._changedClockNumber >= clockNumber\n\n    this._current = this._next\n    this._changeAtNextTick = false\n    this._changedClockNumber = clockNumber\n\n    return true\n  }\n\n  _produceIfNeededAt(clockNumber: number) {\n    if (this._producedClockNumber >= clockNumber) return\n\n    this._producerOperations.forEach((op) => op._produceIfNeededAt(clockNumber))\n    this._producedClockNumber = clockNumber\n  }\n\n  // Get the current value of the property.\n  //\n  // This can only be accessed from within a reactive context,\n  // since it implies that you want to track the property as a dependency\n  // dependency that will cause the reactive context to be called again.\n  // To get the current value non-reactively, call `getNonReactively` instead.\n  get current(): T {\n    const currentAction = this._ctx._currentAction\n    if (!currentAction)\n      throw new Error(\n        \"It's only possible to read properties from within a reactive context\",\n      )\n    currentAction._attachDependency(this)\n\n    return this._current\n  }\n\n  // Get the current value of the property without dependency tracking.\n  // Unlike the `current` getter, this can be called anywhere,\n  // both in contexts which are reactive and non-reactive.\n  // But if called in a reactive context, there is no dependency link created.\n  getNonReactively(): T {\n    return this._current\n  }\n\n  // Get a version of this property accessor that can only read (in TypeScript).\n  get readOnly(): PropertyReadOnly<T> {\n    return this\n  }\n\n  // Assign a new value to the property, notifying any reactive effects if\n  // (and only if) the new value is not referentially identical to the old one.\n  //\n  // Use `setAndNotify` instead if you want to unconditionally notify all\n  // downstream reactive effects even if the new value is the same.\n  set(newValue: T) {\n    if (this._current !== newValue) this.setAndNotify(newValue)\n  }\n\n  // Assign a new value to the property, notifying all reactive effects,\n  // regardless of whether the new value is referentially identical to the old.\n  //\n  // Usually you want to use `set` instead, which checks referential identity.\n  setAndNotify(newValue: T) {\n    this._next = newValue\n    this.notify()\n  }\n\n  // Use a function to change the value of the property based on the current\n  // value (which will be passed as the argument to the function).\n  //\n  // All reactive effects will be notified if (and only if) the new value\n  // produced by the function is not referentially identical to the old value.\n  //\n  // Use `mutate` instead if the value is an object type that you want to mutate\n  // to change it and trigger reactive effects without actually having to\n  // produce a new referentially new object for the new value.\n  change(fn: (currentValue: T) => T) {\n    this.set(fn(this._current))\n  }\n\n  // Use a function to mutate the current value of the property,\n  // without changing its referential identity.\n  //\n  // All reactive effects will be notified regardless of what the function does.\n  mutate(fn: (currentValue: T) => unknown) {\n    fn(this._current)\n    this.notify() // assume mutation always happens\n  }\n\n  private notify() {\n    this._changeAtNextTick = true\n  }\n}\n","import { ContextImplementation } from \"./Context\"\nimport { Operation } from \"./Operation\"\nimport { PropertyReadOnly } from \"./Property\"\n\nexport type Derived<T> = PropertyReadOnly<T>\n\nexport class DerivedImplementation<T> implements Derived<T> {\n  _ctx: ContextImplementation\n  _fn: (ctx: unknown) => T\n  _deps = new Set<PropertyReadOnly<unknown>>()\n  _cachedResult?: T\n  _cachedClockNumber: number = 0\n  _producedClockNumber = 0\n  _producerOperations: Operation[] = []\n\n  constructor(ctx: ContextImplementation, fn: (ctx: unknown) => T) {\n    this._ctx = ctx\n    this._fn = fn\n  }\n\n  _attachDependency(dep: PropertyReadOnly<unknown>): void {\n    this._deps.add(dep)\n  }\n\n  _attachProducerOperation(op: Operation): void {\n    this._producerOperations.push(op)\n  }\n\n  _runIfNeededAt(clockNumber: number): boolean {\n    if (this._cachedClockNumber >= clockNumber) return true\n\n    var depsChanged = false\n    this._deps.forEach((dep) => {\n      if (dep._runIfNeededAt(clockNumber)) depsChanged = true\n    })\n    if (!depsChanged && this._cachedClockNumber > 0) return false\n\n    const outerAction = this._ctx._currentAction\n    this._ctx._currentAction = this\n\n    // Run the destroy method of the previous result to clean up if applicable.\n    const previousResult = this._cachedResult\n    if (\n      typeof previousResult === \"object\" &&\n      \"destroy\" in previousResult &&\n      typeof (previousResult as any).destroy === \"function\"\n    ) {\n      ;(previousResult as any).destroy()\n    }\n\n    this._cachedResult = this._fn(this._ctx)\n    this._cachedClockNumber = clockNumber\n\n    this._ctx._currentAction = outerAction\n\n    return true\n  }\n\n  _produceIfNeededAt(clockNumber: number) {\n    if (this._producedClockNumber >= clockNumber) return\n\n    this._producerOperations.forEach((op) => op._produceIfNeededAt(clockNumber))\n    this._producedClockNumber = clockNumber\n  }\n\n  get current(): T {\n    const currentDerived = this._ctx._currentAction\n    if (!currentDerived)\n      throw new Error(\n        \"It's only possible to read properties from within a reactive context\",\n      )\n    currentDerived._attachDependency(this)\n\n    this._runIfNeededAt(this._ctx._currentClockNumber)\n\n    return this._cachedResult as T\n  }\n\n  getNonReactively(): T {\n    return this._cachedResult as T\n  }\n}\n","import { ContextImplementation } from \"./Context\"\nimport { PropertyReadOnly } from \"./Property\"\n\nexport type Operation = Pick<\n  OperationImplementation,\n  \"_produceIfNeededAt\" | \"_attachDependency\"\n>\n\nexport class OperationImplementation implements Operation {\n  _ctx: ContextImplementation\n  _fn: (ctx: unknown) => void\n  _deps = new Set<PropertyReadOnly<unknown>>()\n  _producedClockNumber: number = 0\n\n  constructor(ctx: ContextImplementation, fn: (ctx: unknown) => void) {\n    this._ctx = ctx\n    this._fn = fn\n  }\n\n  _attachDependency(dep: PropertyReadOnly<unknown>): void {\n    this._deps.add(dep)\n  }\n\n  _produceIfNeededAt(clockNumber: number) {\n    if (this._producedClockNumber >= clockNumber) return\n    this._producedClockNumber = clockNumber\n\n    this._deps.forEach((op) => op._runIfNeededAt(clockNumber))\n    this._deps.forEach((op) => op._produceIfNeededAt(clockNumber))\n\n    const outerAction = this._ctx._currentAction\n    this._ctx._currentAction = this\n\n    this._fn(this._ctx)\n\n    this._ctx._currentAction = outerAction\n  }\n}\n","import { ContextImplementation } from \"./Context\"\nimport { PropertyReadOnly } from \"./Property\"\n\nexport type Effect = Pick<\n  EffectImplementation,\n  \"_attachDependency\" | \"_runIfNeededAt\"\n>\n\nexport class EffectImplementation implements Effect {\n  _ctx: ContextImplementation\n  _fn: (ctx: unknown) => (() => {}) | undefined\n  _deps = new Set<PropertyReadOnly<unknown>>()\n  _lastCancelFn?: () => {}\n  _lastClockNumber = 0\n\n  constructor(\n    ctx: ContextImplementation,\n    fn: (ctx: unknown) => (() => {}) | undefined,\n  ) {\n    this._ctx = ctx\n    this._fn = fn\n  }\n\n  _attachDependency(dep: PropertyReadOnly<unknown>): void {\n    this._deps.add(dep)\n  }\n\n  _runIfNeededAt(clockNumber: number) {\n    if (this._lastClockNumber >= clockNumber) return true\n\n    var depsChanged = false\n    this._deps.forEach((dep) => {\n      if (dep._runIfNeededAt(clockNumber)) depsChanged = true\n    })\n    if (!depsChanged && this._lastClockNumber > 0) return false\n\n    const lastCancelFn = this._lastCancelFn\n    if (lastCancelFn) lastCancelFn()\n\n    const outerAction = this._ctx._currentAction\n    this._ctx._currentAction = this\n\n    this._lastCancelFn = this._fn(this._ctx)\n\n    this._ctx._currentAction = outerAction\n    this._lastClockNumber = clockNumber\n  }\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { Unit } from \"./Unit\"\nimport { Property, PropertyImplementation, PropertyReadOnly } from \"./Property\"\nimport { Derived, DerivedImplementation } from \"./Derived\"\nimport { OperationImplementation } from \"./Operation\"\nimport { EffectImplementation } from \"./Effect\"\nimport { Effect } from \"./Effect\"\n\nexport type MaybeDestroyableGPUResource =\n  | undefined\n  | 0\n  | false\n  | null\n  | (GPUObjectBase & { destroy?: () => void })\n\ntype AttachDependency = Pick<\n  DerivedImplementation<unknown>,\n  \"_attachDependency\"\n>\n\nexport class ContextImplementation {\n  _currentAction?: AttachDependency\n  _currentClockNumber: number = 1\n\n  _effects: Effect[] = []\n\n  _device: GPUDevice\n  _commandEncoder?: GPUCommandEncoder\n\n  constructor(device: GPUDevice) {\n    this._device = device\n  }\n\n  get commandEncoder(): GPUCommandEncoder | undefined {\n    return this._commandEncoder\n  }\n\n  get device(): GPUDevice {\n    return this._device\n  }\n\n  _useProp<T>(initialValue: (() => T) | T): Property<T> {\n    return new PropertyImplementation<T>(\n      typeof initialValue === \"function\"\n        ? (initialValue as () => T)()\n        : initialValue,\n      this,\n    )\n  }\n\n  _useGPUResource<T extends MaybeDestroyableGPUResource>(\n    fn: (ctx: ContextForGPUResource) => T,\n  ): Derived<T> {\n    return new DerivedImplementation<T>(this, fn as any)\n  }\n\n  _useGPUUpdate(\n    producedProps: PropertyReadOnly<unknown>[],\n    fn: (ctx: ContextForGPUAction) => void,\n  ) {\n    const op = new OperationImplementation(this, fn as any)\n\n    producedProps.forEach((prop) => prop._attachProducerOperation(op))\n  }\n\n  _useEffect(fn: (ctx: ContextEmpty) => (() => void) | undefined) {\n    this._effects.push(new EffectImplementation(this, fn as any))\n  }\n}\n\nexport type Context = Pick<\n  ContextImplementation,\n  // In the main function context, hooks are available.\n  \"device\" | \"_useProp\" | \"_useGPUResource\" | \"_useGPUUpdate\" | \"_useEffect\"\n>\n\nexport type ContextForGPUResource = Pick<\n  ContextImplementation,\n  // No hooks are available.\n  \"device\"\n>\n\nexport type ContextForGPUAction = Pick<\n  ContextImplementation,\n  // No hooks are available, but a command encoder is available.\n  \"device\"\n> & { commandEncoder: GPUCommandEncoder }\n\nexport type ContextEmpty = {}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { UnitFn, createUnitRoot, Render } from \"@gpu-fu/gpu-fu\"\nimport { OutputCanvas } from \"@gpu-fu/incubator\"\n\ntype FrameFn = (commandEncoder: GPUCommandEncoder) => void\ntype SetupFn = (device: GPUDevice, canvasContext: GPUCanvasContext) => FrameFn\n\nexport default function runDemo(renderFn: UnitFn<Render>) {\n  runDemoInner((device, canvasContext) => {\n    const render = createUnitRoot(device, renderFn)\n\n    const output = new OutputCanvas(canvasContext)\n    output.addRender(render)\n\n    return function frame(commandEncoder) {\n      output.outputFrame(commandEncoder)\n    }\n  })\n}\n\nfunction runDemoInner(setupFn: SetupFn) {\n  ;(async () => {\n    const device = await getDevice()\n    const canvasContext = await getCanvasContext(getDemoCanvas(), device)\n\n    const frameFn = setupFn(device, canvasContext)\n\n    function repeatFrameWithContext() {\n      runFrameWithContext(device, frameFn)\n      requestAnimationFrame(repeatFrameWithContext)\n    }\n    requestAnimationFrame(repeatFrameWithContext)\n  })().catch((error) => {\n    document.querySelector(\"body\")!.innerHTML = error\n    console.error(error)\n  })\n}\n\nasync function getDevice(\n  powerPreference: GPUPowerPreference = \"high-performance\",\n): Promise<GPUDevice> {\n  if (!navigator.gpu)\n    throw new Error(\"Your browser doesn't have WebGPU enabled!\")\n\n  const gpu = await navigator.gpu.requestAdapter({ powerPreference })\n  if (!gpu) throw new Error(\"Failed to get the GPU adapter!\")\n\n  return gpu.requestDevice()\n}\n\nexport function getDemoCanvas(): HTMLCanvasElement {\n  const canvas = document.querySelector(\n    \"canvas.main\",\n  ) as HTMLCanvasElement | null\n  if (!canvas) throw new Error(\"The main canvas wasn't found in the HTML!\")\n\n  return canvas\n}\n\nasync function getCanvasContext(\n  canvas: HTMLCanvasElement,\n  device: GPUDevice,\n): Promise<GPUCanvasContext> {\n  const canvasContext = canvas.getContext(\"webgpu\") as GPUCanvasContext | null\n  if (!canvasContext) throw new Error(\"Failed to get a WebGPU canvas context!\")\n\n  canvasContext.configure({\n    device,\n    format: getPreferredCanvasFormat(),\n    alphaMode: \"opaque\",\n  })\n\n  return canvasContext\n}\n\nfunction getPreferredCanvasFormat() {\n  // Some browsers throw an \"Illegal invocation\" error if we don't bind.\n  const getPreferredCanvasFormat =\n    navigator.gpu?.getPreferredCanvasFormat?.bind(navigator.gpu)\n  if (getPreferredCanvasFormat) return getPreferredCanvasFormat()\n\n  // Hard-coded default for browsers that don't implement this function yet.\n  return \"rgba8unorm\"\n}\n\nfunction runFrameWithContext(device: GPUDevice, frameFn: FrameFn) {\n  const commandEncoder = device.createCommandEncoder()\n  frameFn(commandEncoder)\n  device.queue.submit([commandEncoder.finish()])\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { useUnit } from \"@gpu-fu/gpu-fu\"\nimport {\n  MatrixSourceOrbitalCameraWithControls,\n  RenderUV,\n  TextureSourceBitmapFromURL,\n  VertexSourceIcosahedron,\n} from \"@gpu-fu/incubator\"\n\nimport runDemo, { getDemoCanvas } from \"./runDemo\"\nrunDemo((ctx) => {\n  const cameraSource = useUnit(ctx, MatrixSourceOrbitalCameraWithControls)\n  const vertexSource = useUnit(ctx, VertexSourceIcosahedron)\n  const textureSource = useUnit(ctx, TextureSourceBitmapFromURL)\n  textureSource.url.set(\"./assets/fireweed.jpg\")\n\n  cameraSource.canvas.set(getDemoCanvas())\n\n  const { renderTarget, ...render } = useUnit(ctx, RenderUV)\n  render.cameraSource.set(cameraSource)\n  render.textureSource.set(textureSource)\n  render.vertexSource.set(vertexSource)\n\n  return { renderTarget }\n})\n","import { Context, ContextImplementation } from \"./Context\"\nimport { PropertyReadOnly } from \"./Property\"\n\nexport type Unit<U> = U & {\n  _ctx: ContextImplementation\n}\n\nexport type UnitRoot<U> = U & {\n  _ctx: ContextImplementation\n  runFrame: (\n    commandEncoder: GPUCommandEncoder,\n    outputs: PropertyReadOnly<unknown>[],\n  ) => void\n}\n\nexport type UnitFn<U> = (ctx: Context) => U\n\nexport function createUnitRoot<U>(\n  device: GPUDevice,\n  unitFn: UnitFn<U>,\n): UnitRoot<U> {\n  const ctx = new ContextImplementation(device)\n  const unitRoot = { ...unitFn(ctx), _ctx: ctx } as UnitRoot<U>\n  unitRoot.runFrame = (\n    commandEncoder: GPUCommandEncoder,\n    outputs: PropertyReadOnly<unknown>[],\n  ) => {\n    ctx._currentClockNumber += 1\n    ctx._commandEncoder = commandEncoder\n\n    const clockNumber = ctx._currentClockNumber\n    outputs.forEach((output) => output._produceIfNeededAt(clockNumber))\n\n    ctx._effects.forEach((effect) => effect._runIfNeededAt(clockNumber))\n\n    ctx._commandEncoder = undefined\n  }\n  return unitRoot\n}\n"],"names":["root","factory","exports","module","define","amd","self","this","useProp","ctx","_useProp","undefined","useInitializedProp","initialValue","useUnit","unitFn","_ctx","_current","useGPUResource","create","_useGPUResource","useGPUUpdate","producedProps","action","_useGPUUpdate","useEffect","effect","_useEffect","Symbol","toStringTag","Object","defineProperty","value","EPSILON","ARRAY_TYPE","Float32Array","Array","out","fromValues","x","y","z","translate","a","v","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","Math","random","PI","hypot","i","arguments","length","sqrt","MatrixSourceCamera","targetPosition","cameraPosition","distance","latitudeRadians","longitudeRadians","buffer","device","createBuffer","size","matrixRowCount","usage","GPUBufferUsage","UNIFORM","COPY_DST","fieldOfViewRadiansY","projectionMatrix","fovy","aspect","near","far","nf","f","tan","Infinity","cameraMatrix","rad","s","c","current","sin","cos","cameraPos","mat","upward","viewMatrix","eye","center","up","x0","x1","x2","y0","y1","y2","z0","z1","z2","len","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","abs","identity","projectionViewMatrix","b","a30","a31","a32","a33","b0","b1","b2","b3","data","queue","writeBuffer","cameraSourceAsGPUBuffer","MatrixSourceOrbitalCameraWithControls","cameraSource","canvas","currentCanvas","maxLatitudeRadians","lastClientX","lastClientY","onPointerMove","event","deltaX","clientX","deltaY","clientY","altKey","getNonReactively","scale","deltaY3D","deltaX3D","deltaZ3D","mutate","vector","min","max","onPointerDown","style","cursor","addEventListener","setPointerCapture","pointerId","onPointerUp","removeEventListener","assign","OutputCanvas","constructor","canvasContext","_renders","_canvasContext","addRender","render","includes","push","outputFrame","commandEncoder","target","getCurrentTexture","forEach","renderTarget","setAndNotify","runFrame","vertexSource","textureSource","shaderModule","createShaderModule","code","renderPipeline","createRenderPipeline","vertex","entryPoint","buffers","arrayStride","vertexSourceStrideBytes","attributes","shaderLocation","offset","vertexSourceXYZWOffsetBytes","format","vertexSourceUVOffsetBytes","fragment","targets","primitive","topology","depthStencil","depthWriteEnabled","depthCompare","layout","autoLayout","sampler","createSampler","magFilter","minFilter","bindGroup","textureSourceAsGPUTexture","entries","binding","resource","createView","unshift","createBindGroup","getBindGroupLayout","depthTexture","createTexture","GPUTextureUsage","RENDER_ATTACHMENT","passEncoder","beginRenderPass","colorAttachments","view","clearValue","r","g","loadOp","storeOp","depthStencilAttachment","depthClearValue","depthLoadOp","depthStoreOp","setPipeline","setVertexBuffer","vertexSourceAsGPUBuffer","setBindGroup","draw","vertexSourceCount","end","TextureSourceBitmapFromURL","imageBitmap","label","texture","width","height","TEXTURE_BINDING","copyExternalImageToTexture","source","TextureSourceBitmap","url","currentURL","console","log","cancelled","img","document","createElement","src","decode","then","createImageBitmap","newImageBitmap","set","catch","error","VertexSourceIcosahedron","VERTEX","t","vertexSourceTotalBytes","PropertyImplementation","_changeAtNextTick","_changedClockNumber","_producedClockNumber","_producerOperations","_next","_attachProducerOperation","op","_runIfNeededAt","clockNumber","_produceIfNeededAt","currentAction","_currentAction","Error","_attachDependency","readOnly","newValue","notify","change","fn","DerivedImplementation","_deps","Set","_cachedClockNumber","_fn","dep","add","depsChanged","outerAction","previousResult","_cachedResult","destroy","currentDerived","_currentClockNumber","OperationImplementation","EffectImplementation","_lastClockNumber","lastCancelFn","_lastCancelFn","ContextImplementation","_effects","_device","_commandEncoder","prop","getDemoCanvas","querySelector","getPreferredCanvasFormat","navigator","gpu","bind","renderFn","setupFn","powerPreference","requestAdapter","requestDevice","getDevice","getContext","configure","alphaMode","getCanvasContext","frameFn","unitRoot","outputs","output","createUnitRoot","requestAnimationFrame","repeatFrameWithContext","createCommandEncoder","submit","finish","runFrameWithContext","innerHTML","runDemoInner"],"sourceRoot":""}