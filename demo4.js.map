{"version":3,"file":"demo4.js","mappings":"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","sources":["webpack://beta/webpack/universalModuleDefinition","webpack://beta/webpack/bootstrap","webpack://beta/webpack/runtime/make namespace object","webpack://beta/../gpu-fu/src/Context.ts","webpack://beta/../gpu-fu/src/hooks.ts","webpack://beta/../gpu-fu/src/Unit.ts","webpack://beta/../node_modules/gl-matrix/esm/common.js","webpack://beta/../node_modules/gl-matrix/esm/mat4.js","webpack://beta/../node_modules/gl-matrix/esm/vec3.js","webpack://beta/../incubator/src/MatrixSourceOrbitalCamera.ts","webpack://beta/../incubator/src/MatrixSourceOrbitalCameraWithControls.ts","webpack://beta/../incubator/src/OutputCanvas.ts","webpack://beta/../incubator/src/RenderUV.ts","webpack://beta/../incubator/src/RenderUV.wgsl","webpack://beta/../incubator/src/TextureSourceBitmapFromURL.ts","webpack://beta/../incubator/src/TextureSourceBitmap.ts","webpack://beta/../incubator/src/VertexSourceIcosahedron.ts","webpack://beta/./src/runDemo.ts","webpack://beta/./src/demo4.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"beta\"] = factory();\n\telse\n\t\troot[\"beta\"] = factory();\n})(typeof self !== 'undefined' ? self : this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/// <reference types=\"@webgpu/types\" />\n\nimport { Unit } from \"./Unit\"\n\nexport type UpdatePropFn<T> = (currentValue: T) => T\nexport type SetPropFn<T> = (newValue: T | UpdatePropFn<T>) => void\nexport type PropStoreItem<T> = [T, SetPropFn<T>]\n\nexport type MaybeDestroyableGPUResource =\n  | undefined\n  | 0\n  | false\n  | null\n  | (GPUObjectBase & { destroy?: () => void })\nexport type StoreItemGPUResource<T extends MaybeDestroyableGPUResource> = [\n  T,\n  unknown[],\n]\n\nexport type StoreItemGPUAction = [\n  (ctx: ContextForGPUAction) => void,\n  unknown[],\n  boolean,\n]\n\nexport type StoreItemEffect = [(() => void) | undefined, unknown[]]\n\nexport class ContextImplementation<U> {\n  private _unitFn: (ctx: Context) => U\n\n  device: GPUDevice\n  commandEncoder?: GPUCommandEncoder\n\n  constructor(unitFn: (ctx: Context) => U, device: GPUDevice) {\n    this._unitFn = unitFn\n    this.device = device\n  }\n\n  ///\n  // This next section relates to private storage of state and effects.\n\n  private _store: unknown[] = []\n  private _storeIndex = 0\n  private _storeUnits: PropStoreItem<Unit<unknown> | undefined>[] = []\n  private _storeUnitsIndex = 0\n  private _storeGPUActions: StoreItemGPUAction[] = []\n  private _storeGPUActionsIndex = 0\n  private _needsUnitReRun = true\n\n  private _nextStoreIndex() {\n    const storeIndex = this._storeIndex\n    this._storeIndex = storeIndex + 1\n    return storeIndex\n  }\n\n  private _nextStoreUnitsIndex() {\n    const storeUnitsIndex = this._storeUnitsIndex\n    this._storeUnitsIndex = storeUnitsIndex + 1\n    return storeUnitsIndex\n  }\n\n  private _nextStoreGPUActionsIndex() {\n    const storeGPUActionsIndex = this._storeGPUActionsIndex\n    this._storeGPUActionsIndex = storeGPUActionsIndex + 1\n    return storeGPUActionsIndex\n  }\n\n  ///\n  // This next section has public methods related to running the unit.\n\n  runUnitIfNeeded(currentUnit: U) {\n    var otherUnitsRan = false\n    this._storeUnits.forEach(([unit, setUnit]) => {\n      const otherUnitRan = unit?._ctx.runUnitIfNeeded(unit)\n      if (otherUnitRan) otherUnitsRan = true\n    })\n\n    if (this._needsUnitReRun || otherUnitsRan) {\n      this._storeIndex = 0\n      this._storeUnitsIndex = 0\n      this._storeGPUActionsIndex = 0\n      this._needsUnitReRun = false\n      Object.assign(currentUnit, this._unitFn(this))\n      return true\n    } else {\n      return false\n    }\n  }\n\n  runGPUActionsIfNeeded(commandEncoder: GPUCommandEncoder) {\n    this._storeUnits.forEach(([unit, setUnit]) => {\n      unit?._ctx.runGPUActionsIfNeeded(commandEncoder)\n    })\n\n    this.commandEncoder = commandEncoder\n    this._storeGPUActions.forEach(([action, deps, needsRun], index) => {\n      if (needsRun) {\n        action(this as ContextForGPUAction)\n        this._storeGPUActions[index][2] = false\n      }\n    })\n    this.commandEncoder = undefined\n  }\n\n  ///\n  // This next section has public methods\n\n  _useProp<T>(initialValue: (() => T) | T): [T, SetPropFn<T>] {\n    const storeIndex = this._nextStoreIndex()\n    const existing = this._store[storeIndex] as PropStoreItem<T>\n\n    // If there is an existing prop/setProp pair, return it now.\n    if (existing) return existing\n\n    // Otherwise create, store, and return a new prop/setProp pair,\n    // using the provided initial state value or function.\n    const ctx = this\n    const store: [T, SetPropFn<T>] = [] as unknown as PropStoreItem<T>\n    store[0] =\n      typeof initialValue === \"function\"\n        ? (initialValue as () => T)()\n        : initialValue\n    store[1] = (newValueArg) => {\n      const currentValue = store[0]\n      const newValue =\n        typeof newValueArg === \"function\"\n          ? (newValueArg as UpdatePropFn<T>)(currentValue)\n          : newValueArg\n\n      if (newValue !== currentValue) {\n        store[0] = newValue\n        // This change necessitates re-running the function with new state.\n        ctx._needsUnitReRun = true\n      }\n    }\n    this._store[storeIndex] = store\n    return store\n  }\n\n  _useUnitProp<T extends Unit<unknown> | undefined>(\n    initialValue: (() => T) | T,\n  ): [T, SetPropFn<T>] {\n    const storeIndex = this._nextStoreUnitsIndex()\n    const existing = this._storeUnits[storeIndex] as unknown as PropStoreItem<T>\n\n    // If there is an existing prop/setProp pair, return it now.\n    if (existing) return existing\n\n    // Otherwise create, store, and return a new prop/setProp pair,\n    // using the provided initial state value or function.\n    const ctx = this\n    const store: [T, SetPropFn<T>] = [] as unknown as PropStoreItem<T>\n    store[0] =\n      typeof initialValue === \"function\"\n        ? (initialValue as () => T)()\n        : initialValue\n    store[1] = (newValueArg) => {\n      const currentValue = store[0]\n      const newValue =\n        typeof newValueArg === \"function\"\n          ? (newValueArg as UpdatePropFn<T>)(currentValue)\n          : newValueArg\n\n      if (newValue !== currentValue) {\n        store[0] = newValue\n        // This change necessitates re-running the function with new state.\n        ctx._needsUnitReRun = true\n      }\n    }\n    this._storeUnits[storeIndex] = store as unknown as PropStoreItem<\n      Unit<unknown> | undefined\n    >\n    return store\n  }\n\n  _useGPUResource<T extends MaybeDestroyableGPUResource>(\n    create: (ctx: ContextForGPUResource) => T,\n    deps: Array<unknown>,\n  ): T {\n    const storeIndex = this._nextStoreIndex()\n    const existing = this._store[storeIndex] as StoreItemGPUResource<T>\n\n    // If the resource has never been created, create it now.\n    if (!existing) {\n      const newResource = create(this)\n      this._store[storeIndex] = [newResource, deps]\n      return newResource\n    }\n\n    // If the resource exists, and all new dependencies have the same identity\n    // as the corresponding old dependencies, return the existing resource.\n    if (deps.every((dep, index) => dep === existing[1][index]))\n      return existing[0]\n\n    // Create the new resource and store it along with its dependencies.\n    const newResource = create(this)\n    const oldResource = existing[0]\n    existing[0] = newResource\n    existing[1] = deps\n\n    // Destroy the old resource if applicable.\n    if (oldResource && typeof oldResource.destroy === \"function\")\n      oldResource.destroy()\n\n    // Return the new resource\n    return newResource\n  }\n\n  _useGPUAction(\n    action: (ctx: ContextForGPUAction) => void,\n    deps: Array<unknown>,\n  ): void {\n    const storeIndex = this._nextStoreGPUActionsIndex()\n    const existing = this._storeGPUActions[storeIndex] as StoreItemGPUAction\n\n    // If the action has never been stored, store it now and return early.\n    if (!existing) {\n      this._storeGPUActions[storeIndex] = [action, deps, true]\n      return\n    }\n\n    // If the action is known, and all new dependencies have the same identity\n    // as the corresponding old dependencies, return without doing anything.\n    if (deps.every((dep, index) => dep === existing[1][index])) return\n\n    // Update the action function along with its dependencies,\n    // and mark it as being \"dirty\" (i.e. in need of being executed again).\n    existing[0] = action\n    existing[1] = deps\n    existing[2] = true\n    return\n  }\n\n  _useEffect(\n    effect: (ctx: ContextEmpty) => (() => void) | undefined,\n    deps: Array<unknown>,\n  ) {\n    const storeIndex = this._nextStoreIndex()\n    const existing = this._store[storeIndex] as StoreItemEffect\n\n    // If the effect has never been stored, store it now after executing.\n    if (!existing) {\n      const cancelFn = effect({})\n      this._store[storeIndex] = [cancelFn, deps]\n      return\n    }\n\n    // If the effect is known, and all new dependencies have the same identity\n    // as the corresponding old dependencies, return without doing anything.\n    if (deps.every((dep, index) => dep === existing[1][index])) return\n\n    // Call the existing cancel function if there is one.\n    if (existing[0]) existing[0]()\n\n    // Execute the effect function to get the new cancel function, then\n    // store it along with the new dependency identities.\n    existing[0] = effect({})\n    existing[1] = deps\n    return\n  }\n}\n\nexport type Context = Pick<\n  ContextImplementation<unknown>,\n  // In the main function context, hooks are available.\n  | \"device\"\n  | \"_useProp\"\n  | \"_useUnitProp\"\n  | \"_useGPUResource\"\n  | \"_useGPUAction\"\n  | \"_useEffect\"\n>\n\nexport type ContextForGPUResource = Pick<\n  ContextImplementation<unknown>,\n  // No hooks are available.\n  \"device\"\n>\n\nexport type ContextForGPUAction = Pick<\n  ContextImplementation<unknown>,\n  // No hooks are available, but a command encoder is available.\n  \"device\"\n> & { commandEncoder: GPUCommandEncoder }\n\nexport type ContextEmpty = {}\n","import {\n  Context,\n  ContextForGPUResource,\n  ContextForGPUAction,\n  SetPropFn,\n  MaybeDestroyableGPUResource,\n  ContextEmpty,\n} from \"./Context\"\nimport { Unit, UnitFn, NotAUnit, unit } from \"./Unit\"\n\nexport function useProp<T>(\n  ctx: Context,\n): [NotAUnit<T> | undefined, SetPropFn<NotAUnit<T> | undefined>] {\n  return ctx._useProp<T | undefined>(undefined) as [\n    NotAUnit<T> | undefined,\n    SetPropFn<NotAUnit<T> | undefined>,\n  ]\n}\n\nexport function useInitializedProp<T>(\n  ctx: Context,\n  initialValue: (() => NotAUnit<T>) | NotAUnit<T>,\n): [NotAUnit<T>, SetPropFn<NotAUnit<T>>] {\n  return ctx._useProp<NotAUnit<T>>(initialValue)\n}\n\nexport function useUnitProp<U>(\n  ctx: Context,\n): [Unit<U> | undefined, SetPropFn<Unit<U> | undefined>] {\n  return ctx._useUnitProp<Unit<U> | undefined>(undefined)\n}\n\nexport function useUnit<U>(ctx: Context, unitFn: UnitFn<U>): Unit<U> {\n  return ctx._useUnitProp<Unit<U>>(() => unit(ctx.device, unitFn))[0]\n}\n\nexport function useGPUResource<T extends MaybeDestroyableGPUResource>(\n  ctx: Context,\n  create: (ctx: ContextForGPUResource) => T,\n  deps: Array<unknown>,\n): T {\n  return ctx._useGPUResource<T>(create, deps)\n}\n\nexport function useGPUAction(\n  ctx: Context,\n  action: (ctx: ContextForGPUAction) => void,\n  deps: Array<unknown>,\n): void {\n  ctx._useGPUAction(action, deps)\n}\n\nexport function useEffect<T>(\n  ctx: Context,\n  effect: (ctx: ContextEmpty) => (() => void) | undefined,\n  deps: Array<unknown>,\n) {\n  return ctx._useEffect(effect, deps)\n}\n\nexport function useAsyncPropSetter<T>(\n  ctx: Context,\n  setPropFn: SetPropFn<T>,\n  effect: (ctx: ContextEmpty) => Promise<T>,\n  deps: Array<unknown>,\n) {\n  return ctx._useEffect((ctx) => {\n    var cancelled = false\n    effect(ctx)\n      .then((value) => cancelled || setPropFn(value))\n      .catch((error) => {\n        console.error(error)\n        cancelled = true\n      })\n    return () => {\n      cancelled = true\n    }\n  }, deps)\n}\n","import { Context, ContextImplementation } from \"./Context\"\n\nexport type UnitAny = {\n  _ctx: Context\n}\n\nexport type Unit<U> = U & {\n  _ctx: ContextImplementation<U>\n}\n\nexport type UnitRoot<U> = U & {\n  _ctx: ContextImplementation<U>\n  runFrame: (commandEncoder: GPUCommandEncoder) => void\n}\n\nexport type UnitFn<U> = (ctx: Context) => U\n\nexport type NotAUnit<T> = T extends UnitAny ? never : T\n\nexport function unit<U>(\n  device: GPUDevice,\n  unitFn: (ctx: Context) => U,\n): Unit<U> {\n  const ctx = new ContextImplementation<U>(unitFn, device)\n  return { ...unitFn(ctx), _ctx: ctx }\n}\n\nfunction unitFrame<U>(unit: Unit<U>, commandEncoder: GPUCommandEncoder) {\n  const ctx = unit._ctx\n  ctx.runUnitIfNeeded(unit)\n  ctx.runGPUActionsIfNeeded(commandEncoder)\n}\n\nexport function createUnitRoot<U>(\n  device: GPUDevice,\n  unitFn: (ctx: Context) => U,\n): UnitRoot<U> {\n  const ctx = new ContextImplementation<U>(unitFn, device)\n  const unitRoot = { ...unitFn(ctx), _ctx: ctx } as UnitRoot<U>\n  unitRoot.runFrame = (commandEncoder: GPUCommandEncoder) =>\n    unitFrame(unitRoot, commandEncoder)\n  return unitRoot\n}\n","/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import {\n  Context,\n  useGPUAction,\n  useGPUResource,\n  useInitializedProp,\n} from \"@gpu-fu/gpu-fu\"\nimport { mat4, vec3 } from \"gl-matrix\"\n\nconst matrixRowCount = 4\nconst matrixColCount = 4\nconst matrixTotalBytes = matrixRowCount * matrixColCount * 4\n\nexport default function MatrixSourceCamera(ctx: Context) {\n  const [targetX, setTargetX] = useInitializedProp(ctx, 0)\n  const [targetY, setTargetY] = useInitializedProp(ctx, 0)\n  const [targetZ, setTargetZ] = useInitializedProp(ctx, 0)\n\n  const [cameraDistance, setCameraDistance] = useInitializedProp(ctx, 5)\n  const [cameraLatitudeRadians, setCameraLatitudeRadians] = useInitializedProp(\n    ctx,\n    0,\n  )\n  const [cameraLongitudeRadians, setCameraLongitudeRadians] =\n    useInitializedProp(ctx, 0)\n\n  const buffer = useGPUResource(\n    ctx,\n    (ctx) =>\n      ctx.device.createBuffer({\n        size: matrixTotalBytes,\n        usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n      }),\n    [],\n  )\n\n  useGPUAction(\n    ctx,\n    (ctx) => {\n      const aspectRatio = 1 // TODO: adapt to canvas client size somehow?\n      const fieldOfViewRadiansY = degreesToRadians(60) // TODO: configurable?\n      const zNear = 1 // TODO: configurable?\n      const zFar = 2000 // TODO: configurable?\n      const projectionMatrix = mat4.create()\n      mat4.perspective(\n        projectionMatrix,\n        fieldOfViewRadiansY,\n        aspectRatio,\n        zNear,\n        zFar,\n      )\n\n      const targetPos = vec3.fromValues(targetX, targetY, targetZ)\n      // var cameraPos = vec3.fromValues(0, 0, cameraDistance)\n      // vec3.rotateY(came)\n\n      const cameraMatrix = mat4.create()\n      mat4.translate(cameraMatrix, cameraMatrix, targetPos)\n      mat4.rotateY(cameraMatrix, cameraMatrix, cameraLongitudeRadians)\n      mat4.rotateX(cameraMatrix, cameraMatrix, cameraLatitudeRadians)\n      mat4.translate(\n        cameraMatrix,\n        cameraMatrix,\n        vec3.fromValues(0, 0, cameraDistance),\n      )\n\n      const cameraPos = vec3.create()\n      mat4.getTranslation(cameraPos, cameraMatrix)\n\n      const upward = vec3.fromValues(0, 1, 0)\n\n      const viewMatrix = mat4.create() as Float32Array\n      mat4.lookAt(viewMatrix, cameraPos, targetPos, upward)\n\n      const projectionViewMatrix = mat4.create()\n      mat4.multiply(projectionViewMatrix, projectionMatrix, viewMatrix)\n\n      const data = projectionViewMatrix as Float32Array\n\n      ctx.device.queue.writeBuffer(buffer, 0, data, 0, data.length)\n    },\n    [\n      buffer,\n      targetX,\n      targetY,\n      targetZ,\n      cameraDistance,\n      cameraLatitudeRadians,\n      cameraLongitudeRadians,\n    ],\n  )\n\n  return {\n    targetX,\n    targetY,\n    targetZ,\n    cameraDistance,\n    cameraLatitudeRadians,\n    cameraLongitudeRadians,\n    setTargetX,\n    setTargetY,\n    setTargetZ,\n    setCameraDistance,\n    setCameraLatitudeRadians,\n    setCameraLongitudeRadians,\n    cameraSourceAsGPUBuffer: buffer,\n  }\n}\n\nfunction degreesToRadians(degrees: number) {\n  return (degrees * Math.PI) / 180\n}\n","import { Context, useProp, useEffect } from \"@gpu-fu/gpu-fu\"\nimport MatrixSourceOrbitalCamera from \"./MatrixSourceOrbitalCamera\"\n\nexport default function MatrixSourceOrbitalCameraWithControls(ctx: Context) {\n  const cameraSource = MatrixSourceOrbitalCamera(ctx)\n  const [canvas, setCanvas] = useProp<HTMLCanvasElement>(ctx)\n\n  useEffect(\n    ctx,\n    (ctx) => {\n      if (!canvas) return () => {}\n\n      const maxLatitudeRadians = Math.PI / 2 - 0.05\n      var lastClientX = 0\n      var lastClientY = 0\n\n      const onPointerMove = (event: PointerEvent) => {\n        const deltaX = event.clientX - lastClientX\n        const deltaY = event.clientY - lastClientY\n        lastClientX = event.clientX\n        lastClientY = event.clientY\n\n        if (event.altKey) {\n          const longitudeRadians = cameraSource.cameraLongitudeRadians\n          const latitudeRadians = cameraSource.cameraLatitudeRadians\n\n          // The 2D X axis is always perpendicular to the 3D Y axis, so changes\n          // along the 2D X axis never affect the 3D Y axis.\n          // However, changes along the 2D Y axis can affect all three axes.\n          const scale = 0.02 // TODO: compute based on current cameraDistance, canvas size, field of view, etc.\n          const deltaY3D = scale * deltaY * Math.cos(latitudeRadians)\n          const deltaX3D =\n            scale *\n            (deltaX * -Math.cos(longitudeRadians) +\n              deltaY * Math.sin(latitudeRadians) * Math.sin(longitudeRadians))\n          const deltaZ3D =\n            scale *\n            (deltaX * Math.sin(longitudeRadians) +\n              deltaY * Math.sin(latitudeRadians) * Math.cos(longitudeRadians))\n          cameraSource.setTargetX((x) => x + deltaX3D)\n          cameraSource.setTargetY((y) => y + deltaY3D)\n          cameraSource.setTargetZ((z) => z + deltaZ3D)\n        } else {\n          cameraSource.setCameraLongitudeRadians((x) => x - deltaX * 0.01)\n          cameraSource.setCameraLatitudeRadians((y) =>\n            Math.min(\n              maxLatitudeRadians,\n              Math.max(-maxLatitudeRadians, y - deltaY * 0.01),\n            ),\n          )\n        }\n      }\n\n      const onPointerDown = (event: PointerEvent) => {\n        canvas.style.cursor = \"grabbing\"\n\n        lastClientX = event.clientX\n        lastClientY = event.clientY\n\n        canvas.addEventListener(\"pointermove\", onPointerMove)\n        canvas.setPointerCapture(event.pointerId)\n      }\n\n      const onPointerUp = (event: PointerEvent) => {\n        canvas.style.cursor = \"grab\"\n\n        canvas.removeEventListener(\"pointermove\", onPointerMove)\n      }\n\n      canvas.style.cursor = \"grab\"\n\n      canvas.addEventListener(\"pointerdown\", onPointerDown)\n      canvas.addEventListener(\"pointerup\", onPointerUp)\n\n      return () => {\n        canvas.style.cursor = \"auto\"\n\n        canvas.removeEventListener(\"pointerdown\", onPointerDown)\n        canvas.removeEventListener(\"pointerup\", onPointerUp)\n        canvas.removeEventListener(\"pointermove\", onPointerMove)\n      }\n    },\n    [canvas],\n  )\n\n  return Object.assign(cameraSource, { setCanvas })\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { Render, UnitRoot } from \"@gpu-fu/gpu-fu\"\n\nexport default class OutputCanvas {\n  _canvasContext: GPUCanvasContext\n  _renders: UnitRoot<Render>[] = []\n\n  constructor(canvasContext: GPUCanvasContext) {\n    this._canvasContext = canvasContext\n  }\n\n  addRender(render: UnitRoot<Render>) {\n    if (this._renders.includes(render)) return\n    this._renders.push(render)\n  }\n\n  outputFrame(commandEncoder: GPUCommandEncoder) {\n    const target = this._canvasContext.getCurrentTexture()\n    this._renders.forEach((render) => {\n      render.setRenderTarget(target)\n      render.runFrame(commandEncoder)\n    })\n  }\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport {\n  Context,\n  MatrixSource,\n  VertexSource,\n  TextureSource,\n  autoLayout,\n  useProp,\n  useUnitProp,\n  useGPUResource,\n  useGPUAction,\n} from \"@gpu-fu/gpu-fu\"\n\nimport shaderModuleCode from \"./RenderUV.wgsl\"\n\nexport default function RenderUV(ctx: Context) {\n  const [cameraSource, setCameraMatrixSource] = useUnitProp<MatrixSource>(ctx)\n  const [vertexSource, setVertexSource] = useUnitProp<VertexSource>(ctx)\n  const [textureSource, setTextureSource] = useUnitProp<TextureSource>(ctx)\n  const [renderTarget, setRenderTarget] = useProp<GPUTexture>(ctx)\n\n  const cameraSourceAsGPUBuffer = cameraSource?.cameraSourceAsGPUBuffer\n  const textureSourceAsGPUTexture = textureSource?.textureSourceAsGPUTexture\n\n  const shaderModule = useGPUResource(\n    ctx,\n    (ctx) =>\n      ctx.device.createShaderModule({\n        code: shaderModuleCode,\n      }),\n    [],\n  )\n\n  const renderPipeline = useGPUResource(\n    ctx,\n    (ctx) =>\n      vertexSource &&\n      ctx.device.createRenderPipeline({\n        vertex: {\n          module: shaderModule,\n          entryPoint: cameraSourceAsGPUBuffer\n            ? \"vertexRenderUVWithMatrix\"\n            : \"vertexRenderUV\",\n          buffers: [\n            {\n              arrayStride: vertexSource.vertexSourceStrideBytes,\n              attributes: [\n                {\n                  shaderLocation: 0,\n                  offset: vertexSource.vertexSourceXYZWOffsetBytes,\n                  format: \"float32x4\" as GPUVertexFormat,\n                },\n                {\n                  shaderLocation: 1,\n                  offset: vertexSource.vertexSourceUVOffsetBytes,\n                  format: \"float32x2\" as GPUVertexFormat,\n                },\n              ],\n            },\n          ],\n        },\n        fragment: {\n          module: shaderModule,\n          entryPoint: \"fragmentRenderUV\",\n          targets: [\n            {\n              // TODO: Remove this hard-coded value - get the real one somehow.\n              format: \"rgba8unorm\" as GPUTextureFormat,\n            },\n          ],\n        },\n        primitive: {\n          topology: \"triangle-list\",\n          // TODO: Configurable `cullMode`\n        },\n        depthStencil: {\n          depthWriteEnabled: true,\n          depthCompare: \"less\",\n          format: \"depth24plus\",\n        },\n        layout: autoLayout(),\n      }),\n    [shaderModule, vertexSource],\n  )\n\n  const sampler = useGPUResource(\n    ctx,\n    (ctx) =>\n      ctx.device.createSampler({\n        magFilter: \"linear\",\n        minFilter: \"linear\",\n      }),\n    [],\n  )\n\n  const bindGroup = useGPUResource(\n    ctx,\n    (ctx) => {\n      if (!renderPipeline) return\n      if (!textureSourceAsGPUTexture) return\n\n      const entries: GPUBindGroupEntry[] = [\n        {\n          binding: 1,\n          resource: sampler,\n        },\n        {\n          binding: 2,\n          resource: textureSourceAsGPUTexture.createView(),\n        },\n      ]\n      if (cameraSourceAsGPUBuffer)\n        entries.unshift({\n          binding: 0,\n          resource: { buffer: cameraSourceAsGPUBuffer },\n        })\n\n      return ctx.device.createBindGroup({\n        layout: renderPipeline.getBindGroupLayout(0),\n        entries,\n      })\n    },\n\n    [\n      renderPipeline,\n      cameraSourceAsGPUBuffer,\n      textureSourceAsGPUTexture,\n      sampler,\n    ],\n  )\n\n  const depthTexture = useGPUResource(\n    ctx,\n    (ctx) =>\n      ctx.device.createTexture({\n        size: [300, 300], // TODO: somehow get from canvas client size\n        format: \"depth24plus\",\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      }),\n    [],\n  )\n\n  useGPUAction(\n    ctx,\n    (ctx) => {\n      if (!textureSource) return\n      if (!vertexSource) return\n      if (!renderPipeline) return\n      if (!bindGroup) return\n      if (!renderTarget) return\n\n      const passEncoder = ctx.commandEncoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: renderTarget.createView(),\n            clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n            loadOp: \"clear\" as GPULoadOp,\n            storeOp: \"store\" as GPUStoreOp,\n          },\n        ],\n        depthStencilAttachment: {\n          view: depthTexture.createView(),\n          depthClearValue: 1.0,\n          depthLoadOp: \"clear\" as GPULoadOp,\n          depthStoreOp: \"store\" as GPUStoreOp,\n        },\n      })\n      passEncoder.setPipeline(renderPipeline)\n      passEncoder.setVertexBuffer(0, vertexSource.vertexSourceAsGPUBuffer)\n      passEncoder.setBindGroup(0, bindGroup)\n      passEncoder.draw(vertexSource.vertexSourceCount, 1, 0, 0)\n      passEncoder.end()\n    },\n    [textureSource, vertexSource, renderPipeline, bindGroup, renderTarget],\n  )\n\n  return {\n    setCameraMatrixSource,\n    setTextureSource,\n    setVertexSource,\n    setRenderTarget,\n  }\n}\n","export default \"@group(0) @binding(0) var<uniform> use_matrix: mat4x4<f32>;\\n@group(0) @binding(1) var use_sampler: sampler;\\n@group(0) @binding(2) var use_texture: texture_2d<f32>;\\n\\nstruct VertexOutput {\\n  @builtin(position) pos: vec4<f32>;\\n  @location(0) uv: vec2<f32>;\\n}\\n\\n@stage(vertex)\\nfn vertexRenderUV(\\n  @location(0) pos_in: vec4<f32>,\\n  @location(1) uv_in: vec2<f32>,\\n) ->\\n  VertexOutput\\n{\\n  var out: VertexOutput;\\n  out.pos = pos_in;\\n  out.uv = uv_in;\\n  return out;\\n}\\n\\n@stage(vertex)\\nfn vertexRenderUVWithMatrix(\\n  @location(0) pos_in: vec4<f32>,\\n  @location(1) uv_in: vec2<f32>,\\n) ->\\n  VertexOutput\\n{\\n  var out: VertexOutput;\\n  out.pos = use_matrix * pos_in;\\n  out.uv = uv_in;\\n  return out;\\n}\\n\\n@stage(fragment)\\nfn fragmentRenderUV(\\n  @location(0) uv_in : vec2<f32>\\n) ->\\n  @location(0) vec4<f32>\\n{\\n  return textureSample(use_texture, use_sampler, uv_in.xy);\\n}\\n\";","import { Context, useAsyncPropSetter, useProp } from \"@gpu-fu/gpu-fu\"\nimport TextureSourceBitmap from \"./TextureSourceBitmap\"\n\nexport default function TextureSourceBitmapFromURL(ctx: Context) {\n  const { setImageBitmap, setLabel, textureSourceAsGPUTexture } =\n    TextureSourceBitmap(ctx)\n\n  const [url, setURL] = useProp<string>(ctx)\n  setLabel(url)\n\n  useAsyncPropSetter(\n    ctx,\n    setImageBitmap,\n    async (ctx) => {\n      if (!url) return\n      const img = document.createElement(\"img\")\n      img.src = url\n      await img.decode()\n      const imageBitmap = await createImageBitmap(img)\n      return imageBitmap\n    },\n    [url],\n  )\n\n  return {\n    setURL,\n    textureSourceAsGPUTexture,\n  }\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { Context, useProp, useGPUResource, useGPUAction } from \"@gpu-fu/gpu-fu\"\n\nexport default function TextureSourceBitmap(ctx: Context) {\n  const [imageBitmap, setImageBitmap] = useProp<ImageBitmap>(ctx)\n  const [label, setLabel] = useProp<string>(ctx)\n\n  const textureWidth = imageBitmap?.width ?? 16 // TODO: remove fallback values\n  const textureHeight = imageBitmap?.height ?? 16 // TODO: remove fallback values\n\n  const texture = useGPUResource(\n    ctx,\n    (ctx) =>\n      ctx.device.createTexture({\n        label,\n        size: [textureWidth, textureHeight, 1],\n        format: \"rgba8unorm\",\n        usage:\n          GPUTextureUsage.TEXTURE_BINDING |\n          GPUTextureUsage.COPY_DST |\n          GPUTextureUsage.RENDER_ATTACHMENT,\n      }),\n    [textureWidth, textureHeight, label],\n  )\n\n  useGPUAction(\n    ctx,\n    (ctx) => {\n      if (!imageBitmap) return\n      if (!texture) return\n\n      ctx.device.queue.copyExternalImageToTexture(\n        { source: imageBitmap },\n        { texture: texture },\n        [imageBitmap.width, imageBitmap.height],\n      )\n    },\n    [imageBitmap, texture],\n  )\n\n  return {\n    setImageBitmap,\n    setLabel,\n    textureSourceAsGPUTexture: texture,\n  }\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { Context, useGPUResource, useGPUAction } from \"@gpu-fu/gpu-fu\"\n\nconst vertexSourceCount = 60\nconst vertexSourceXYZWOffsetBytes = 0\nconst vertexSourceUVOffsetBytes = 4 * 4\nconst vertexSourceStrideBytes = 6 * 4\nconst vertexSourceTotalBytes = vertexSourceCount * vertexSourceStrideBytes\n\nexport default function VertexSourceIcosahedron(ctx: Context) {\n  const buffer = useGPUResource(\n    ctx,\n    (ctx) =>\n      ctx.device.createBuffer({\n        size: vertexSourceTotalBytes,\n        usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\n      }),\n    [],\n  )\n\n  useGPUAction(\n    ctx,\n    (ctx) => {\n      if (!buffer) return\n\n      var uMin = 0\n      var uMax = 1\n      var vMin = 0\n      var vMax = 1\n\n      const t = (1 + Math.sqrt(5)) / 2\n\n      // prettier-ignore\n      const data = new Float32Array([\n      // (x, y, z, w),  (u, v)\n          t, 1, 0, 1, uMax, vMin, // v0\n          0, t, 1, 1, uMax, vMax, // v8\n          1, 0, t, 1, uMin, vMax, // v4\n\n          t, 1, 0, 1, uMax, vMin, // v0\n          1, 0, t, 1, uMax, vMax, // v4\n          t,-1, 0, 1, uMin, vMax, // v2\n\n          t, 1, 0, 1, uMax, vMin, // v0\n          t,-1, 0, 1, uMax, vMax, // v2\n          1, 0,-t, 1, uMin, vMax, // v5\n\n          t, 1, 0, 1, uMax, vMin, // v0\n          1, 0,-t, 1, uMax, vMax, // v5\n          0, t,-1, 1, uMin, vMax, // v10\n\n          t, 1, 0, 1, uMax, vMin, // v0\n          0, t,-1, 1, uMax, vMax, // v10\n          0, t, 1, 1, uMin, vMax, // v8\n\n         -1, 0, t, 1, uMax, vMin, // v1\n          1, 0, t, 1, uMax, vMax, // v4\n          0, t, 1, 1, uMin, vMax, // v8\n\n          0,-t, 1, 1, uMax, vMin, // v6\n          t,-1, 0, 1, uMax, vMax, // v2\n          1, 0, t, 1, uMin, vMax, // v4\n\n          0,-t,-1, 1, uMax, vMin, // v9\n          1, 0,-t, 1, uMax, vMax, // v5\n          t,-1, 0, 1, uMin, vMax, // v2\n\n         -1, 0,-t, 1, uMax, vMin, // v11\n          0, t,-1, 1, uMax, vMax, // v10\n          1, 0,-t, 1, uMin, vMax, // v5\n\n         -t, 1, 0, 1, uMax, vMin, // v7\n          0, t, 1, 1, uMax, vMax, // v8\n          0, t,-1, 1, uMin, vMax, // v10\n\n          1, 0, t, 1, uMax, vMin, // v4\n         -1, 0, t, 1, uMax, vMax, // v1\n          0,-t, 1, 1, uMin, vMax, // v6\n\n          t,-1, 0, 1, uMax, vMin, // v2\n          0,-t, 1, 1, uMax, vMax, // v6\n          0,-t,-1, 1, uMin, vMax, // v9\n\n          1, 0,-t, 1, uMax, vMin, // v5\n          0,-t,-1, 1, uMax, vMax, // v9\n         -1, 0,-t, 1, uMin, vMax, // v11\n\n          0, t,-1, 1, uMax, vMin, // v10\n         -1, 0,-t, 1, uMax, vMax, // v11\n         -t, 1, 0, 1, uMin, vMax, // v7\n\n          0, t, 1, 1, uMax, vMin, // v8\n         -t, 1, 0, 1, uMax, vMax, // v7\n         -1, 0, t, 1, uMin, vMax, // v1\n\n         -t,-1, 0, 1, uMax, vMin, // v3\n          0,-t, 1, 1, uMax, vMax, // v6\n         -1, 0, t, 1, uMin, vMax, // v1\n\n         -t,-1, 0, 1, uMax, vMin, // v3\n          0,-t,-1, 1, uMax, vMax, // v9\n          0,-t, 1, 1, uMin, vMax, // v6\n\n         -t,-1, 0, 1, uMax, vMin, // v3\n         -1, 0,-t, 1, uMax, vMax, // v11\n          0,-t,-1, 1, uMin, vMax, // v9\n\n         -t,-1, 0, 1, uMax, vMin, // v3\n         -t, 1, 0, 1, uMax, vMax, // v7\n         -1, 0,-t, 1, uMin, vMax, // v11\n\n         -t,-1, 0, 1, uMax, vMin, // v3\n         -1, 0, t, 1, uMax, vMax, // v1\n         -t, 1, 0, 1, uMin, vMax, // v7\n      ])\n\n      ctx.device.queue.writeBuffer(buffer, 0, data, 0, data.length)\n    },\n    [buffer],\n  )\n\n  return {\n    vertexSourceCount,\n    vertexSourceTotalBytes,\n    vertexSourceStrideBytes,\n    vertexSourceXYZWOffsetBytes,\n    vertexSourceUVOffsetBytes,\n    vertexSourceAsGPUBuffer: buffer,\n  }\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { UnitFn, createUnitRoot, Render } from \"@gpu-fu/gpu-fu\"\nimport { OutputCanvas } from \"@gpu-fu/incubator\"\n\ntype FrameFn = (commandEncoder: GPUCommandEncoder) => void\ntype SetupFn = (device: GPUDevice, canvasContext: GPUCanvasContext) => FrameFn\n\nexport default function runDemo(renderFn: UnitFn<Render>) {\n  runDemoInner((device, canvasContext) => {\n    const render = createUnitRoot(device, renderFn)\n\n    const output = new OutputCanvas(canvasContext)\n    output.addRender(render)\n\n    return function frame(commandEncoder) {\n      output.outputFrame(commandEncoder)\n    }\n  })\n}\n\nfunction runDemoInner(setupFn: SetupFn) {\n  ;(async () => {\n    const device = await getDevice()\n    const canvasContext = await getCanvasContext(getDemoCanvas(), device)\n\n    const frameFn = setupFn(device, canvasContext)\n\n    function repeatFrameWithContext() {\n      runFrameWithContext(device, frameFn)\n      requestAnimationFrame(repeatFrameWithContext)\n    }\n    requestAnimationFrame(repeatFrameWithContext)\n  })().catch((error) => {\n    document.querySelector(\"body\")!.innerHTML = error\n    console.error(error)\n  })\n}\n\nasync function getDevice(\n  powerPreference: GPUPowerPreference = \"high-performance\",\n): Promise<GPUDevice> {\n  if (!navigator.gpu)\n    throw new Error(\"Your browser doesn't have WebGPU enabled!\")\n\n  const gpu = await navigator.gpu.requestAdapter({ powerPreference })\n  if (!gpu) throw new Error(\"Failed to get the GPU adapter!\")\n\n  return gpu.requestDevice()\n}\n\nexport function getDemoCanvas(): HTMLCanvasElement {\n  const canvas = document.querySelector(\n    \"canvas.main\",\n  ) as HTMLCanvasElement | null\n  if (!canvas) throw new Error(\"The main canvas wasn't found in the HTML!\")\n\n  return canvas\n}\n\nasync function getCanvasContext(\n  canvas: HTMLCanvasElement,\n  device: GPUDevice,\n): Promise<GPUCanvasContext> {\n  const canvasContext = canvas.getContext(\"webgpu\") as GPUCanvasContext | null\n  if (!canvasContext) throw new Error(\"Failed to get a WebGPU canvas context!\")\n\n  canvasContext.configure({\n    device,\n    format: getPreferredCanvasFormat(),\n    alphaMode: \"opaque\",\n  })\n\n  return canvasContext\n}\n\nfunction getPreferredCanvasFormat() {\n  // Some browsers throw an \"Illegal invocation\" error if we don't bind.\n  const getPreferredCanvasFormat =\n    navigator.gpu?.getPreferredCanvasFormat?.bind(navigator.gpu)\n  if (getPreferredCanvasFormat) return getPreferredCanvasFormat()\n\n  // Hard-coded default for browsers that don't implement this function yet.\n  return \"rgba8unorm\"\n}\n\nfunction runFrameWithContext(device: GPUDevice, frameFn: FrameFn) {\n  const commandEncoder = device.createCommandEncoder()\n  frameFn(commandEncoder)\n  device.queue.submit([commandEncoder.finish()])\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { useUnit } from \"@gpu-fu/gpu-fu\"\nimport {\n  MatrixSourceOrbitalCameraWithControls,\n  RenderUV,\n  TextureSourceBitmapFromURL,\n  VertexSourceIcosahedron,\n} from \"@gpu-fu/incubator\"\n\nimport runDemo, { getDemoCanvas } from \"./runDemo\"\nrunDemo((ctx) => {\n  const cameraSource = useUnit(ctx, MatrixSourceOrbitalCameraWithControls)\n  const vertexSource = useUnit(ctx, VertexSourceIcosahedron)\n  const textureSource = useUnit(ctx, TextureSourceBitmapFromURL)\n  textureSource.setURL(\"./assets/fireweed.jpg\")\n\n  cameraSource.setCanvas(getDemoCanvas())\n\n  const { setRenderTarget, ...render } = useUnit(ctx, RenderUV)\n  render.setCameraMatrixSource(cameraSource)\n  render.setTextureSource(textureSource)\n  render.setVertexSource(vertexSource)\n\n  return { setRenderTarget }\n})\n"],"names":["root","factory","exports","module","define","amd","self","this","Symbol","toStringTag","Object","defineProperty","value","unitFn","device","_store","_storeIndex","_storeUnits","_storeUnitsIndex","_storeGPUActions","_storeGPUActionsIndex","_needsUnitReRun","_unitFn","_nextStoreIndex","storeIndex","_nextStoreUnitsIndex","storeUnitsIndex","_nextStoreGPUActionsIndex","storeGPUActionsIndex","runUnitIfNeeded","currentUnit","otherUnitsRan","forEach","unit","_ctx","assign","runGPUActionsIfNeeded","commandEncoder","index","action","undefined","_useProp","initialValue","existing","ctx","store","newValueArg","currentValue","newValue","_useUnitProp","_useGPUResource","create","deps","every","dep","newResource","oldResource","destroy","_useGPUAction","_useEffect","effect","cancelFn","useInitializedProp","ContextImplementation","EPSILON","ARRAY_TYPE","Float32Array","Array","out","translate","a","v","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","x","y","z","Math","random","PI","hypot","i","arguments","length","sqrt","MatrixSourceCamera","targetX","setTargetX","targetY","setTargetY","targetZ","setTargetZ","cameraDistance","setCameraDistance","cameraLatitudeRadians","setCameraLatitudeRadians","cameraLongitudeRadians","setCameraLongitudeRadians","buffer","createBuffer","size","matrixRowCount","usage","GPUBufferUsage","UNIFORM","COPY_DST","fieldOfViewRadiansY","projectionMatrix","fovy","aspect","near","far","nf","f","tan","Infinity","rad","s","c","targetPos","cameraMatrix","sin","cos","cameraPos","mat","upward","viewMatrix","eye","center","up","x0","x1","x2","y0","y1","y2","z0","z1","z2","len","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","abs","identity","projectionViewMatrix","b","a30","a31","a32","a33","b0","b1","b2","b3","data","queue","writeBuffer","cameraSourceAsGPUBuffer","MatrixSourceOrbitalCameraWithControls","cameraSource","canvas","setCanvas","maxLatitudeRadians","lastClientX","lastClientY","onPointerMove","event","deltaX","clientX","deltaY","clientY","altKey","longitudeRadians","latitudeRadians","scale","min","max","onPointerDown","style","cursor","addEventListener","setPointerCapture","pointerId","onPointerUp","removeEventListener","useEffect","canvasContext","_renders","_canvasContext","addRender","render","includes","push","outputFrame","target","getCurrentTexture","setRenderTarget","runFrame","setCameraMatrixSource","vertexSource","setVertexSource","textureSource","setTextureSource","renderTarget","textureSourceAsGPUTexture","shaderModule","createShaderModule","code","renderPipeline","createRenderPipeline","vertex","entryPoint","buffers","arrayStride","vertexSourceStrideBytes","attributes","shaderLocation","offset","vertexSourceXYZWOffsetBytes","format","vertexSourceUVOffsetBytes","fragment","targets","primitive","topology","depthStencil","depthWriteEnabled","depthCompare","layout","sampler","createSampler","magFilter","minFilter","bindGroup","entries","binding","resource","createView","unshift","createBindGroup","getBindGroupLayout","depthTexture","createTexture","GPUTextureUsage","RENDER_ATTACHMENT","passEncoder","beginRenderPass","colorAttachments","view","clearValue","r","g","loadOp","storeOp","depthStencilAttachment","depthClearValue","depthLoadOp","depthStoreOp","setPipeline","setVertexBuffer","vertexSourceAsGPUBuffer","setBindGroup","draw","vertexSourceCount","end","TextureSourceBitmapFromURL","imageBitmap","setImageBitmap","label","setLabel","textureWidth","width","textureHeight","height","texture","TEXTURE_BINDING","copyExternalImageToTexture","source","TextureSourceBitmap","url","setURL","setPropFn","cancelled","img","document","createElement","src","decode","createImageBitmap","then","error","console","useAsyncPropSetter","VertexSourceIcosahedron","VERTEX","t","vertexSourceTotalBytes","getDevice","powerPreference","navigator","gpu","Error","requestAdapter","requestDevice","getDemoCanvas","querySelector","getCanvasContext","getContext","configure","getPreferredCanvasFormat","alphaMode","bind","renderFn","setupFn","repeatFrameWithContext","frameFn","createCommandEncoder","submit","finish","runFrameWithContext","requestAnimationFrame","unitRoot","unitFrame","createUnitRoot","output","innerHTML","runDemoInner"],"sourceRoot":""}