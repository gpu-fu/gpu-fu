{"version":3,"file":"demo1.js","mappings":"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","sources":["webpack://beta/webpack/universalModuleDefinition","webpack://beta/webpack/bootstrap","webpack://beta/webpack/runtime/make namespace object","webpack://beta/../gpu-fu/src/Property.ts","webpack://beta/../gpu-fu/src/Context.ts","webpack://beta/../incubator/src/OutputCanvas.ts","webpack://beta/./src/runDemo.ts","webpack://beta/./src/demo1.wgsl","webpack://beta/./src/demo1.ts","webpack://beta/../gpu-fu/src/hooks.ts","webpack://beta/../gpu-fu/src/Unit.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"beta\"] = factory();\n\telse\n\t\troot[\"beta\"] = factory();\n})(typeof self !== 'undefined' ? self : this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { ContextImplementation } from \"./Context\"\n\nexport type Property<T> = Pick<\n  PropertyImplementation<T, unknown>,\n  \"current\" | \"readOnly\" | \"set\" | \"change\" | \"mutate\"\n>\n\nexport type PropertyReadOnly<T> = Pick<\n  PropertyImplementation<T, unknown>,\n  \"current\" | \"readOnly\"\n>\n\nexport class PropertyImplementation<T, U> implements Property<T> {\n  private _ctx: ContextImplementation<U>\n  private _current: T\n\n  constructor(initialValue: T, ctx: ContextImplementation<U>) {\n    this._current = initialValue\n    this._ctx = ctx\n  }\n\n  // Get the current value of the property.\n  get current(): T {\n    return this._current\n  }\n\n  // Get a version of this property accessor that can only read (in TypeScript).\n  get readOnly(): PropertyReadOnly<T> {\n    return this\n  }\n\n  // Assign a new value to the property, notifying any reactive effects if\n  // (and only if) the new value is not referentially identical to the old one.\n  //\n  // Use `setAndNotify` instead if you want to unconditionally notify all\n  // downstream reactive effects even if the new value is the same.\n  set(newValue: T) {\n    if (this._current !== newValue) this.setAndNotify(newValue)\n  }\n\n  // Assign a new value to the property, notifying all reactive effects,\n  // regardless of whether the new value is referentially identical to the old.\n  //\n  // Usually you want to use `set` instead, which checks referential identity.\n  setAndNotify(newValue: T) {\n    this._current = newValue\n    this._ctx._needsUnitReRun = true\n  }\n\n  // Use a function to change the value of the property based on the current\n  // value (which will be passed as the argument to the function).\n  //\n  // All reactive effects will be notified if (and only if) the new value\n  // produced by the function is not referentially identical to the old value.\n  //\n  // Use `mutate` instead if the value is an object type that you want to mutate\n  // to change it and trigger reactive effects without actually having to\n  // produce a new referentially new object for the new value.\n  change(fn: (currentValue: T) => T) {\n    this.set(fn(this._current))\n  }\n\n  // Use a function to mutate the current value of the property,\n  // without changing its referential identity.\n  //\n  // All reactive effects will be notified regardless of what the function does.\n  mutate(fn: (currentValue: T) => unknown) {\n    fn(this._current)\n    this._ctx._needsUnitReRun = true // assume mutation always happens\n  }\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { Unit } from \"./Unit\"\nimport { Property, PropertyImplementation } from \"./Property\"\n\nexport type MaybeDestroyableGPUResource =\n  | undefined\n  | 0\n  | false\n  | null\n  | (GPUObjectBase & { destroy?: () => void })\nexport type StoreItemGPUResource<T extends MaybeDestroyableGPUResource> = [\n  T,\n  unknown[],\n]\n\nexport type StoreItemGPUAction = [\n  (ctx: ContextForGPUAction) => void,\n  unknown[],\n  boolean,\n]\n\nexport type StoreItemEffect = [(() => void) | undefined, unknown[]]\n\nexport class ContextImplementation<U> {\n  private _unitFn: (ctx: Context) => U\n\n  device: GPUDevice\n  commandEncoder?: GPUCommandEncoder\n\n  constructor(unitFn: (ctx: Context) => U, device: GPUDevice) {\n    this._unitFn = unitFn\n    this.device = device\n  }\n\n  ///\n  // This next section relates to private storage of state and effects.\n\n  private _store: unknown[] = []\n  private _storeIndex = 0\n  private _storeUnits: Property<Unit<unknown> | undefined>[] = []\n  private _storeUnitsIndex = 0\n  private _storeGPUActions: StoreItemGPUAction[] = []\n  private _storeGPUActionsIndex = 0\n  _needsUnitReRun = true // TODO: private\n\n  private _nextStoreIndex() {\n    const storeIndex = this._storeIndex\n    this._storeIndex = storeIndex + 1\n    return storeIndex\n  }\n\n  private _nextStoreUnitsIndex() {\n    const storeUnitsIndex = this._storeUnitsIndex\n    this._storeUnitsIndex = storeUnitsIndex + 1\n    return storeUnitsIndex\n  }\n\n  private _nextStoreGPUActionsIndex() {\n    const storeGPUActionsIndex = this._storeGPUActionsIndex\n    this._storeGPUActionsIndex = storeGPUActionsIndex + 1\n    return storeGPUActionsIndex\n  }\n\n  ///\n  // This next section has public methods related to running the unit.\n\n  runUnitIfNeeded(currentUnit: U) {\n    var otherUnitsRan = false\n    this._storeUnits.forEach((unitProp) => {\n      const unit = unitProp.current\n      const otherUnitRan = unit?._ctx.runUnitIfNeeded(unit)\n      if (otherUnitRan) otherUnitsRan = true\n    })\n\n    if (this._needsUnitReRun || otherUnitsRan) {\n      this._storeIndex = 0\n      this._storeUnitsIndex = 0\n      this._storeGPUActionsIndex = 0\n      this._needsUnitReRun = false\n      Object.assign(currentUnit, this._unitFn(this))\n      return true\n    } else {\n      return false\n    }\n  }\n\n  runGPUActionsIfNeeded(commandEncoder: GPUCommandEncoder) {\n    this._storeUnits.forEach((unitProp) => {\n      const unit = unitProp.current\n      unit?._ctx.runGPUActionsIfNeeded(commandEncoder)\n    })\n\n    this.commandEncoder = commandEncoder\n    this._storeGPUActions.forEach(([action, deps, needsRun], index) => {\n      if (needsRun) {\n        action(this as ContextForGPUAction)\n        this._storeGPUActions[index][2] = false\n      }\n    })\n    this.commandEncoder = undefined\n  }\n\n  ///\n  // This next section has public methods\n\n  _useProp<T>(initialValue: (() => T) | T): Property<T> {\n    const storeIndex = this._nextStoreIndex()\n    const existing = this._store[storeIndex] as Property<T>\n\n    // If there is an existing property pair, return it now.\n    if (existing) return existing\n\n    // Otherwise create, store, and return a new prop/setProp pair,\n    // using the provided initial state value or function.\n    const prop: Property<T> = new PropertyImplementation<T, U>(\n      typeof initialValue === \"function\"\n        ? (initialValue as () => T)()\n        : initialValue,\n      this,\n    )\n\n    this._store[storeIndex] = prop\n    return prop\n  }\n\n  _useUnitProp<T extends Unit<unknown> | undefined>(\n    initialValue: (() => T) | T,\n  ): Property<T> {\n    const storeIndex = this._nextStoreUnitsIndex()\n    const existing = this._storeUnits[storeIndex] as Property<T>\n\n    // If there is an existing prop/setProp pair, return it now.\n    if (existing) return existing\n\n    // Otherwise create, store, and return a new prop/setProp pair,\n    // using the provided initial state value or function.\n    const prop: Property<T> = new PropertyImplementation<T, U>(\n      typeof initialValue === \"function\"\n        ? (initialValue as () => T)()\n        : initialValue,\n      this,\n    )\n\n    this._storeUnits[storeIndex] = prop\n    return prop\n  }\n\n  _useGPUResource<T extends MaybeDestroyableGPUResource>(\n    create: (ctx: ContextForGPUResource) => T,\n    deps: Array<unknown>,\n  ): T {\n    const storeIndex = this._nextStoreIndex()\n    const existing = this._store[storeIndex] as StoreItemGPUResource<T>\n\n    // If the resource has never been created, create it now.\n    if (!existing) {\n      const newResource = create(this)\n      this._store[storeIndex] = [newResource, deps]\n      return newResource\n    }\n\n    // If the resource exists, and all new dependencies have the same identity\n    // as the corresponding old dependencies, return the existing resource.\n    if (deps.every((dep, index) => dep === existing[1][index]))\n      return existing[0]\n\n    // Create the new resource and store it along with its dependencies.\n    const newResource = create(this)\n    const oldResource = existing[0]\n    existing[0] = newResource\n    existing[1] = deps\n\n    // Destroy the old resource if applicable.\n    if (oldResource && typeof oldResource.destroy === \"function\")\n      oldResource.destroy()\n\n    // Return the new resource\n    return newResource\n  }\n\n  _useGPUAction(\n    action: (ctx: ContextForGPUAction) => void,\n    deps: Array<unknown>,\n  ): void {\n    const storeIndex = this._nextStoreGPUActionsIndex()\n    const existing = this._storeGPUActions[storeIndex] as StoreItemGPUAction\n\n    // If the action has never been stored, store it now and return early.\n    if (!existing) {\n      this._storeGPUActions[storeIndex] = [action, deps, true]\n      return\n    }\n\n    // If the action is known, and all new dependencies have the same identity\n    // as the corresponding old dependencies, return without doing anything.\n    if (deps.every((dep, index) => dep === existing[1][index])) return\n\n    // Update the action function along with its dependencies,\n    // and mark it as being \"dirty\" (i.e. in need of being executed again).\n    existing[0] = action\n    existing[1] = deps\n    existing[2] = true\n    return\n  }\n\n  _useEffect(\n    effect: (ctx: ContextEmpty) => (() => void) | undefined,\n    deps: Array<unknown>,\n  ) {\n    const storeIndex = this._nextStoreIndex()\n    const existing = this._store[storeIndex] as StoreItemEffect\n\n    // If the effect has never been stored, store it now after executing.\n    if (!existing) {\n      const cancelFn = effect({})\n      this._store[storeIndex] = [cancelFn, deps]\n      return\n    }\n\n    // If the effect is known, and all new dependencies have the same identity\n    // as the corresponding old dependencies, return without doing anything.\n    if (deps.every((dep, index) => dep === existing[1][index])) return\n\n    // Call the existing cancel function if there is one.\n    if (existing[0]) existing[0]()\n\n    // Execute the effect function to get the new cancel function, then\n    // store it along with the new dependency identities.\n    existing[0] = effect({})\n    existing[1] = deps\n    return\n  }\n}\n\nexport type Context = Pick<\n  ContextImplementation<unknown>,\n  // In the main function context, hooks are available.\n  | \"device\"\n  | \"_useProp\"\n  | \"_useUnitProp\"\n  | \"_useGPUResource\"\n  | \"_useGPUAction\"\n  | \"_useEffect\"\n>\n\nexport type ContextForGPUResource = Pick<\n  ContextImplementation<unknown>,\n  // No hooks are available.\n  \"device\"\n>\n\nexport type ContextForGPUAction = Pick<\n  ContextImplementation<unknown>,\n  // No hooks are available, but a command encoder is available.\n  \"device\"\n> & { commandEncoder: GPUCommandEncoder }\n\nexport type ContextEmpty = {}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { Render, UnitRoot } from \"@gpu-fu/gpu-fu\"\n\nexport default class OutputCanvas {\n  _canvasContext: GPUCanvasContext\n  _renders: UnitRoot<Render>[] = []\n\n  constructor(canvasContext: GPUCanvasContext) {\n    this._canvasContext = canvasContext\n  }\n\n  addRender(render: UnitRoot<Render>) {\n    if (this._renders.includes(render)) return\n    this._renders.push(render)\n  }\n\n  outputFrame(commandEncoder: GPUCommandEncoder) {\n    const target = this._canvasContext.getCurrentTexture()\n    this._renders.forEach((render) => {\n      render.renderTarget.set(target)\n      render.runFrame(commandEncoder)\n    })\n  }\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { UnitFn, createUnitRoot, Render } from \"@gpu-fu/gpu-fu\"\nimport { OutputCanvas } from \"@gpu-fu/incubator\"\n\ntype FrameFn = (commandEncoder: GPUCommandEncoder) => void\ntype SetupFn = (device: GPUDevice, canvasContext: GPUCanvasContext) => FrameFn\n\nexport default function runDemo(renderFn: UnitFn<Render>) {\n  runDemoInner((device, canvasContext) => {\n    const render = createUnitRoot(device, renderFn)\n\n    const output = new OutputCanvas(canvasContext)\n    output.addRender(render)\n\n    return function frame(commandEncoder) {\n      output.outputFrame(commandEncoder)\n    }\n  })\n}\n\nfunction runDemoInner(setupFn: SetupFn) {\n  ;(async () => {\n    const device = await getDevice()\n    const canvasContext = await getCanvasContext(getDemoCanvas(), device)\n\n    const frameFn = setupFn(device, canvasContext)\n\n    function repeatFrameWithContext() {\n      runFrameWithContext(device, frameFn)\n      requestAnimationFrame(repeatFrameWithContext)\n    }\n    requestAnimationFrame(repeatFrameWithContext)\n  })().catch((error) => {\n    document.querySelector(\"body\")!.innerHTML = error\n    console.error(error)\n  })\n}\n\nasync function getDevice(\n  powerPreference: GPUPowerPreference = \"high-performance\",\n): Promise<GPUDevice> {\n  if (!navigator.gpu)\n    throw new Error(\"Your browser doesn't have WebGPU enabled!\")\n\n  const gpu = await navigator.gpu.requestAdapter({ powerPreference })\n  if (!gpu) throw new Error(\"Failed to get the GPU adapter!\")\n\n  return gpu.requestDevice()\n}\n\nexport function getDemoCanvas(): HTMLCanvasElement {\n  const canvas = document.querySelector(\n    \"canvas.main\",\n  ) as HTMLCanvasElement | null\n  if (!canvas) throw new Error(\"The main canvas wasn't found in the HTML!\")\n\n  return canvas\n}\n\nasync function getCanvasContext(\n  canvas: HTMLCanvasElement,\n  device: GPUDevice,\n): Promise<GPUCanvasContext> {\n  const canvasContext = canvas.getContext(\"webgpu\") as GPUCanvasContext | null\n  if (!canvasContext) throw new Error(\"Failed to get a WebGPU canvas context!\")\n\n  canvasContext.configure({\n    device,\n    format: getPreferredCanvasFormat(),\n    alphaMode: \"opaque\",\n  })\n\n  return canvasContext\n}\n\nfunction getPreferredCanvasFormat() {\n  // Some browsers throw an \"Illegal invocation\" error if we don't bind.\n  const getPreferredCanvasFormat =\n    navigator.gpu?.getPreferredCanvasFormat?.bind(navigator.gpu)\n  if (getPreferredCanvasFormat) return getPreferredCanvasFormat()\n\n  // Hard-coded default for browsers that don't implement this function yet.\n  return \"rgba8unorm\"\n}\n\nfunction runFrameWithContext(device: GPUDevice, frameFn: FrameFn) {\n  const commandEncoder = device.createCommandEncoder()\n  frameFn(commandEncoder)\n  device.queue.submit([commandEncoder.finish()])\n}\n","export default \"@stage(vertex)\\nfn vertexRenderColoredTriangle(\\n  @builtin(vertex_index) index: u32\\n) ->\\n  @builtin(position) vec4<f32>\\n{\\n  let triangle = array<vec2<f32>, 3>(\\n    vec2<f32>(0.0, 0.433),\\n    vec2<f32>(-0.5, -0.433),\\n    vec2<f32>(0.5, -0.433),\\n  );\\n\\n  return vec4<f32>(triangle[index], 0.0, 1.0);\\n}\\n\\n@stage(fragment)\\nfn fragmentRenderColoredTriangle(\\n  @builtin(position) pos_in: vec4<f32>\\n) ->\\n  @location(0) vec4<f32>\\n{\\n  return vec4<f32>(\\n    pos_in.x * 0.003,\\n    pos_in.y * 0.003,\\n    1.0 - (pos_in.y * 0.003),\\n    1.0,\\n  );\\n}\\n\";","/// <reference types=\"@webgpu/types\" />\n\nimport runDemo from \"./runDemo\"\n\nimport {\n  Context,\n  autoLayout,\n  useProp,\n  useGPUResource,\n  useGPUAction,\n} from \"@gpu-fu/gpu-fu\"\n\nimport shaderModuleCode from \"./demo1.wgsl\"\n\nrunDemo(RenderColoredTriangle)\n\nfunction RenderColoredTriangle(ctx: Context) {\n  const renderTarget = useProp<GPUTexture>(ctx)\n\n  const renderPipeline = useGPUResource(\n    ctx,\n    (ctx) =>\n      ctx.device.createRenderPipeline({\n        vertex: {\n          module: ctx.device.createShaderModule({ code: shaderModuleCode }),\n          entryPoint: \"vertexRenderColoredTriangle\",\n        },\n        fragment: {\n          module: ctx.device.createShaderModule({ code: shaderModuleCode }),\n          entryPoint: \"fragmentRenderColoredTriangle\",\n          targets: [\n            {\n              // TODO: Remove this hard-coded value - get the real one somehow.\n              format: \"rgba8unorm\" as GPUTextureFormat,\n            },\n          ],\n        },\n        primitive: {\n          topology: \"triangle-list\",\n        },\n        layout: autoLayout(),\n      }),\n    [],\n  )\n\n  useGPUAction(\n    ctx,\n    (ctx) => {\n      if (!renderTarget.current) return\n\n      const passEncoder = ctx.commandEncoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: renderTarget.current.createView(),\n            clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n            loadOp: \"clear\" as GPULoadOp,\n            storeOp: \"store\" as GPUStoreOp,\n          },\n        ],\n      })\n      passEncoder.setPipeline(renderPipeline)\n      passEncoder.draw(3, 1, 0, 0)\n      passEncoder.end()\n    },\n    [renderTarget.current],\n  )\n\n  return { renderTarget }\n}\n","import {\n  Context,\n  ContextForGPUResource,\n  ContextForGPUAction,\n  MaybeDestroyableGPUResource,\n  ContextEmpty,\n} from \"./Context\"\nimport { Unit, UnitFn, NotAUnit, unit } from \"./Unit\"\nimport { Property } from \"./Property\"\n\nexport function useProp<T>(ctx: Context): Property<NotAUnit<T | undefined>> {\n  return ctx._useProp<T | undefined>(undefined) as Property<\n    NotAUnit<T | undefined>\n  >\n}\n\nexport function useInitializedProp<T>(\n  ctx: Context,\n  initialValue: (() => NotAUnit<T>) | NotAUnit<T>,\n): Property<NotAUnit<T>> {\n  return ctx._useProp<NotAUnit<T>>(initialValue)\n}\n\nexport function useUnitProp<U>(ctx: Context): Property<Unit<U> | undefined> {\n  return ctx._useUnitProp<Unit<U> | undefined>(undefined)\n}\n\nexport function useUnit<U>(ctx: Context, unitFn: UnitFn<U>): Unit<U> {\n  return ctx._useUnitProp<Unit<U>>(() => unit(ctx.device, unitFn)).current\n}\n\nexport function useGPUResource<T extends MaybeDestroyableGPUResource>(\n  ctx: Context,\n  create: (ctx: ContextForGPUResource) => T,\n  deps: Array<unknown>,\n): T {\n  return ctx._useGPUResource<T>(create, deps)\n}\n\nexport function useGPUAction(\n  ctx: Context,\n  action: (ctx: ContextForGPUAction) => void,\n  deps: Array<unknown>,\n): void {\n  ctx._useGPUAction(action, deps)\n}\n\nexport function useEffect<T>(\n  ctx: Context,\n  effect: (ctx: ContextEmpty) => (() => void) | undefined,\n  deps: Array<unknown>,\n) {\n  return ctx._useEffect(effect, deps)\n}\n\nexport function useAsyncPropSetter<T>(\n  ctx: Context,\n  setPropFn: (newValue: T) => unknown,\n  effect: (ctx: ContextEmpty) => Promise<T>,\n  deps: Array<unknown>,\n) {\n  return ctx._useEffect((ctx) => {\n    var cancelled = false\n    effect(ctx)\n      .then((value) => cancelled || setPropFn(value))\n      .catch((error) => {\n        console.error(error)\n        cancelled = true\n      })\n    return () => {\n      cancelled = true\n    }\n  }, deps)\n}\n","import { Context, ContextImplementation } from \"./Context\"\n\nexport type UnitAny = {\n  _ctx: Context\n}\n\nexport type Unit<U> = U & {\n  _ctx: ContextImplementation<U>\n}\n\nexport type UnitRoot<U> = U & {\n  _ctx: ContextImplementation<U>\n  runFrame: (commandEncoder: GPUCommandEncoder) => void\n}\n\nexport type UnitFn<U> = (ctx: Context) => U\n\nexport type NotAUnit<T> = T extends UnitAny ? never : T\n\nexport function unit<U>(\n  device: GPUDevice,\n  unitFn: (ctx: Context) => U,\n): Unit<U> {\n  const ctx = new ContextImplementation<U>(unitFn, device)\n  return { ...unitFn(ctx), _ctx: ctx }\n}\n\nfunction unitFrame<U>(unit: Unit<U>, commandEncoder: GPUCommandEncoder) {\n  const ctx = unit._ctx\n  ctx.runUnitIfNeeded(unit)\n  ctx.runGPUActionsIfNeeded(commandEncoder)\n}\n\nexport function createUnitRoot<U>(\n  device: GPUDevice,\n  unitFn: (ctx: Context) => U,\n): UnitRoot<U> {\n  const ctx = new ContextImplementation<U>(unitFn, device)\n  const unitRoot = { ...unitFn(ctx), _ctx: ctx } as UnitRoot<U>\n  unitRoot.runFrame = (commandEncoder: GPUCommandEncoder) =>\n    unitFrame(unitRoot, commandEncoder)\n  return unitRoot\n}\n"],"names":["root","factory","exports","module","define","amd","self","this","Symbol","toStringTag","Object","defineProperty","value","PropertyImplementation","constructor","initialValue","ctx","_current","_ctx","current","readOnly","set","newValue","setAndNotify","_needsUnitReRun","change","fn","mutate","unitFn","device","_store","_storeIndex","_storeUnits","_storeUnitsIndex","_storeGPUActions","_storeGPUActionsIndex","_unitFn","_nextStoreIndex","storeIndex","_nextStoreUnitsIndex","storeUnitsIndex","_nextStoreGPUActionsIndex","storeGPUActionsIndex","runUnitIfNeeded","currentUnit","otherUnitsRan","forEach","unitProp","unit","assign","runGPUActionsIfNeeded","commandEncoder","action","deps","needsRun","index","undefined","_useProp","existing","prop","_useUnitProp","_useGPUResource","create","newResource","every","dep","oldResource","destroy","_useGPUAction","_useEffect","effect","cancelFn","OutputCanvas","canvasContext","_renders","_canvasContext","addRender","render","includes","push","outputFrame","target","getCurrentTexture","renderTarget","runFrame","getPreferredCanvasFormat","navigator","gpu","bind","renderFn","renderPipeline","createRenderPipeline","vertex","createShaderModule","code","entryPoint","fragment","targets","format","primitive","topology","layout","autoLayout","passEncoder","beginRenderPass","colorAttachments","view","createView","clearValue","r","g","b","a","loadOp","storeOp","setPipeline","draw","end","setupFn","powerPreference","Error","requestAdapter","requestDevice","getDevice","canvas","getContext","configure","alphaMode","getCanvasContext","document","querySelector","getDemoCanvas","frameFn","unitRoot","unitFrame","createUnitRoot","output","requestAnimationFrame","repeatFrameWithContext","createCommandEncoder","queue","submit","finish","runFrameWithContext","catch","error","innerHTML","console","runDemoInner"],"sourceRoot":""}