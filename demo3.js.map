{"version":3,"file":"demo3.js","mappings":"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","sources":["webpack://beta/webpack/universalModuleDefinition","webpack://beta/webpack/bootstrap","webpack://beta/webpack/runtime/make namespace object","webpack://beta/../gpu-fu/src/Property.ts","webpack://beta/../gpu-fu/src/Context.ts","webpack://beta/../gpu-fu/src/hooks.ts","webpack://beta/../gpu-fu/src/Unit.ts","webpack://beta/../incubator/src/OutputCanvas.ts","webpack://beta/../incubator/src/VertexSourceRect.ts","webpack://beta/../incubator/src/RenderTextureRect.ts","webpack://beta/../incubator/src/RenderUV.ts","webpack://beta/../incubator/src/RenderUV.wgsl","webpack://beta/../incubator/src/TextureFilterConvolve.ts","webpack://beta/../incubator/src/TextureFilterConvolve3x3.wgsl","webpack://beta/../incubator/src/TextureSourceBitmapFromURL.ts","webpack://beta/../incubator/src/TextureSourceBitmap.ts","webpack://beta/./src/runDemo.ts","webpack://beta/./src/demo3.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"beta\"] = factory();\n\telse\n\t\troot[\"beta\"] = factory();\n})(typeof self !== 'undefined' ? self : this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { ContextImplementation } from \"./Context\"\n\nexport type Property<T> = Pick<\n  PropertyImplementation<T, unknown>,\n  \"current\" | \"set\" | \"change\" | \"mutate\"\n>\n\nexport class PropertyImplementation<T, U> implements Property<T> {\n  private _ctx: ContextImplementation<U>\n  private _current: T\n\n  constructor(initialValue: T, ctx: ContextImplementation<U>) {\n    this._current = initialValue\n    this._ctx = ctx\n  }\n\n  get current(): T {\n    return this._current\n  }\n\n  set(newValue: T) {\n    if (this._current !== newValue) {\n      this._current = newValue\n      this._ctx._needsUnitReRun = true\n    }\n  }\n\n  change(fn: (currentValue: T) => T) {\n    const newValue = fn(this._current)\n    if (this._current !== newValue) {\n      this._current = newValue\n      this._ctx._needsUnitReRun = true\n    }\n  }\n\n  mutate(fn: (currentValue: T) => void) {\n    fn(this._current)\n    this._ctx._needsUnitReRun = true // assume mutation always happens\n  }\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { Unit } from \"./Unit\"\nimport { Property, PropertyImplementation } from \"./Property\"\n\nexport type MaybeDestroyableGPUResource =\n  | undefined\n  | 0\n  | false\n  | null\n  | (GPUObjectBase & { destroy?: () => void })\nexport type StoreItemGPUResource<T extends MaybeDestroyableGPUResource> = [\n  T,\n  unknown[],\n]\n\nexport type StoreItemGPUAction = [\n  (ctx: ContextForGPUAction) => void,\n  unknown[],\n  boolean,\n]\n\nexport type StoreItemEffect = [(() => void) | undefined, unknown[]]\n\nexport class ContextImplementation<U> {\n  private _unitFn: (ctx: Context) => U\n\n  device: GPUDevice\n  commandEncoder?: GPUCommandEncoder\n\n  constructor(unitFn: (ctx: Context) => U, device: GPUDevice) {\n    this._unitFn = unitFn\n    this.device = device\n  }\n\n  ///\n  // This next section relates to private storage of state and effects.\n\n  private _store: unknown[] = []\n  private _storeIndex = 0\n  private _storeUnits: Property<Unit<unknown> | undefined>[] = []\n  private _storeUnitsIndex = 0\n  private _storeGPUActions: StoreItemGPUAction[] = []\n  private _storeGPUActionsIndex = 0\n  _needsUnitReRun = true // TODO: private\n\n  private _nextStoreIndex() {\n    const storeIndex = this._storeIndex\n    this._storeIndex = storeIndex + 1\n    return storeIndex\n  }\n\n  private _nextStoreUnitsIndex() {\n    const storeUnitsIndex = this._storeUnitsIndex\n    this._storeUnitsIndex = storeUnitsIndex + 1\n    return storeUnitsIndex\n  }\n\n  private _nextStoreGPUActionsIndex() {\n    const storeGPUActionsIndex = this._storeGPUActionsIndex\n    this._storeGPUActionsIndex = storeGPUActionsIndex + 1\n    return storeGPUActionsIndex\n  }\n\n  ///\n  // This next section has public methods related to running the unit.\n\n  runUnitIfNeeded(currentUnit: U) {\n    var otherUnitsRan = false\n    this._storeUnits.forEach((unitProp) => {\n      const unit = unitProp.current\n      const otherUnitRan = unit?._ctx.runUnitIfNeeded(unit)\n      if (otherUnitRan) otherUnitsRan = true\n    })\n\n    if (this._needsUnitReRun || otherUnitsRan) {\n      this._storeIndex = 0\n      this._storeUnitsIndex = 0\n      this._storeGPUActionsIndex = 0\n      this._needsUnitReRun = false\n      Object.assign(currentUnit, this._unitFn(this))\n      return true\n    } else {\n      return false\n    }\n  }\n\n  runGPUActionsIfNeeded(commandEncoder: GPUCommandEncoder) {\n    this._storeUnits.forEach((unitProp) => {\n      const unit = unitProp.current\n      unit?._ctx.runGPUActionsIfNeeded(commandEncoder)\n    })\n\n    this.commandEncoder = commandEncoder\n    this._storeGPUActions.forEach(([action, deps, needsRun], index) => {\n      if (needsRun) {\n        action(this as ContextForGPUAction)\n        this._storeGPUActions[index][2] = false\n      }\n    })\n    this.commandEncoder = undefined\n  }\n\n  ///\n  // This next section has public methods\n\n  _useProp<T>(initialValue: (() => T) | T): Property<T> {\n    const storeIndex = this._nextStoreIndex()\n    const existing = this._store[storeIndex] as Property<T>\n\n    // If there is an existing property pair, return it now.\n    if (existing) return existing\n\n    // Otherwise create, store, and return a new prop/setProp pair,\n    // using the provided initial state value or function.\n    const prop: Property<T> = new PropertyImplementation<T, U>(\n      typeof initialValue === \"function\"\n        ? (initialValue as () => T)()\n        : initialValue,\n      this,\n    )\n\n    this._store[storeIndex] = prop\n    return prop\n  }\n\n  _useUnitProp<T extends Unit<unknown> | undefined>(\n    initialValue: (() => T) | T,\n  ): Property<T> {\n    const storeIndex = this._nextStoreUnitsIndex()\n    const existing = this._storeUnits[storeIndex] as Property<T>\n\n    // If there is an existing prop/setProp pair, return it now.\n    if (existing) return existing\n\n    // Otherwise create, store, and return a new prop/setProp pair,\n    // using the provided initial state value or function.\n    const prop: Property<T> = new PropertyImplementation<T, U>(\n      typeof initialValue === \"function\"\n        ? (initialValue as () => T)()\n        : initialValue,\n      this,\n    )\n\n    this._storeUnits[storeIndex] = prop\n    return prop\n  }\n\n  _useGPUResource<T extends MaybeDestroyableGPUResource>(\n    create: (ctx: ContextForGPUResource) => T,\n    deps: Array<unknown>,\n  ): T {\n    const storeIndex = this._nextStoreIndex()\n    const existing = this._store[storeIndex] as StoreItemGPUResource<T>\n\n    // If the resource has never been created, create it now.\n    if (!existing) {\n      const newResource = create(this)\n      this._store[storeIndex] = [newResource, deps]\n      return newResource\n    }\n\n    // If the resource exists, and all new dependencies have the same identity\n    // as the corresponding old dependencies, return the existing resource.\n    if (deps.every((dep, index) => dep === existing[1][index]))\n      return existing[0]\n\n    // Create the new resource and store it along with its dependencies.\n    const newResource = create(this)\n    const oldResource = existing[0]\n    existing[0] = newResource\n    existing[1] = deps\n\n    // Destroy the old resource if applicable.\n    if (oldResource && typeof oldResource.destroy === \"function\")\n      oldResource.destroy()\n\n    // Return the new resource\n    return newResource\n  }\n\n  _useGPUAction(\n    action: (ctx: ContextForGPUAction) => void,\n    deps: Array<unknown>,\n  ): void {\n    const storeIndex = this._nextStoreGPUActionsIndex()\n    const existing = this._storeGPUActions[storeIndex] as StoreItemGPUAction\n\n    // If the action has never been stored, store it now and return early.\n    if (!existing) {\n      this._storeGPUActions[storeIndex] = [action, deps, true]\n      return\n    }\n\n    // If the action is known, and all new dependencies have the same identity\n    // as the corresponding old dependencies, return without doing anything.\n    if (deps.every((dep, index) => dep === existing[1][index])) return\n\n    // Update the action function along with its dependencies,\n    // and mark it as being \"dirty\" (i.e. in need of being executed again).\n    existing[0] = action\n    existing[1] = deps\n    existing[2] = true\n    return\n  }\n\n  _useEffect(\n    effect: (ctx: ContextEmpty) => (() => void) | undefined,\n    deps: Array<unknown>,\n  ) {\n    const storeIndex = this._nextStoreIndex()\n    const existing = this._store[storeIndex] as StoreItemEffect\n\n    // If the effect has never been stored, store it now after executing.\n    if (!existing) {\n      const cancelFn = effect({})\n      this._store[storeIndex] = [cancelFn, deps]\n      return\n    }\n\n    // If the effect is known, and all new dependencies have the same identity\n    // as the corresponding old dependencies, return without doing anything.\n    if (deps.every((dep, index) => dep === existing[1][index])) return\n\n    // Call the existing cancel function if there is one.\n    if (existing[0]) existing[0]()\n\n    // Execute the effect function to get the new cancel function, then\n    // store it along with the new dependency identities.\n    existing[0] = effect({})\n    existing[1] = deps\n    return\n  }\n}\n\nexport type Context = Pick<\n  ContextImplementation<unknown>,\n  // In the main function context, hooks are available.\n  | \"device\"\n  | \"_useProp\"\n  | \"_useUnitProp\"\n  | \"_useGPUResource\"\n  | \"_useGPUAction\"\n  | \"_useEffect\"\n>\n\nexport type ContextForGPUResource = Pick<\n  ContextImplementation<unknown>,\n  // No hooks are available.\n  \"device\"\n>\n\nexport type ContextForGPUAction = Pick<\n  ContextImplementation<unknown>,\n  // No hooks are available, but a command encoder is available.\n  \"device\"\n> & { commandEncoder: GPUCommandEncoder }\n\nexport type ContextEmpty = {}\n","import {\n  Context,\n  ContextForGPUResource,\n  ContextForGPUAction,\n  MaybeDestroyableGPUResource,\n  ContextEmpty,\n} from \"./Context\"\nimport { Unit, UnitFn, NotAUnit, unit } from \"./Unit\"\nimport { Property } from \"./Property\"\n\nexport function useProp<T>(ctx: Context): Property<NotAUnit<T | undefined>> {\n  return ctx._useProp<T | undefined>(undefined) as Property<\n    NotAUnit<T | undefined>\n  >\n}\n\nexport function useInitializedProp<T>(\n  ctx: Context,\n  initialValue: (() => NotAUnit<T>) | NotAUnit<T>,\n): Property<NotAUnit<T>> {\n  return ctx._useProp<NotAUnit<T>>(initialValue)\n}\n\nexport function useUnitProp<U>(ctx: Context): Property<Unit<U> | undefined> {\n  return ctx._useUnitProp<Unit<U> | undefined>(undefined)\n}\n\nexport function useUnit<U>(ctx: Context, unitFn: UnitFn<U>): Unit<U> {\n  return ctx._useUnitProp<Unit<U>>(() => unit(ctx.device, unitFn)).current\n}\n\nexport function useGPUResource<T extends MaybeDestroyableGPUResource>(\n  ctx: Context,\n  create: (ctx: ContextForGPUResource) => T,\n  deps: Array<unknown>,\n): T {\n  return ctx._useGPUResource<T>(create, deps)\n}\n\nexport function useGPUAction(\n  ctx: Context,\n  action: (ctx: ContextForGPUAction) => void,\n  deps: Array<unknown>,\n): void {\n  ctx._useGPUAction(action, deps)\n}\n\nexport function useEffect<T>(\n  ctx: Context,\n  effect: (ctx: ContextEmpty) => (() => void) | undefined,\n  deps: Array<unknown>,\n) {\n  return ctx._useEffect(effect, deps)\n}\n\nexport function useAsyncPropSetter<T>(\n  ctx: Context,\n  setPropFn: (newValue: T) => unknown,\n  effect: (ctx: ContextEmpty) => Promise<T>,\n  deps: Array<unknown>,\n) {\n  return ctx._useEffect((ctx) => {\n    var cancelled = false\n    effect(ctx)\n      .then((value) => cancelled || setPropFn(value))\n      .catch((error) => {\n        console.error(error)\n        cancelled = true\n      })\n    return () => {\n      cancelled = true\n    }\n  }, deps)\n}\n","import { Context, ContextImplementation } from \"./Context\"\n\nexport type UnitAny = {\n  _ctx: Context\n}\n\nexport type Unit<U> = U & {\n  _ctx: ContextImplementation<U>\n}\n\nexport type UnitRoot<U> = U & {\n  _ctx: ContextImplementation<U>\n  runFrame: (commandEncoder: GPUCommandEncoder) => void\n}\n\nexport type UnitFn<U> = (ctx: Context) => U\n\nexport type NotAUnit<T> = T extends UnitAny ? never : T\n\nexport function unit<U>(\n  device: GPUDevice,\n  unitFn: (ctx: Context) => U,\n): Unit<U> {\n  const ctx = new ContextImplementation<U>(unitFn, device)\n  return { ...unitFn(ctx), _ctx: ctx }\n}\n\nfunction unitFrame<U>(unit: Unit<U>, commandEncoder: GPUCommandEncoder) {\n  const ctx = unit._ctx\n  ctx.runUnitIfNeeded(unit)\n  ctx.runGPUActionsIfNeeded(commandEncoder)\n}\n\nexport function createUnitRoot<U>(\n  device: GPUDevice,\n  unitFn: (ctx: Context) => U,\n): UnitRoot<U> {\n  const ctx = new ContextImplementation<U>(unitFn, device)\n  const unitRoot = { ...unitFn(ctx), _ctx: ctx } as UnitRoot<U>\n  unitRoot.runFrame = (commandEncoder: GPUCommandEncoder) =>\n    unitFrame(unitRoot, commandEncoder)\n  return unitRoot\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { Render, UnitRoot } from \"@gpu-fu/gpu-fu\"\n\nexport default class OutputCanvas {\n  _canvasContext: GPUCanvasContext\n  _renders: UnitRoot<Render>[] = []\n\n  constructor(canvasContext: GPUCanvasContext) {\n    this._canvasContext = canvasContext\n  }\n\n  addRender(render: UnitRoot<Render>) {\n    if (this._renders.includes(render)) return\n    this._renders.push(render)\n  }\n\n  outputFrame(commandEncoder: GPUCommandEncoder) {\n    const target = this._canvasContext.getCurrentTexture()\n    this._renders.forEach((render) => {\n      render.renderTarget.set(target)\n      render.runFrame(commandEncoder)\n    })\n  }\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { Context, useProp, useGPUAction, useGPUResource } from \"@gpu-fu/gpu-fu\"\n\nconst vertexSourceCount = 6\nconst vertexSourceTotalBytes = 6 * 6 * 4\nconst vertexSourceStrideBytes = 6 * 4\nconst vertexSourceXYZWOffsetBytes = 0\nconst vertexSourceUVOffsetBytes = 4 * 4\n\nexport default function VertexSourceRect(ctx: Context) {\n  const aspectFillRatio = useProp<number>(ctx)\n\n  const buffer = useGPUResource(\n    ctx,\n    (ctx) =>\n      ctx.device.createBuffer({\n        size: vertexSourceTotalBytes,\n        usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\n      }),\n    [],\n  )\n\n  useGPUAction(\n    ctx,\n    (ctx) => {\n      if (!buffer) return\n\n      var uMin = 0\n      var uMax = 1\n      var vMin = 0\n      var vMax = 1\n\n      if (aspectFillRatio.current) {\n        if (aspectFillRatio.current < 1) {\n          vMin = 0.5 - 0.5 * aspectFillRatio.current\n          vMax = 1 - vMin\n        } else {\n          uMin = 0.5 - 0.5 / aspectFillRatio.current\n          uMax = 1 - uMin\n        }\n      }\n\n      // prettier-ignore\n      const data = new Float32Array([\n      // (x, y, z, w),  (u, v)\n          1, 1, 0, 1, uMax, vMin,\n         -1,-1, 0, 1, uMin, vMax,\n         -1, 1, 0, 1, uMin, vMin,\n          1, 1, 0, 1, uMax, vMin,\n          1,-1, 0, 1, uMax, vMax,\n         -1,-1, 0, 1, uMin, vMax,\n      ])\n\n      ctx.device.queue.writeBuffer(buffer, 0, data, 0, data.length)\n    },\n    [buffer, aspectFillRatio.current],\n  )\n\n  return {\n    aspectFillRatio,\n    vertexSourceCount,\n    vertexSourceTotalBytes,\n    vertexSourceStrideBytes,\n    vertexSourceXYZWOffsetBytes,\n    vertexSourceUVOffsetBytes,\n    vertexSourceAsGPUBuffer: buffer,\n  }\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { Context, useUnit } from \"@gpu-fu/gpu-fu\"\nimport RenderUV from \"./RenderUV\"\nimport VertexSourceRect from \"./VertexSourceRect\"\n\nexport default function RenderTextureRect(ctx: Context) {\n  const { textureSource, vertexSource, renderTarget } = RenderUV(ctx)\n\n  const rect = useUnit(ctx, VertexSourceRect)\n  vertexSource.set(rect)\n\n  // TODO: Use the source texture and target texture aspect ratios\n  // instead of hard-coding a number here.\n  // This doesn't yet work on the latest version of chromium, because\n  // those chromium builds don't yet expose texture width and height.\n  rect.aspectFillRatio.set(850 / 1275)\n\n  return { textureSource, renderTarget }\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport {\n  Context,\n  MatrixSource,\n  VertexSource,\n  TextureSource,\n  autoLayout,\n  useProp,\n  useUnitProp,\n  useGPUResource,\n  useGPUAction,\n} from \"@gpu-fu/gpu-fu\"\n\nimport shaderModuleCode from \"./RenderUV.wgsl\"\n\nexport default function RenderUV(ctx: Context) {\n  const cameraSource = useUnitProp<MatrixSource>(ctx)\n  const vertexSource = useUnitProp<VertexSource>(ctx)\n  const textureSource = useUnitProp<TextureSource>(ctx)\n  const renderTarget = useProp<GPUTexture>(ctx)\n\n  const cameraSourceAsGPUBuffer = cameraSource.current?.cameraSourceAsGPUBuffer\n  const textureSourceAsGPUTexture =\n    textureSource.current?.textureSourceAsGPUTexture\n\n  const shaderModule = useGPUResource(\n    ctx,\n    (ctx) =>\n      ctx.device.createShaderModule({\n        code: shaderModuleCode,\n      }),\n    [],\n  )\n\n  const renderPipeline = useGPUResource(\n    ctx,\n    (ctx) => {\n      if (!vertexSource.current) return\n\n      return ctx.device.createRenderPipeline({\n        vertex: {\n          module: shaderModule,\n          entryPoint: cameraSourceAsGPUBuffer\n            ? \"vertexRenderUVWithMatrix\"\n            : \"vertexRenderUV\",\n          buffers: [\n            {\n              arrayStride: vertexSource.current.vertexSourceStrideBytes,\n              attributes: [\n                {\n                  shaderLocation: 0,\n                  offset: vertexSource.current.vertexSourceXYZWOffsetBytes,\n                  format: \"float32x4\" as GPUVertexFormat,\n                },\n                {\n                  shaderLocation: 1,\n                  offset: vertexSource.current.vertexSourceUVOffsetBytes,\n                  format: \"float32x2\" as GPUVertexFormat,\n                },\n              ],\n            },\n          ],\n        },\n        fragment: {\n          module: shaderModule,\n          entryPoint: \"fragmentRenderUV\",\n          targets: [\n            {\n              // TODO: Remove this hard-coded value - get the real one somehow.\n              format: \"rgba8unorm\" as GPUTextureFormat,\n            },\n          ],\n        },\n        primitive: {\n          topology: \"triangle-list\",\n          // TODO: Configurable `cullMode`\n        },\n        depthStencil: {\n          depthWriteEnabled: true,\n          depthCompare: \"less\",\n          format: \"depth24plus\",\n        },\n        layout: autoLayout(),\n      })\n    },\n    [shaderModule, vertexSource.current],\n  )\n\n  const sampler = useGPUResource(\n    ctx,\n    (ctx) =>\n      ctx.device.createSampler({\n        magFilter: \"linear\",\n        minFilter: \"linear\",\n      }),\n    [],\n  )\n\n  const bindGroup = useGPUResource(\n    ctx,\n    (ctx) => {\n      if (!renderPipeline) return\n      if (!textureSourceAsGPUTexture) return\n\n      const entries: GPUBindGroupEntry[] = [\n        {\n          binding: 1,\n          resource: sampler,\n        },\n        {\n          binding: 2,\n          resource: textureSourceAsGPUTexture.createView(),\n        },\n      ]\n      if (cameraSourceAsGPUBuffer)\n        entries.unshift({\n          binding: 0,\n          resource: { buffer: cameraSourceAsGPUBuffer },\n        })\n\n      return ctx.device.createBindGroup({\n        layout: renderPipeline.getBindGroupLayout(0),\n        entries,\n      })\n    },\n\n    [\n      renderPipeline,\n      cameraSourceAsGPUBuffer,\n      textureSourceAsGPUTexture,\n      sampler,\n    ],\n  )\n\n  const depthTexture = useGPUResource(\n    ctx,\n    (ctx) =>\n      ctx.device.createTexture({\n        size: [300, 300], // TODO: somehow get from canvas client size\n        format: \"depth24plus\",\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      }),\n    [],\n  )\n\n  useGPUAction(\n    ctx,\n    (ctx) => {\n      if (!vertexSource.current) return\n      if (!renderTarget.current) return\n      if (!renderPipeline) return\n      if (!bindGroup) return\n\n      const passEncoder = ctx.commandEncoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: renderTarget.current.createView(),\n            clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n            loadOp: \"clear\" as GPULoadOp,\n            storeOp: \"store\" as GPUStoreOp,\n          },\n        ],\n        depthStencilAttachment: {\n          view: depthTexture.createView(),\n          depthClearValue: 1.0,\n          depthLoadOp: \"clear\" as GPULoadOp,\n          depthStoreOp: \"store\" as GPUStoreOp,\n        },\n      })\n      passEncoder.setPipeline(renderPipeline)\n      passEncoder.setVertexBuffer(\n        0,\n        vertexSource.current.vertexSourceAsGPUBuffer,\n      )\n      passEncoder.setBindGroup(0, bindGroup)\n      passEncoder.draw(vertexSource.current.vertexSourceCount, 1, 0, 0)\n      passEncoder.end()\n    },\n    [vertexSource.current, renderTarget.current, renderPipeline, bindGroup],\n  )\n\n  return {\n    cameraSource,\n    textureSource,\n    vertexSource,\n    renderTarget,\n  }\n}\n","export default \"@group(0) @binding(0) var<uniform> use_matrix: mat4x4<f32>;\\n@group(0) @binding(1) var use_sampler: sampler;\\n@group(0) @binding(2) var use_texture: texture_2d<f32>;\\n\\nstruct VertexOutput {\\n  @builtin(position) pos: vec4<f32>;\\n  @location(0) uv: vec2<f32>;\\n}\\n\\n@stage(vertex)\\nfn vertexRenderUV(\\n  @location(0) pos_in: vec4<f32>,\\n  @location(1) uv_in: vec2<f32>,\\n) ->\\n  VertexOutput\\n{\\n  var out: VertexOutput;\\n  out.pos = pos_in;\\n  out.uv = uv_in;\\n  return out;\\n}\\n\\n@stage(vertex)\\nfn vertexRenderUVWithMatrix(\\n  @location(0) pos_in: vec4<f32>,\\n  @location(1) uv_in: vec2<f32>,\\n) ->\\n  VertexOutput\\n{\\n  var out: VertexOutput;\\n  out.pos = use_matrix * pos_in;\\n  out.uv = uv_in;\\n  return out;\\n}\\n\\n@stage(fragment)\\nfn fragmentRenderUV(\\n  @location(0) uv_in : vec2<f32>\\n) ->\\n  @location(0) vec4<f32>\\n{\\n  return textureSample(use_texture, use_sampler, uv_in.xy);\\n}\\n\";","/// <reference types=\"@webgpu/types\" />\n\nimport {\n  TextureSource,\n  autoLayout,\n  Context,\n  useGPUResource,\n  useGPUAction,\n  useProp,\n  useUnitProp,\n} from \"@gpu-fu/gpu-fu\"\n\nimport shaderModuleCode3x3 from \"./TextureFilterConvolve3x3.wgsl\"\n\ninterface SetKernelOptions {\n  bias?: number\n  scale?: number\n  normalize?: boolean\n}\n\nexport default function TextureFilterConvolve(ctx: Context) {\n  const textureSource = useUnitProp<TextureSource>(ctx)\n  const kernelData = useProp<Float32Array>(ctx)\n\n  const textureSourceAsGPUTexture =\n    textureSource.current?.textureSourceAsGPUTexture\n  const kernelDataByteLength = kernelData.current?.byteLength\n\n  function setKernel3x3(\n    row0: [number, number, number],\n    row1: [number, number, number],\n    row2: [number, number, number],\n    opts: SetKernelOptions = {},\n  ) {\n    // Respect scale and/or normalize options if present.\n    if (opts.scale || opts.normalize) {\n      var scale = opts.scale ?? 1\n      if (opts.normalize) {\n        var sum = 0\n        sum = row0.reduce((accum, n) => accum + n, sum)\n        sum = row1.reduce((accum, n) => accum + n, sum)\n        sum = row2.reduce((accum, n) => accum + n, sum)\n        if (sum !== 0) scale = scale / sum\n      }\n      if (scale !== 1) {\n        row0 = row0.map((n) => n * scale) as typeof row0\n        row1 = row1.map((n) => n * scale) as typeof row1\n        row2 = row2.map((n) => n * scale) as typeof row2\n      }\n    }\n\n    const newKernelData = new Float32Array(10)\n    newKernelData[0] = opts.bias ?? 0\n    newKernelData.set(row0, 1)\n    newKernelData.set(row1, 4)\n    newKernelData.set(row2, 7)\n    kernelData.set(newKernelData)\n  }\n\n  const kernelBuffer = useGPUResource(\n    ctx,\n    (ctx) =>\n      kernelDataByteLength &&\n      ctx.device.createBuffer({\n        size: kernelDataByteLength,\n        usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n      }),\n    [kernelDataByteLength],\n  )\n\n  useGPUAction(\n    ctx,\n    (ctx) => {\n      if (!kernelBuffer) return\n      if (!kernelData.current) return\n\n      ctx.device.queue.writeBuffer(\n        kernelBuffer,\n        0,\n        kernelData.current,\n        0,\n        kernelData.current.length,\n      )\n    },\n    [kernelBuffer, kernelData.current],\n  )\n\n  const computePipeline = useGPUResource(\n    ctx,\n    (ctx) => {\n      let shaderModuleCode: string\n      switch (kernelData.current?.length) {\n        case 10:\n          shaderModuleCode = shaderModuleCode3x3\n          break\n        default:\n          return\n      }\n\n      return ctx.device.createComputePipeline({\n        compute: {\n          module: ctx.device.createShaderModule({\n            code: shaderModuleCode,\n          }),\n          entryPoint: \"computeTextureFilterConvolve3x3\",\n        },\n        layout: autoLayout(),\n      })\n    },\n    [kernelData.current?.length],\n  )\n\n  const texture = useGPUResource(\n    ctx,\n    (ctx) =>\n      ctx.device.createTexture({\n        format: \"rgba8unorm\",\n        size: {\n          width: textureSourceAsGPUTexture?.width || 850, // TODO: remove fallback value\n          height: textureSourceAsGPUTexture?.height || 1275, // TODO: remove fallback value\n        },\n        usage:\n          GPUTextureUsage.COPY_DST |\n          GPUTextureUsage.STORAGE_BINDING |\n          GPUTextureUsage.TEXTURE_BINDING,\n      }),\n    [textureSourceAsGPUTexture],\n  )\n\n  const bindGroup = useGPUResource(\n    ctx,\n    (ctx) =>\n      computePipeline &&\n      kernelBuffer &&\n      textureSourceAsGPUTexture &&\n      texture &&\n      ctx.device.createBindGroup({\n        layout: computePipeline.getBindGroupLayout(0),\n        entries: [\n          {\n            binding: 0,\n            resource: { buffer: kernelBuffer },\n          },\n          {\n            binding: 1,\n            resource: textureSourceAsGPUTexture.createView(),\n          },\n          {\n            binding: 2,\n            resource: texture.createView(),\n          },\n        ],\n      }),\n    [computePipeline, kernelBuffer, textureSourceAsGPUTexture, texture],\n  )\n\n  useGPUAction(\n    ctx,\n    (ctx) => {\n      if (!textureSourceAsGPUTexture) return\n      if (!computePipeline) return\n      if (!bindGroup) return\n\n      const workGroupSizeX = 32 // (must match the WGSL code)\n      const workGroupSizeY = 1 // (must match the WGSL code)\n\n      const passEncoder = ctx.commandEncoder.beginComputePass()\n      passEncoder.setPipeline(computePipeline)\n      passEncoder.setBindGroup(0, bindGroup)\n      passEncoder.dispatch(\n        (textureSourceAsGPUTexture.width || 850) / // TODO: remove fallback value\n          workGroupSizeX,\n        (textureSourceAsGPUTexture.height || 1275) / // TODO: remove fallback value\n          workGroupSizeY,\n      )\n      passEncoder.end()\n    },\n    [textureSourceAsGPUTexture, computePipeline, bindGroup],\n  )\n\n  return {\n    textureSource,\n    setKernel3x3,\n    textureSourceAsGPUTexture: texture,\n  }\n}\n","export default \"@group(0) @binding(0) var<uniform> kernel_3x3: Kernel3x3;\\n@group(0) @binding(1) var texture_in: texture_2d<f32>;\\n@group(0) @binding(2) var texture_out: texture_storage_2d<rgba8unorm, write>;\\n\\nstruct Kernel3x3 {\\n  bias: f32;\\n  aa: f32;\\n  ba: f32;\\n  ca: f32;\\n  ab: f32;\\n  bb: f32;\\n  cb: f32;\\n  ac: f32;\\n  bc: f32;\\n  cc: f32;\\n}\\n\\n// TODO: What is the most likely optimal workgroup size?\\n@stage(compute) @workgroup_size(32, 1, 1)\\nfn computeTextureFilterConvolve3x3(\\n  @builtin(global_invocation_id) global_id: vec3<u32>,\\n) {\\n  let b = vec2<i32>(global_id.xy);\\n  let a = max(b - 1, vec2<i32>(0));\\n  let c = min(b + 1, min(\\n    textureDimensions(texture_in),\\n    textureDimensions(texture_out),\\n  ));\\n\\n  var sum = vec4<f32>(kernel_3x3.bias);\\n\\n  sum = sum + kernel_3x3.aa * textureLoad(texture_in, vec2<i32>(a.x, a.y), 0);\\n  sum = sum + kernel_3x3.ba * textureLoad(texture_in, vec2<i32>(b.x, a.y), 0);\\n  sum = sum + kernel_3x3.ca * textureLoad(texture_in, vec2<i32>(c.x, a.y), 0);\\n\\n  sum = sum + kernel_3x3.ab * textureLoad(texture_in, vec2<i32>(a.x, b.y), 0);\\n  sum = sum + kernel_3x3.bb * textureLoad(texture_in, vec2<i32>(b.x, b.y), 0);\\n  sum = sum + kernel_3x3.cb * textureLoad(texture_in, vec2<i32>(c.x, b.y), 0);\\n\\n  sum = sum + kernel_3x3.ac * textureLoad(texture_in, vec2<i32>(a.x, c.y), 0);\\n  sum = sum + kernel_3x3.bc * textureLoad(texture_in, vec2<i32>(b.x, c.y), 0);\\n  sum = sum + kernel_3x3.cc * textureLoad(texture_in, vec2<i32>(c.x, c.y), 0);\\n\\n  textureStore(texture_out, b, sum);\\n}\\n\";","import { Context, useAsyncPropSetter, useProp } from \"@gpu-fu/gpu-fu\"\nimport TextureSourceBitmap from \"./TextureSourceBitmap\"\n\nexport default function TextureSourceBitmapFromURL(ctx: Context) {\n  const { imageBitmap, label, textureSourceAsGPUTexture } =\n    TextureSourceBitmap(ctx)\n\n  // Use the existing label property for a dual-purpose.\n  // We use it as the URL to fetch from (though this implies\n  // the assumption that the label will always be equal to the URL).\n  const url = label\n\n  useAsyncPropSetter(\n    ctx,\n    imageBitmap.set.bind(imageBitmap),\n    async (ctx) => {\n      if (!url.current) return\n      const img = document.createElement(\"img\")\n      img.src = url.current\n      await img.decode()\n      const imageBitmap = await createImageBitmap(img)\n      return imageBitmap\n    },\n    [url.current],\n  )\n\n  return {\n    url,\n    textureSourceAsGPUTexture,\n  }\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { Context, useProp, useGPUResource, useGPUAction } from \"@gpu-fu/gpu-fu\"\n\nexport default function TextureSourceBitmap(ctx: Context) {\n  const imageBitmap = useProp<ImageBitmap>(ctx)\n  const label = useProp<string>(ctx)\n\n  const textureWidth = imageBitmap.current?.width ?? 16 // TODO: remove fallback values\n  const textureHeight = imageBitmap.current?.height ?? 16 // TODO: remove fallback values\n\n  const texture = useGPUResource(\n    ctx,\n    (ctx) =>\n      ctx.device.createTexture({\n        label: label.current,\n        size: [textureWidth, textureHeight, 1],\n        format: \"rgba8unorm\",\n        usage:\n          GPUTextureUsage.TEXTURE_BINDING |\n          GPUTextureUsage.COPY_DST |\n          GPUTextureUsage.RENDER_ATTACHMENT,\n      }),\n    [textureWidth, textureHeight, label.current],\n  )\n\n  useGPUAction(\n    ctx,\n    (ctx) => {\n      if (!imageBitmap.current) return\n      if (!texture) return\n\n      ctx.device.queue.copyExternalImageToTexture(\n        { source: imageBitmap.current },\n        { texture: texture },\n        [imageBitmap.current.width, imageBitmap.current.height],\n      )\n    },\n    [imageBitmap.current, texture],\n  )\n\n  return {\n    imageBitmap,\n    label,\n    textureSourceAsGPUTexture: texture,\n  }\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { UnitFn, createUnitRoot, Render } from \"@gpu-fu/gpu-fu\"\nimport { OutputCanvas } from \"@gpu-fu/incubator\"\n\ntype FrameFn = (commandEncoder: GPUCommandEncoder) => void\ntype SetupFn = (device: GPUDevice, canvasContext: GPUCanvasContext) => FrameFn\n\nexport default function runDemo(renderFn: UnitFn<Render>) {\n  runDemoInner((device, canvasContext) => {\n    const render = createUnitRoot(device, renderFn)\n\n    const output = new OutputCanvas(canvasContext)\n    output.addRender(render)\n\n    return function frame(commandEncoder) {\n      output.outputFrame(commandEncoder)\n    }\n  })\n}\n\nfunction runDemoInner(setupFn: SetupFn) {\n  ;(async () => {\n    const device = await getDevice()\n    const canvasContext = await getCanvasContext(getDemoCanvas(), device)\n\n    const frameFn = setupFn(device, canvasContext)\n\n    function repeatFrameWithContext() {\n      runFrameWithContext(device, frameFn)\n      requestAnimationFrame(repeatFrameWithContext)\n    }\n    requestAnimationFrame(repeatFrameWithContext)\n  })().catch((error) => {\n    document.querySelector(\"body\")!.innerHTML = error\n    console.error(error)\n  })\n}\n\nasync function getDevice(\n  powerPreference: GPUPowerPreference = \"high-performance\",\n): Promise<GPUDevice> {\n  if (!navigator.gpu)\n    throw new Error(\"Your browser doesn't have WebGPU enabled!\")\n\n  const gpu = await navigator.gpu.requestAdapter({ powerPreference })\n  if (!gpu) throw new Error(\"Failed to get the GPU adapter!\")\n\n  return gpu.requestDevice()\n}\n\nexport function getDemoCanvas(): HTMLCanvasElement {\n  const canvas = document.querySelector(\n    \"canvas.main\",\n  ) as HTMLCanvasElement | null\n  if (!canvas) throw new Error(\"The main canvas wasn't found in the HTML!\")\n\n  return canvas\n}\n\nasync function getCanvasContext(\n  canvas: HTMLCanvasElement,\n  device: GPUDevice,\n): Promise<GPUCanvasContext> {\n  const canvasContext = canvas.getContext(\"webgpu\") as GPUCanvasContext | null\n  if (!canvasContext) throw new Error(\"Failed to get a WebGPU canvas context!\")\n\n  canvasContext.configure({\n    device,\n    format: getPreferredCanvasFormat(),\n    alphaMode: \"opaque\",\n  })\n\n  return canvasContext\n}\n\nfunction getPreferredCanvasFormat() {\n  // Some browsers throw an \"Illegal invocation\" error if we don't bind.\n  const getPreferredCanvasFormat =\n    navigator.gpu?.getPreferredCanvasFormat?.bind(navigator.gpu)\n  if (getPreferredCanvasFormat) return getPreferredCanvasFormat()\n\n  // Hard-coded default for browsers that don't implement this function yet.\n  return \"rgba8unorm\"\n}\n\nfunction runFrameWithContext(device: GPUDevice, frameFn: FrameFn) {\n  const commandEncoder = device.createCommandEncoder()\n  frameFn(commandEncoder)\n  device.queue.submit([commandEncoder.finish()])\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport { useEffect, useUnit } from \"@gpu-fu/gpu-fu\"\nimport {\n  TextureSourceBitmapFromURL,\n  TextureFilterConvolve,\n  RenderTextureRect,\n} from \"@gpu-fu/incubator\"\n\nimport runDemo from \"./runDemo\"\nrunDemo((ctx) => {\n  const textureSource = useUnit(ctx, TextureSourceBitmapFromURL)\n  textureSource.url.set(\"./assets/fireweed.jpg\")\n\n  const sobelHorizontal = useUnit(ctx, TextureFilterConvolve)\n  sobelHorizontal.textureSource.set(textureSource)\n  sobelHorizontal.setKernel3x3(\n    // Sobel Horizontal Kernel (with scaling and bias to center on gray)\n    [1, 2, 1],\n    [0, 0, 0],\n    [-1, -2, -1],\n    { scale: 0.5, bias: 0.5 },\n  )\n\n  const { renderTarget, ...render } = useUnit(ctx, RenderTextureRect)\n  render.textureSource.set(sobelHorizontal)\n\n  return { renderTarget }\n})\n"],"names":["root","factory","exports","module","define","amd","self","this","Symbol","toStringTag","Object","defineProperty","value","PropertyImplementation","constructor","initialValue","ctx","_current","_ctx","current","set","newValue","_needsUnitReRun","change","fn","mutate","ContextImplementation","unitFn","device","_store","_storeIndex","_storeUnits","_storeUnitsIndex","_storeGPUActions","_storeGPUActionsIndex","_unitFn","_nextStoreIndex","storeIndex","_nextStoreUnitsIndex","storeUnitsIndex","_nextStoreGPUActionsIndex","storeGPUActionsIndex","runUnitIfNeeded","currentUnit","otherUnitsRan","forEach","unitProp","unit","assign","runGPUActionsIfNeeded","commandEncoder","action","deps","needsRun","index","undefined","_useProp","existing","prop","_useUnitProp","_useGPUResource","create","newResource","every","dep","oldResource","destroy","_useGPUAction","_useEffect","effect","cancelFn","useUnitProp","useUnit","OutputCanvas","canvasContext","_renders","_canvasContext","addRender","render","includes","push","outputFrame","target","getCurrentTexture","renderTarget","runFrame","VertexSourceRect","aspectFillRatio","buffer","createBuffer","size","usage","GPUBufferUsage","VERTEX","COPY_DST","uMin","uMax","vMin","vMax","data","Float32Array","queue","writeBuffer","length","vertexSourceCount","vertexSourceTotalBytes","vertexSourceStrideBytes","vertexSourceXYZWOffsetBytes","vertexSourceUVOffsetBytes","vertexSourceAsGPUBuffer","RenderTextureRect","textureSource","vertexSource","cameraSource","cameraSourceAsGPUBuffer","textureSourceAsGPUTexture","shaderModule","createShaderModule","code","renderPipeline","createRenderPipeline","vertex","entryPoint","buffers","arrayStride","attributes","shaderLocation","offset","format","fragment","targets","primitive","topology","depthStencil","depthWriteEnabled","depthCompare","layout","autoLayout","sampler","createSampler","magFilter","minFilter","bindGroup","entries","binding","resource","createView","unshift","createBindGroup","getBindGroupLayout","depthTexture","createTexture","GPUTextureUsage","RENDER_ATTACHMENT","passEncoder","beginRenderPass","colorAttachments","view","clearValue","r","g","b","a","loadOp","storeOp","depthStencilAttachment","depthClearValue","depthLoadOp","depthStoreOp","setPipeline","setVertexBuffer","setBindGroup","draw","end","rect","TextureFilterConvolve","kernelData","kernelDataByteLength","byteLength","kernelBuffer","UNIFORM","computePipeline","shaderModuleCode","createComputePipeline","compute","texture","width","height","STORAGE_BINDING","TEXTURE_BINDING","beginComputePass","dispatch","setKernel3x3","row0","row1","row2","opts","scale","normalize","sum","reduce","accum","n","map","newKernelData","bias","TextureSourceBitmapFromURL","imageBitmap","label","textureWidth","textureHeight","copyExternalImageToTexture","source","TextureSourceBitmap","url","setPropFn","cancelled","then","catch","error","console","useAsyncPropSetter","bind","img","document","createElement","src","decode","createImageBitmap","getPreferredCanvasFormat","navigator","gpu","renderFn","sobelHorizontal","setupFn","powerPreference","Error","requestAdapter","requestDevice","getDevice","canvas","getContext","configure","alphaMode","getCanvasContext","querySelector","getDemoCanvas","frameFn","unitRoot","unitFrame","createUnitRoot","output","requestAnimationFrame","repeatFrameWithContext","createCommandEncoder","submit","finish","runFrameWithContext","innerHTML","runDemoInner"],"sourceRoot":""}