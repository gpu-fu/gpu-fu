{"version":3,"file":"Demo1.js","mappings":"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","sources":["webpack://beta/webpack/universalModuleDefinition","webpack://beta/webpack/bootstrap","webpack://beta/webpack/runtime/make namespace object","webpack://beta/./src/common/Demo.ts","webpack://beta/./src/Demo1/index.ts","webpack://beta/./src/Demo1/shaders/vertex/SimpleTriangle.wgsl","webpack://beta/./src/Demo1/shaders/fragment/UniformGreen.wgsl"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"beta\"] = factory();\n\telse\n\t\troot[\"beta\"] = factory();\n})(typeof self !== 'undefined' ? self : this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/// <reference types=\"@webgpu/types\" />\n\nexport interface DemoProps {\n  device: GPUDevice\n  canvasContext: GPUCanvasContext\n}\n\nexport default abstract class Demo {\n  device: GPUDevice\n  canvasContext: GPUCanvasContext\n\n  constructor(props: DemoProps) {\n    this.device = props.device\n    this.canvasContext = props.canvasContext\n  }\n\n  abstract setup(): unknown\n  abstract frame(): unknown\n\n  run() {\n    this.setup()\n\n    requestAnimationFrame(this.runFrameRepeatedly.bind(this))\n  }\n\n  private runFrameRepeatedly() {\n    this.frame()\n\n    requestAnimationFrame(this.runFrameRepeatedly.bind(this))\n  }\n\n  runCommand(fn: (commandEncoder: GPUCommandEncoder) => unknown) {\n    const commandEncoder = this.device.createCommandEncoder()\n    fn(commandEncoder)\n    this.device.queue.submit([commandEncoder.finish()])\n  }\n}\n\nexport function runDemo<T extends Demo>(type: { new (props: DemoProps): T }) {\n  ;(async () => {\n    const device = await getDevice()\n    const canvasContext = await getCanvasContext(\"canvas.main\", device)\n\n    const demo = new type({ device, canvasContext })\n    demo.run()\n  })().catch((error) => {\n    document.querySelector(\"body\")!.innerHTML = error\n    console.error(error)\n  })\n}\n\nasync function getDevice(\n  powerPreference: GPUPowerPreference = \"high-performance\"\n): Promise<GPUDevice> {\n  if (!navigator.gpu)\n    throw new Error(\"Your browser doesn't have WebGPU enabled!\")\n\n  const gpu = await navigator.gpu.requestAdapter({ powerPreference })\n  if (!gpu) throw new Error(\"Failed to get the GPU adapter!\")\n\n  return gpu.requestDevice()\n}\n\nasync function getCanvasContext(\n  querySelector: string,\n  device: GPUDevice\n): Promise<GPUCanvasContext> {\n  const canvas = document.querySelector(\n    querySelector\n  ) as HTMLCanvasElement | null\n  if (!canvas) throw new Error(\"The main canvas wasn't found in the HTML!\")\n\n  const canvasContext = canvas.getContext(\"webgpu\") as GPUCanvasContext | null\n  if (!canvasContext) throw new Error(\"Failed to get a WebGPU canvas context!\")\n\n  canvasContext.configure({\n    device,\n    format: getPreferredCanvasFormat(),\n    alphaMode: \"opaque\",\n  })\n\n  return canvasContext\n}\n\nfunction getPreferredCanvasFormat() {\n  // Some browsers throw an \"Illegal invocation\" error if we don't bind.\n  const getPreferredCanvasFormat =\n    navigator.gpu?.getPreferredCanvasFormat?.bind(navigator.gpu)\n  if (getPreferredCanvasFormat) return getPreferredCanvasFormat()\n\n  // Hard-coded default for browsers that don't implement this function yet.\n  return \"rgba8unorm\"\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport Demo, { runDemo } from \"../common/Demo\"\nimport SimpleTriangleWGSL from \"./shaders/vertex/SimpleTriangle.wgsl\"\nimport UniformGreenWGSL from \"./shaders/fragment/UniformGreen.wgsl\"\n\nclass Demo1 extends Demo {\n  renderPipeline: GPURenderPipeline | null = null\n\n  setup() {\n    this.renderPipeline = this.device.createRenderPipeline({\n      vertex: {\n        module: this.device.createShaderModule({\n          code: SimpleTriangleWGSL,\n        }),\n        entryPoint: \"main\",\n      },\n      fragment: {\n        module: this.device.createShaderModule({\n          code: UniformGreenWGSL,\n        }),\n        entryPoint: \"main\",\n        targets: [\n          {\n            format:\n              this.canvasContext.getCurrentTexture().format || \"rgba8unorm\",\n          },\n        ],\n      },\n      primitive: {\n        topology: \"triangle-list\",\n      },\n      // TODO: fix to `layout: \"auto\"` when browser is updated to match the spec.\n      layout: undefined as unknown as GPUAutoLayoutMode,\n    })\n  }\n\n  frame() {\n    this.runCommand((commandEncoder) => {\n      const passEncoder = commandEncoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: this.canvasContext.getCurrentTexture().createView(),\n            clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n            loadOp: \"clear\" as GPULoadOp,\n            storeOp: \"store\" as GPUStoreOp,\n          },\n        ],\n      })\n      passEncoder.setPipeline(this.renderPipeline!)\n      passEncoder.draw(3, 1, 0, 0)\n      passEncoder.end()\n    })\n  }\n}\n\nrunDemo(Demo1)\n","export default \"@stage(vertex)\\nfn main(\\n  @builtin(vertex_index) index: u32\\n) ->\\n  @builtin(position) vec4<f32>\\n{\\n  let triangle = array<vec2<f32>, 3>(\\n    vec2<f32>(0.0, 0.433),\\n    vec2<f32>(-0.5, -0.433),\\n    vec2<f32>(0.5, -0.433)\\n  );\\n\\n  return vec4<f32>(triangle[index], 0.0, 1.0);\\n}\\n\";","export default \"@stage(fragment)\\nfn main() -> @location(0) vec4<f32> {\\n  return vec4<f32>(0.0, 1.0, 0.0, 1.0);\\n}\\n\";"],"names":["root","factory","exports","module","define","amd","self","this","Symbol","toStringTag","Object","defineProperty","value","props","device","canvasContext","run","setup","requestAnimationFrame","runFrameRepeatedly","bind","frame","runCommand","fn","commandEncoder","createCommandEncoder","queue","submit","finish","getDevice","powerPreference","navigator","gpu","Error","requestAdapter","requestDevice","getCanvasContext","querySelector","canvas","document","getContext","configure","format","getPreferredCanvasFormat","alphaMode","type","error","innerHTML","console","runDemo","renderPipeline","createRenderPipeline","vertex","createShaderModule","code","entryPoint","fragment","targets","getCurrentTexture","primitive","topology","layout","undefined","passEncoder","beginRenderPass","colorAttachments","view","createView","clearValue","r","g","b","a","loadOp","storeOp","setPipeline","draw","end"],"sourceRoot":""}