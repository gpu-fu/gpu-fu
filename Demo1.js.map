{"version":3,"file":"Demo1.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAc,KAAID,IAElBD,EAAW,KAAIC,IARjB,CASmB,oBAATK,KAAuBA,KAAOC,MAAM,I,mBCR9C,I,KCAwB,CAACL,IACH,oBAAXM,QAA0BA,OAAOC,aAC1CC,OAAOC,eAAeT,EAASM,OAAOC,YAAa,CAAEG,MAAO,WAE7DF,OAAOC,eAAeT,EAAS,aAAc,CAAEU,OAAO,K,q1CCEvD,aAIE,WAAYC,GACVN,KAAKO,OAASD,EAAMC,OACpBP,KAAKQ,cAAgBF,EAAME,cAkC/B,OA5BE,YAAAC,IAAA,WACET,KAAKU,QAELC,sBAAsBX,KAAKY,mBAAmBC,KAAKb,QAG7C,YAAAY,mBAAR,WACEZ,KAAKc,QAELH,sBAAsBX,KAAKY,mBAAmBC,KAAKb,QAGrD,YAAAe,WAAA,SAAWC,GACT,IAAMC,EAAiBjB,KAAKO,OAAOW,uBACnCF,EAAGC,GACHjB,KAAKO,OAAOY,MAAMC,OAAO,CAACH,EAAeI,YAU3C,YAAAC,WAAA,aAGF,EAxCA,GAuDA,SAAeC,EACbC,G,YAAA,IAAAA,IAAAA,EAAA,oB,yFAEA,IAAKC,UAAUC,IACb,MAAM,IAAIC,MAAM,6CAEN,SAAMF,UAAUC,IAAIE,eAAe,CAAEJ,gBAAe,K,OAChE,KADME,EAAM,UACF,MAAM,IAAIC,MAAM,kCAE1B,MAAO,CAAP,EAAOD,EAAIG,wBAGb,SAAeC,EACbC,EACAxB,G,2EAKA,KAHMyB,EAASC,SAASF,cACtBA,IAEW,MAAM,IAAIJ,MAAM,6CAG7B,KADMnB,EAAgBwB,EAAOE,WAAW,WACpB,MAAM,IAAIP,MAAM,0CAQpC,OANAnB,EAAc2B,UAAU,CACtB5B,OAAM,EACN6B,OAAQC,IACRC,UAAW,WAGN,CAAP,EAAO9B,SAGT,SAAS6B,I,QAEDA,EACmC,QAAvC,EAAa,QAAb,EAAAZ,UAAUC,WAAG,eAAEW,gCAAwB,eAAExB,KAAKY,UAAUC,KAC1D,OAAIW,EAAiCA,IAG9B,a,gdArDF,SAAiCE,GACpC,EADJ,UACI,qB,0DACe,SAAMhB,K,OACC,SAAMO,EAAiB,cADvCvB,EAAS,W,cACTC,EAAgB,SAET,IAAI+B,EAAK,CAAEhC,OAAM,EAAEC,cAAa,IACxCC,M,WACG,OAAC,SAAC+B,GACVP,SAASF,cAAc,QAASU,UAAYD,EAC5CE,QAAQF,MAAMA,MCnDlBG,CAAO,YACL,a,+CA2CA,OA3CoB,OAGlB,YAAAjC,MAAA,WACEV,KAAK4C,eAAiB5C,KAAKO,OAAOsC,qBAAqB,CACrDC,OAAQ,CACNlD,OAAQI,KAAKO,OAAOwC,mBAAmB,CAAEC,KCdnD,qSDeUC,WAAY,QAEdC,SAAU,CACRtD,OAAQI,KAAKO,OAAOwC,mBAAmB,CAAEC,KElBnD,0GFmBUC,WAAY,OACZE,QAAS,CACP,CACEf,OACEpC,KAAKQ,cAAc4C,oBAAoBhB,QAAU,gBAIzDiB,UAAW,CACTC,SAAU,iBAEZC,OAAQvD,KAAKsB,gBAIjB,YAAAR,MAAA,sBACEd,KAAKe,YAAW,SAACE,GACf,IAAMuC,EAAcvC,EAAewC,gBAAgB,CACjDC,iBAAkB,CAChB,CACEC,KAAM,EAAKnD,cAAc4C,oBAAoBQ,aAC7CC,WAAY,CAAEC,EAAG,EAAKC,EAAG,EAAKC,EAAG,EAAKC,EAAG,GACzCC,OAAQ,QACRC,QAAS,YAIfX,EAAYY,YAAY,EAAKxB,gBAC7BY,EAAYa,KAAK,EAAG,EAAG,EAAG,GAC1Bb,EAAYc,UAGlB,EA5CK,C","sources":["webpack://beta/webpack/universalModuleDefinition","webpack://beta/webpack/bootstrap","webpack://beta/webpack/runtime/make namespace object","webpack://beta/./src/common/Demo.ts","webpack://beta/./src/Demo1/index.ts","webpack://beta/./src/Demo1/shaders/vertex/SimpleTriangle.wgsl","webpack://beta/./src/Demo1/shaders/fragment/UniformGreen.wgsl"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"beta\"] = factory();\n\telse\n\t\troot[\"beta\"] = factory();\n})(typeof self !== 'undefined' ? self : this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/// <reference types=\"@webgpu/types\" />\n\nexport interface DemoProps {\n  device: GPUDevice\n  canvasContext: GPUCanvasContext\n}\n\nexport default abstract class Demo {\n  device: GPUDevice\n  canvasContext: GPUCanvasContext\n\n  constructor(props: DemoProps) {\n    this.device = props.device\n    this.canvasContext = props.canvasContext\n  }\n\n  abstract setup(): unknown\n  abstract frame(): unknown\n\n  run() {\n    this.setup()\n\n    requestAnimationFrame(this.runFrameRepeatedly.bind(this))\n  }\n\n  private runFrameRepeatedly() {\n    this.frame()\n\n    requestAnimationFrame(this.runFrameRepeatedly.bind(this))\n  }\n\n  runCommand(fn: (commandEncoder: GPUCommandEncoder) => unknown) {\n    const commandEncoder = this.device.createCommandEncoder()\n    fn(commandEncoder)\n    this.device.queue.submit([commandEncoder.finish()])\n  }\n\n  // Some browsers don't yet support the `layout: \"auto\"`, so for them\n  // we introduce this hack that pretends that `undefined` is that string\n  // at the TypeScript level, so that the browser can fill it in as the default,\n  // despite the types no longer allowing for it to be undefined.\n  //\n  // Eventually this hack will stop working and we'll just replace this\n  // with actually returning the string \"auto\" and it will be better.\n  autoLayout() {\n    return undefined as unknown as GPUAutoLayoutMode\n  }\n}\n\nexport function runDemo<T extends Demo>(type: { new (props: DemoProps): T }) {\n  ;(async () => {\n    const device = await getDevice()\n    const canvasContext = await getCanvasContext(\"canvas.main\", device)\n\n    const demo = new type({ device, canvasContext })\n    demo.run()\n  })().catch((error) => {\n    document.querySelector(\"body\")!.innerHTML = error\n    console.error(error)\n  })\n}\n\nasync function getDevice(\n  powerPreference: GPUPowerPreference = \"high-performance\"\n): Promise<GPUDevice> {\n  if (!navigator.gpu)\n    throw new Error(\"Your browser doesn't have WebGPU enabled!\")\n\n  const gpu = await navigator.gpu.requestAdapter({ powerPreference })\n  if (!gpu) throw new Error(\"Failed to get the GPU adapter!\")\n\n  return gpu.requestDevice()\n}\n\nasync function getCanvasContext(\n  querySelector: string,\n  device: GPUDevice\n): Promise<GPUCanvasContext> {\n  const canvas = document.querySelector(\n    querySelector\n  ) as HTMLCanvasElement | null\n  if (!canvas) throw new Error(\"The main canvas wasn't found in the HTML!\")\n\n  const canvasContext = canvas.getContext(\"webgpu\") as GPUCanvasContext | null\n  if (!canvasContext) throw new Error(\"Failed to get a WebGPU canvas context!\")\n\n  canvasContext.configure({\n    device,\n    format: getPreferredCanvasFormat(),\n    alphaMode: \"opaque\",\n  })\n\n  return canvasContext\n}\n\nfunction getPreferredCanvasFormat() {\n  // Some browsers throw an \"Illegal invocation\" error if we don't bind.\n  const getPreferredCanvasFormat =\n    navigator.gpu?.getPreferredCanvasFormat?.bind(navigator.gpu)\n  if (getPreferredCanvasFormat) return getPreferredCanvasFormat()\n\n  // Hard-coded default for browsers that don't implement this function yet.\n  return \"rgba8unorm\"\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport Demo, { runDemo } from \"../common/Demo\"\n\nimport SimpleTriangle from \"./shaders/vertex/SimpleTriangle.wgsl\"\nimport UniformGreen from \"./shaders/fragment/UniformGreen.wgsl\"\n\nrunDemo(\n  class Demo1 extends Demo {\n    renderPipeline: GPURenderPipeline | undefined\n\n    setup() {\n      this.renderPipeline = this.device.createRenderPipeline({\n        vertex: {\n          module: this.device.createShaderModule({ code: SimpleTriangle }),\n          entryPoint: \"main\",\n        },\n        fragment: {\n          module: this.device.createShaderModule({ code: UniformGreen }),\n          entryPoint: \"main\",\n          targets: [\n            {\n              format:\n                this.canvasContext.getCurrentTexture().format || \"rgba8unorm\",\n            },\n          ],\n        },\n        primitive: {\n          topology: \"triangle-list\",\n        },\n        layout: this.autoLayout(),\n      })\n    }\n\n    frame() {\n      this.runCommand((commandEncoder) => {\n        const passEncoder = commandEncoder.beginRenderPass({\n          colorAttachments: [\n            {\n              view: this.canvasContext.getCurrentTexture().createView(),\n              clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n              loadOp: \"clear\" as GPULoadOp,\n              storeOp: \"store\" as GPUStoreOp,\n            },\n          ],\n        })\n        passEncoder.setPipeline(this.renderPipeline!)\n        passEncoder.draw(3, 1, 0, 0)\n        passEncoder.end()\n      })\n    }\n  }\n)\n","export default \"@stage(vertex)\\nfn main(\\n  @builtin(vertex_index) index: u32\\n) ->\\n  @builtin(position) vec4<f32>\\n{\\n  let triangle = array<vec2<f32>, 3>(\\n    vec2<f32>(0.0, 0.433),\\n    vec2<f32>(-0.5, -0.433),\\n    vec2<f32>(0.5, -0.433)\\n  );\\n\\n  return vec4<f32>(triangle[index], 0.0, 1.0);\\n}\\n\";","export default \"@stage(fragment)\\nfn main() -> @location(0) vec4<f32> {\\n  return vec4<f32>(0.0, 1.0, 0.0, 1.0);\\n}\\n\";"],"names":["root","factory","exports","module","define","amd","self","this","Symbol","toStringTag","Object","defineProperty","value","props","device","canvasContext","run","setup","requestAnimationFrame","runFrameRepeatedly","bind","frame","runCommand","fn","commandEncoder","createCommandEncoder","queue","submit","finish","autoLayout","getDevice","powerPreference","navigator","gpu","Error","requestAdapter","requestDevice","getCanvasContext","querySelector","canvas","document","getContext","configure","format","getPreferredCanvasFormat","alphaMode","type","error","innerHTML","console","runDemo","renderPipeline","createRenderPipeline","vertex","createShaderModule","code","entryPoint","fragment","targets","getCurrentTexture","primitive","topology","layout","passEncoder","beginRenderPass","colorAttachments","view","createView","clearValue","r","g","b","a","loadOp","storeOp","setPipeline","draw","end"],"sourceRoot":""}