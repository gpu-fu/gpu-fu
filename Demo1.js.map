{"version":3,"file":"Demo1.js","mappings":"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","sources":["webpack://beta/webpack/universalModuleDefinition","webpack://beta/webpack/bootstrap","webpack://beta/webpack/runtime/make namespace object","webpack://beta/./src/common/runDemo.ts","webpack://beta/./src/gpu-fu/OutputCanvas.ts","webpack://beta/./src/Demo1/index.ts","webpack://beta/./src/Demo1/shaders/vertex/SimpleTriangle.wgsl","webpack://beta/./src/Demo1/shaders/fragment/ColorByPosition.wgsl"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"beta\"] = factory();\n\telse\n\t\troot[\"beta\"] = factory();\n})(typeof self !== 'undefined' ? self : this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/// <reference types=\"@webgpu/types\" />\n\nimport Context from \"../gpu-fu/Context\"\n\ntype FrameFn = (ctx: Context, frame: number) => void\ntype SetupFn = (\n  device: GPUDevice,\n  canvasContext: GPUCanvasContext\n) => Promise<FrameFn>\n\nexport default function runDemo(setupFn: SetupFn) {\n  ;(async () => {\n    const device = await getDevice()\n    const canvasContext = await getCanvasContext(\"canvas.main\", device)\n\n    const frameFn = await setupFn(device, canvasContext)\n\n    var frame = 0\n    function repeatFrameWithContext() {\n      frame = frame + 1\n      runFrameWithContext(device, frame, frameFn)\n      requestAnimationFrame(repeatFrameWithContext)\n    }\n    requestAnimationFrame(repeatFrameWithContext)\n  })().catch((error) => {\n    document.querySelector(\"body\")!.innerHTML = error\n    console.error(error)\n  })\n}\n\nasync function getDevice(\n  powerPreference: GPUPowerPreference = \"high-performance\"\n): Promise<GPUDevice> {\n  if (!navigator.gpu)\n    throw new Error(\"Your browser doesn't have WebGPU enabled!\")\n\n  const gpu = await navigator.gpu.requestAdapter({ powerPreference })\n  if (!gpu) throw new Error(\"Failed to get the GPU adapter!\")\n\n  return gpu.requestDevice()\n}\n\nasync function getCanvasContext(\n  querySelector: string,\n  device: GPUDevice\n): Promise<GPUCanvasContext> {\n  const canvas = document.querySelector(\n    querySelector\n  ) as HTMLCanvasElement | null\n  if (!canvas) throw new Error(\"The main canvas wasn't found in the HTML!\")\n\n  const canvasContext = canvas.getContext(\"webgpu\") as GPUCanvasContext | null\n  if (!canvasContext) throw new Error(\"Failed to get a WebGPU canvas context!\")\n\n  canvasContext.configure({\n    device,\n    format: getPreferredCanvasFormat(),\n    alphaMode: \"opaque\",\n  })\n\n  return canvasContext\n}\n\nfunction getPreferredCanvasFormat() {\n  // Some browsers throw an \"Illegal invocation\" error if we don't bind.\n  const getPreferredCanvasFormat =\n    navigator.gpu?.getPreferredCanvasFormat?.bind(navigator.gpu)\n  if (getPreferredCanvasFormat) return getPreferredCanvasFormat()\n\n  // Hard-coded default for browsers that don't implement this function yet.\n  return \"rgba8unorm\"\n}\n\nfunction runFrameWithContext(\n  device: GPUDevice,\n  frame: number,\n  frameFn: FrameFn\n) {\n  const commandEncoder = device.createCommandEncoder()\n  frameFn({ device, commandEncoder }, frame)\n  device.queue.submit([commandEncoder.finish()])\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport Context from \"./Context\"\nimport Render from \"./Render\"\n\nexport default class OutputCanvas {\n  _canvasContext: GPUCanvasContext\n  _renders: Render[] = []\n\n  constructor(canvasContext: GPUCanvasContext) {\n    this._canvasContext = canvasContext\n  }\n\n  addRender(render: Render) {\n    if (this._renders.includes(render)) return\n    this._renders.push(render)\n  }\n\n  outputFrame(ctx: Context, frame: number) {\n    const target = this._canvasContext.getCurrentTexture()\n    this._renders.forEach((render) => {\n      render.renderFrame(ctx, frame, target)\n    })\n  }\n}\n","/// <reference types=\"@webgpu/types\" />\n\nimport runDemo from \"../common/runDemo\"\n\nimport Render from \"../gpu-fu/Render\"\nimport Context from \"../gpu-fu/Context\"\nimport { autoLayout } from \"../gpu-fu/utils\"\n\nimport OutputCanvas from \"../gpu-fu/OutputCanvas\"\n\nimport SimpleTriangle from \"./shaders/vertex/SimpleTriangle.wgsl\"\nimport ColorByPosition from \"./shaders/fragment/ColorByPosition.wgsl\"\n\nrunDemo(async (device, canvasContext) => {\n  const renderTriangle = new RenderColoredTriangle()\n\n  const output = new OutputCanvas(canvasContext)\n  output.addRender(renderTriangle)\n\n  return function frame(ctx, frame) {\n    output.outputFrame(ctx, frame)\n  }\n})\n\nclass RenderColoredTriangle implements Render {\n  _renderPipeline?: GPURenderPipeline\n\n  getRenderPipeline(ctx: Context) {\n    if (this._renderPipeline) return this._renderPipeline\n\n    return (this._renderPipeline = ctx.device.createRenderPipeline({\n      vertex: {\n        module: ctx.device.createShaderModule({ code: SimpleTriangle }),\n        entryPoint: \"main\",\n      },\n      fragment: {\n        module: ctx.device.createShaderModule({ code: ColorByPosition }),\n        entryPoint: \"main\",\n        targets: [\n          {\n            // TODO: Remove this hard-coded value - get the real one somehow.\n            format: \"rgba8unorm\" as GPUTextureFormat,\n          },\n        ],\n      },\n      primitive: {\n        topology: \"triangle-list\",\n      },\n      layout: autoLayout(),\n    }))\n  }\n\n  renderFrame(ctx: Context, frame: number, target: GPUTexture): void {\n    const passEncoder = ctx.commandEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: target.createView(),\n          clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n          loadOp: \"clear\" as GPULoadOp,\n          storeOp: \"store\" as GPUStoreOp,\n        },\n      ],\n    })\n    passEncoder.setPipeline(this.getRenderPipeline(ctx))\n    passEncoder.draw(3, 1, 0, 0)\n    passEncoder.end()\n  }\n}\n","export default \"@stage(vertex)\\nfn main(\\n  @builtin(vertex_index) index: u32\\n) ->\\n  @builtin(position) vec4<f32>\\n{\\n  let triangle = array<vec2<f32>, 3>(\\n    vec2<f32>(0.0, 0.433),\\n    vec2<f32>(-0.5, -0.433),\\n    vec2<f32>(0.5, -0.433),\\n  );\\n\\n  return vec4<f32>(triangle[index], 0.0, 1.0);\\n}\\n\";","export default \"@stage(fragment)\\nfn main(\\n  @builtin(position) pos_in: vec4<f32>\\n) ->\\n  @location(0) vec4<f32>\\n{\\n  return vec4<f32>(\\n    pos_in.x * 0.003,\\n    pos_in.y * 0.003,\\n    1.0 - (pos_in.y * 0.003),\\n    1.0,\\n  );\\n}\\n\";"],"names":["root","factory","exports","module","define","amd","self","this","Symbol","toStringTag","Object","defineProperty","value","getDevice","powerPreference","navigator","gpu","Error","requestAdapter","requestDevice","getCanvasContext","querySelector","device","canvas","document","canvasContext","getContext","configure","format","getPreferredCanvasFormat","alphaMode","bind","_renders","_canvasContext","addRender","render","includes","push","outputFrame","ctx","frame","target","getCurrentTexture","forEach","renderFrame","setupFn","repeatFrameWithContext","frameFn","commandEncoder","createCommandEncoder","queue","submit","finish","runFrameWithContext","requestAnimationFrame","error","innerHTML","console","runDemo","renderTriangle","RenderColoredTriangle","output","getRenderPipeline","_renderPipeline","createRenderPipeline","vertex","createShaderModule","code","entryPoint","fragment","targets","primitive","topology","layout","autoLayout","passEncoder","beginRenderPass","colorAttachments","view","createView","clearValue","r","g","b","a","loadOp","storeOp","setPipeline","draw","end"],"sourceRoot":""}